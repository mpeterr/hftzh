/*
#####Menyus kódjai#####
##Kiemelt: zh példa és 8. gyakorlat##
Gyak9-zh-pelda
Course.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Gyak_009_zh_pelda
{
    public class Course
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public string Title { get; set; }
        public int Credits { get; set; }

        [NotMapped]
        public virtual ICollection<InstructorCourse> InstructorCourses { get; set; }
    }
}

CourseDbContext.cs
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Gyak_009_zh_pelda
{
    public class CoursesDbContext : DbContext
    {
        public DbSet<InstructorCourse> Data { get; set; }

        public CoursesDbContext() {
            Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder
                .UseLazyLoadingProxies()
                .UseInMemoryDatabase("mydb");
            base.OnConfiguring(optionsBuilder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<InstructorCourse>()
                .HasOne(ic => ic.Instructor)
                .WithMany(instr => instr.InstructorCourses)
                .HasForeignKey(ic => ic.InstructorId);

            modelBuilder.Entity<InstructorCourse>()
                .HasOne(ic => ic.Course)
                .WithMany(c => c.InstructorCourses)
                .HasForeignKey(ic => ic.CourseId);

            // Seed data for Instructors
            modelBuilder.Entity<Instructor>().HasData(
                new Instructor { Id = 1, Name = "Jane Doe", Neptun = "ABX21J" },
                new Instructor { Id = 2, Name = "John Smith", Neptun = "QR76K3" },
                new Instructor { Id = 3, Name = "Bela Vak", Neptun = "UOMI6X" },
                new Instructor { Id = 4, Name = "Main Iac", Neptun = "T67REX" },
                new Instructor { Id = 5, Name = "Charles Dufay", Neptun = "QUAX1P" }
            );

            // Seed data for Courses
            modelBuilder.Entity<Course>().HasData(
                new Course { Id = 1, Title = "Math", Credits = 8 },
                new Course { Id = 2, Title = "English", Credits = 2 },
                new Course { Id = 3, Title = "Geography", Credits = 5 },
                new Course { Id = 4, Title = "Poetry", Credits = 6 },
                new Course { Id = 5, Title = "Drama", Credits = 5 },
                new Course { Id = 6, Title = "Social Studies", Credits = 4 }
            );

            // Seed data for InstructorCourses
            modelBuilder.Entity<InstructorCourse>().HasData(
                new InstructorCourse { Id = 1, InstructorId = 1, CourseId = 1 }, // Jane Doe teaches Math
                new InstructorCourse { Id = 2, InstructorId = 1, CourseId = 3 },  // Jane Doe teaches Geography
                new InstructorCourse { Id = 3, InstructorId = 3, CourseId = 2 }, // Bela Vak teaches English
                new InstructorCourse { Id = 4, InstructorId = 3, CourseId = 3 }, // Bela Vak teaches Geography
                new InstructorCourse { Id = 5, InstructorId = 3, CourseId = 6 }, // Bela Vak teaches Social Studies
                new InstructorCourse { Id = 6, InstructorId = 4, CourseId = 4 }, // Main Iac teaches Poetry
                new InstructorCourse { Id = 7, InstructorId = 2, CourseId = 5 }, // John Smith and Charles Dufay teach Drama
                new InstructorCourse { Id = 8, InstructorId = 5, CourseId = 5 } // John Smith and Charles Dufay teach Drama
            );

            base.OnModelCreating(modelBuilder);
        }

    }
}

Instructor.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace Gyak_009_zh_pelda
{
    public class Instructor
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        public string Name { get; set; }
        
        [Neptun]
        public string Neptun { get; set; }

        [NotMapped]
        public virtual ICollection<InstructorCourse> InstructorCourses { get; set; }
    }
}

InstructorCourse.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Gyak_009_zh_pelda
{
    public class InstructorCourse
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        public int InstructorId { get; set; }

        public int CourseId { get; set; }

        [NotMapped]
        public virtual Instructor Instructor { get; set; }

        [NotMapped]
        public virtual Course Course { get; set; }
    }
}

Program.cs
using Gyak_009_zh_pelda;
using System.Reflection;

[AttributeUsage(AttributeTargets.Property)]
public class NeptunAttribute : Attribute
{
}

public interface IValidation
{
    public bool Validate(object instance, PropertyInfo property);
}

public class NeptunValidation : IValidation
{
    NeptunAttribute attr;

    public NeptunValidation(NeptunAttribute a)
    {
        attr = a;
    }

    public bool Validate(object instance, PropertyInfo prop)
    {
        if (prop.PropertyType == typeof(string))
        {
            var value = prop.GetValue(instance) as string;
            if (value != null)
            {
                bool isLen6 = value.Length == 6;

                if (!isLen6) { return false; }

                for (int i = 0; i < 6; i++) {
                    if (
                        char.IsUpper(value[i])
                        || char.IsDigit(value[i]))
                    {

                    }
                    else {
                        return false;
                    }
                }
                
            }
        }
        return true;

    }
}

public class Validator
{
    public bool Validate(object instance) {

        foreach (var prop in instance.GetType().GetProperties())
        {
            foreach(var attr in prop.GetCustomAttributes(false))
            {
                if (attr is NeptunAttribute)
                {
                    NeptunValidation v = 
                        new NeptunValidation((NeptunAttribute)attr);

                    if (!v.Validate(instance, prop)) {
                        return false;
                    }
                }
            }
        }

        return true;
    }
}


public class Program
{
    static void Main(string[] args)
    {
        CoursesDbContext context = new CoursesDbContext();
        var listofCourses = context.Data.Select(
            x => x.Course.Title).Distinct()
        .ToList();

        Console.WriteLine("Osszes kurzus:");
        foreach (var course in listofCourses)
        {
            Console.WriteLine(course);
        }
        Console.WriteLine();

        var listofCoursesJD = context.Data
            .Where(x => x.Instructor.Name.Equals("Jane Doe"))
            .Select(
                x => x.Course.Title
            ).Distinct()
        .ToList();

        Console.WriteLine("Osszes kurzus, ahol Jane Doe tanit:");
        foreach (var course in listofCoursesJD)
        {
            Console.WriteLine(course);
        }
        Console.WriteLine();


        var listOfTeachers = context.Data
            .GroupBy(x => x.Instructor.Name)
            .Select(x => new
            {
                name = x.Key, // Key az ami szerint csoportositottunk (oktato neve)
                numTimes = x.Count() // megszamolja, hogy hany targy tartozik az adott oktatohoz
            })
            .Where(x => x.numTimes > 2);

        Console.WriteLine("Osszes oktato, aki legalabb 3 kurzust tanit:");
        foreach (var teacher in listOfTeachers)
        {
            Console.WriteLine(teacher.name);
        }
        Console.WriteLine();

        Validator validator = new Validator();
        Instructor i1 = new Instructor { Id = 1, Name = "Jane Doe", Neptun = "ABC123" };

        Console.WriteLine($"i1 valid: {validator.Validate(i1)}");
    }
}

Gyak-009-zh-pelda.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <RootNamespace>Gyak_009_zh_pelda</RootNamespace>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="7.0.13" />
  </ItemGroup>

</Project>
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
Gyak8/BookstoreApp
Bookstore
Bookstore.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.13">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Data\Data.csproj" />
    <ProjectReference Include="..\Models\Models.csproj" />
    <ProjectReference Include="..\Validations\Validations.csproj" />
  </ItemGroup>

</Project>

Program.cs


using Bookstore.Data;
using Bookstore.Models;
using Bookstore.Validations;
//using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Reflection;


namespace Bookstore {

    internal class Program { 
    
        static void Main(string[] args)
        {
            //Feladat:
            //Books table
            //Bookstores table
            //mivel tobb-a-tobbhoz:
            //BooksAndBookstores kapcsolotabla

            BookstoreDbContext ctx = new BookstoreDbContext();
            var li = ctx.BooksAndBookstores.Select(x => x.Bookstore).Distinct().ToList();
            // distinct nelkul annyiszor szerepelne mindegyik konyv,
            // ahany soraban megtalalhato a BooksAndBookstores tablanak

            Console.WriteLine("Az adatbázisban levő könyvesboltok:");
            foreach(var item in li)
            {
                Console.WriteLine(item.Name);
            }

            // Feladat: keressuk meg Jokai osszes konyvet!
            var li2 = ctx.BooksAndBookstores
                .Select(sor => sor.Book)
                .Where(book => book.Author == "Jokai")
                .Distinct().ToList();

            Console.WriteLine("\nJokai összes könyve:");
            foreach (var item in li2)
            {
                Console.WriteLine(item.Title);
            }

            // Feladat: soroljuk fel azokat a konyveket, melyek tobb, mint 1 boltban elerhetoek

            var filteredBooks = ctx.BooksAndBookstores
                .GroupBy(bab => bab.Book)
                .Select(bookdata => new
                {
                    id = bookdata.Key.Id,
                    author = bookdata.Key.Author,
                    title = bookdata.Key.Title,
                    numTimes = bookdata.Count()
                })
                .Where(aggregateddata =>
                    aggregateddata.numTimes > 1
                    //&&
                    //aggregateddata.author == "Babits"
                    );

            Console.WriteLine("\nKönyvek, amelyek több, mint 1 boltban elérhetőek:");
            foreach (var item in filteredBooks)
            {
                Console.WriteLine(item.title);
            }

            var bookToValidate = new Book()
            {
                Id = 1,
                Title = "Something",
                Author = "A P"
            };

            var validator = new Validator();
            bool isValid = validator.Validate(bookToValidate);
            Console.WriteLine($"Book is validated: {isValid}");

        }

    }

}

Data
BookstoreDbContext.cs
using Microsoft.EntityFrameworkCore;
using Bookstore.Models;

namespace Bookstore.Data
{
    public class BookstoreDbContext : DbContext
    {
        public DbSet<BookAndBookstore> BooksAndBookstores { get; set; }

        public BookstoreDbContext()
        {
            this.Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!builder.IsConfigured)
            {
                builder.
                    UseLazyLoadingProxies().UseInMemoryDatabase("BooksDB");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BookAndBookstore>(entity => entity
                .HasOne(entity => entity.Book)
                .WithMany(book => book.Bookstores)
                .HasForeignKey(bab => bab.BookId)
            );

            // Regen 1 Brandhez tobb Car tartozhatott...
            // Most: 1 Bookstore-hoz tobb BookAndBookstore tartozik
            // ... es BookAndBookstore-ban a foreign key nem BId, hanem BookstoreId
            //modelBuilder.Entity<Car>(entity => entity
            //    .HasOne(entity => entity.Brand)
            //    .WithMany(brand => brand.Cars)
            //    .HasForeignKey(car => car.BId)
            //);
            modelBuilder.Entity<BookAndBookstore>(entity => entity
                .HasOne(entity => entity.Bookstore)
                .WithMany(bookstore => bookstore.Books)
                .HasForeignKey(bab => bab.BookstoreId)
            );

            modelBuilder.Entity<Book>().HasData(new Book[]
                {
                    new Book() { Id = 1, Title = "Koszivu ember fiai", Author="Jokai" },
                    new Book() { Id = 2, Title = "Az arany ember", Author="Jokai" },
                    new Book() { Id = 3, Title = "Edes Anna", Author="Kosztolanyi" },
                    new Book() { Id = 4, Title = "Jonas konyve", Author="Babits" }
                }
            );

            modelBuilder.Entity<BookStore>().HasData(new BookStore[]
                {
                    new BookStore() { Id = 1, Name = "Libri" },
                    new BookStore() { Id = 2, Name = "Alexandra" },
                    new BookStore() { Id = 3, Name = "Lira" }
                }
            );

            modelBuilder.Entity<BookAndBookstore>().HasData(new BookAndBookstore[]
                {
                    // 1-es konyv csak a Libriben es Alexandraban
                    // 2-es konyv mindharom boltban
                    // 3-as konyv csak a Liraban
                    new BookAndBookstore() { Id = 1, BookId = 1, BookstoreId = 1 },
                    new BookAndBookstore() { Id = 2, BookId = 1, BookstoreId = 2 },
                    new BookAndBookstore() { Id = 3, BookId = 2, BookstoreId = 1 },
                    new BookAndBookstore() { Id = 4, BookId = 2, BookstoreId = 2 },
                    new BookAndBookstore() { Id = 5, BookId = 2, BookstoreId = 3 },
                    new BookAndBookstore() { Id = 6, BookId = 3, BookstoreId = 3 },
                    new BookAndBookstore() { Id = 7, BookId = 4, BookstoreId = 2 },
                    new BookAndBookstore() { Id = 8, BookId = 4, BookstoreId = 3 }
                }
            );
        }
    }
}

Data.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.13">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Models\Models.csproj" />
  </ItemGroup>

</Project>

Models
Books.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

using Bookstore.Validations;

namespace Bookstore.Models
{
    public class Book
    {
        // auto-generated int id kell
        // es kell title, year, author

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        [MaximumLength(10)]
        [AlphabetOnly]
        public string Author { get; set; }

        [NotMapped]
        public virtual ICollection<BookAndBookstore> Bookstores { get; set; }

        public Book()
        {
            Bookstores = new HashSet<BookAndBookstore>();
        }
    }
}

Bookstores.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

using Bookstore.Validations;

namespace Bookstore.Models
{
    public class Book
    {
        // auto-generated int id kell
        // es kell title, year, author

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        [MaximumLength(10)]
        [AlphabetOnly]
        public string Author { get; set; }

        [NotMapped]
        public virtual ICollection<BookAndBookstore> Bookstores { get; set; }

        public Book()
        {
            Bookstores = new HashSet<BookAndBookstore>();
        }
    }
}

BooksAndBookstores.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Bookstore.Models
{
    public class BookAndBookstore
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public int BookId { get; set; }

        [Required]
        public int BookstoreId { get; set; }

        [NotMapped]
        public virtual Book Book { get; set; }
        [NotMapped]
        public virtual BookStore Bookstore { get; set; }
    }

}

Models.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Validations\Validations.csproj" />
  </ItemGroup>

</Project>

Testing
Testing.cs
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.7.2" />
    <PackageReference Include="NUnit" Version="3.13.3" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.5.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Models\Models.csproj" />
    <ProjectReference Include="..\Validations\Validations.csproj" />
  </ItemGroup>

</Project>

UnitTests.cs
using NUnit.Framework;
using Bookstore.Models;
using Bookstore.Validations;

namespace Bookstore.Testing
{
    [TestFixture]
    public class UnitTests
    {

        [Test]
        public void AuthorFailLength()
        {
            var book = new Book()
            {
                Id = 1,
                Title = "Something",
                Author = "A Very Long Author Name Indeed"
            };

            var validator = new Validator();
            bool isValid = validator.Validate(book);
            Assert.IsFalse(isValid);
        }

        [Test]
        public void AuthorPassLength()
        {
            var book = new Book()
            {
                Id = 1,
                Title = "Something",
                Author = "A Very Sho"
            };

            var validator = new Validator();
            bool isValid = validator.Validate(book);
            Assert.IsTrue(isValid);

        }

        [Test]
        public void AuthorFailCharacter()
        {
            var book = new Book()
            {
                Id = 1,
                Title = "Something",
                Author = "Not#good"
            };

            var validator = new Validator();
            bool isValid = validator.Validate(book);
            Assert.IsFalse(isValid);
        }

        [Test]
        public void AuthorPassCharacter()
        {
            var book = new Book()
            {
                Id = 1,
                Title = "Something",
                Author = "Isgood"
            };

            var validator = new Validator();
            bool isValid = validator.Validate(book);
            Assert.IsTrue(isValid);

        }


    }
}

Validations
Validations.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>

Validations.cs
using System.Reflection;

namespace Bookstore.Validations
{
    public class MaximumLengthAttribute : Attribute
    {
        public int maxlen { get; }

        public MaximumLengthAttribute(int mlen)
        {
            maxlen = mlen;
        }
    }

    public class AlphabetOnlyAttribute : Attribute
    {
    }

    public interface IValidation
    {
        public bool Validate(object instance, PropertyInfo property);
    }

    public class AlphabetOnlyValidation : IValidation {
        private AlphabetOnlyAttribute attr;

        public AlphabetOnlyValidation(AlphabetOnlyAttribute a)
        {
            attr = a;
        }

        public bool Validate(object instance, PropertyInfo property) {
            // TODO: validalni hogy az adott instance adott prop-jara teljesul-e
            // az Authorokkal kapcsolatos feltetelrendszer
            // maximum 10 karakter, csak kis es nagybetuk, illetve szokozok
            if (property.PropertyType == typeof(string))
            {
                var value = property.GetValue(instance) as string;

                if (value != null)
                {
                    bool isAllCapitalOrSpace = true;

                    for (var i = 0; i < value.Length; i++)
                    { 
                        if (
                            !char.IsUpper(value[i])
                            && !char.IsLower(value[i])
                            && !value[i].Equals(' ')) {
                            isAllCapitalOrSpace = false;
                        }
                    }

                    if (!isAllCapitalOrSpace)
                    {
                        return false;
                    }
                }
            }

            return true;
        }
    }

    public class MaximumLengthValidation : IValidation
    {
        private MaximumLengthAttribute attr;

        public MaximumLengthValidation(MaximumLengthAttribute a)
        {
            attr = a;
        }

        public bool Validate(object instance, PropertyInfo property)
        {
            // TODO: validalni hogy az adott instance adott prop-jara teljesul-e
            // az Authorokkal kapcsolatos feltetelrendszer
            // maximum 10 karakter, csak kis es nagybetuk, illetve szokozok
            if (property.PropertyType == typeof(string))
            {
                int maxlen = attr.maxlen;
                var value = property.GetValue(instance) as string;

                if (value != null)
                {
                    bool lenLessThanX = value.Length < maxlen + 1;
                    if (!lenLessThanX)
                    {
                        return false;
                    }
                }
            }

            return true;
        }
    }

    public class Validator {
        public bool Validate(object instance) { 
            foreach (var prop in instance.GetType().GetProperties())
            {
                foreach (var attr in prop.GetCustomAttributes(false)) {
                    if (attr is AlphabetOnlyAttribute) {
                        AlphabetOnlyValidation aval = new AlphabetOnlyValidation(
                            (AlphabetOnlyAttribute)attr
                        );
                        if (!aval.Validate(instance, prop)) {
                            return false;
                        }

                    }

                    if (attr is MaximumLengthAttribute)
                    {
                        MaximumLengthValidation aval = new MaximumLengthValidation(
                            (MaximumLengthAttribute)attr
                        );
                        if (!aval.Validate(instance, prop))
                        {
                            return false;
                        }
                    }
                }

            }
            return true;
        }
    
    }
}
####################################################################################################
Gyak2
Program.cs

using System.ComponentModel;

namespace FeedbackProcessorNS {

    class Program {

        enum Category { 
            BugReport,
            Opinion,
            FeatureRequest
        }

        class Feedback { 
            public Category Category { get; }
            public int Priority { get; }

            public string Message { get; }

            public Feedback(Category CategoryAttribute, int prio, string msg)
            {
                Category = CategoryAttribute;
                Priority = prio;
                Message = msg;
            }

            // hogy ne csak cim alapjan lehessen 2 feedback-et osszehasonlitani
            public bool Equals(Feedback other)
            {
                return (
                    this.Category == other.Category &&
                    this.Priority == other.Priority &&
                    this.Message == other.Message
                );
            }

        }

        class FeedbackProcessor
        {
            int PERFORM_ACTION_FREQ = 3;
            public Dictionary<Category, Action<Feedback>> actions;
            public List<Feedback> feedbacks;

            public FeedbackProcessor()
            {
                actions = new Dictionary<Category, Action<Feedback>>();
                feedbacks = new List<Feedback>();
            }

            public void AddAction(Category c, Action<Feedback> a, bool keepOthers) {
                if (!keepOthers || !actions.ContainsKey(c))
                {
                    actions[c] = a;
                }
                else {
                    actions[c] += a;
                }
            }

            public void AddFeedback(Feedback fb) {
                // add fb to feedbacks
                // if length of feedbacks modulo div by PERFORM_ACTION_FREQ
                // == 0
                // => perform actions

                // Csak akkor adjuk hozza, ha ilyen tartalmu fb meg nem letezik
                if (feedbacks.Any<Feedback>(other => other.Equals(fb))) {
                    return;
                }

                feedbacks.Add(fb);

                if (feedbacks.Count % PERFORM_ACTION_FREQ == 0 )
                {
                    for (int i = 0; i < feedbacks.Count; i++)
                    {
                        Feedback cur = feedbacks[i];
                        if (actions.ContainsKey(cur.Category))
                        {
                            actions[cur.Category].Invoke(cur);
                        }
                        Console.WriteLine("***");
                    }
                    Console.WriteLine(" --- DONE ---");
                    feedbacks.Clear();
                }

                
            }
        }

        static void Main(string[] args)
        {

            Feedback fb1 = new Feedback(
                Category.BugReport,
                5,
                "Start gomb nem csinal semmit"
            );

            Feedback fb1b = new Feedback(
                Category.BugReport,
                5,
                "Start gomb nem csinal semmit"
            );

            FeedbackProcessor fproc = new FeedbackProcessor();

            Action<Feedback> action1 = (feedback) =>
            {
                Console.WriteLine(feedback.Message);
            };
            fproc.AddAction(Category.BugReport, action1, true); // true => a meglevokhoz hozza vesszuk
            fproc.AddAction(Category.BugReport, Feedback => { 
                Console.WriteLine("Masodik action a BugReport-hoz!");
            }, true); // true => megtartjuk az elozo Action-t is

            fproc.AddAction(Category.Opinion, fb =>
            {
                Console.WriteLine("Ez csak a Te velemenyed...");
            }, true);

            fproc.AddAction(Category.Opinion, fb =>
            {
                Console.WriteLine($"Opinion: {fb.Message}");
            }, false);

            fproc.AddFeedback(fb1);
            fproc.AddFeedback(new Feedback(
                Category.Opinion, 3, "Kivalo munka!")
            );
            fproc.AddFeedback(fb1b);
            fproc.AddFeedback(new Feedback(
                Category.FeatureRequest, 4, "Tobb jatekszintet kerunk!")
            );
            fproc.AddFeedback(new Feedback(
                Category.Opinion, 4, "Egyaltalan nem tetszik!")
            );
            fproc.AddFeedback(new Feedback(
                Category.BugReport, 7, "Ha megfordulok a jatekban, osszeomlik az egesz!")
            );
            fproc.AddFeedback(new Feedback(
                Category.Opinion, 1, "Kedvenc jatekom...")
            );
        }
    
    }

}
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
Gyak3
Program.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Xml.Linq;

namespace WarOfWesteros
{
    // 3) feladat: keszitsunk egy statikus osztalyt
    // melyben egy statikus extension methodot letrehozunk
    // ToConsole<T> nevvel!
    static class Operations
    {
        public static void ToConsole<T>(this IEnumerable<T> content, string title)
        {
            Console.WriteLine($"*** {title}: ***\n");
            foreach (var item in content)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine("****************");
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            // github.com/csapoadam oldalon
            // oe-hft-gyak-2023-osz
            // nevu repobol szedjuk le a
            // war-of-westeros.xml nevu fajlt

            // adambalazs.csapo@uni-corvinus.hu

            // 1) feladat: toltsuk be az xml fajl tartalmat
            XDocument doc = XDocument.Load("war_of_westeros.xml");
           
            Console.WriteLine(doc);

            // 2) feladat: irassuk ki mindegyik csata nevét!
            //var iter = doc.Descendants("name")
            //    .Select(x => x.Value);
            //iter.ToConsole("Names of all Battles");

            // iter egy IEnumerable<string> tipusu valtozo
            //foreach (var item in iter)
            //{
            //    Console.WriteLine(item);
            //}
            doc.Descendants("name")
                .Select(x => x.Value)
                .ToConsole("Names of all Battles");

            // 4) feladat: irassuk ki azon csatak neveit,
            // melyeknek a tipusa "ambush"
            var queryRes = from battleNode in doc.Descendants("battle")
                           where battleNode.Element("type").Value == "ambush"
                           select battleNode.Element("name").Value;
            queryRes.ToConsole("Ambush type Battles");

            // alternativ megfogalmazas (method style):
            doc.Descendants("battle")
                .Where(battleNode => battleNode.Element("type").Value == "ambush")
                .Select(battleNode => battleNode.Element("name").Value)
                .ToConsole("Ambush type Battles v2");

            // 5) feladat: hany olyan csata volt, ahol a vedekezo csapat nyert
            // ES volt legalabb 1 majorcapture? Csak egy szamot irjunk ki
            var queryRes2 = from battleNode in doc.Descendants("battle")
                            // Ez elhasal, ha nincs majorcapture
                            //let value = int.Parse(battleNode.Element ("majorcapture")?.Value)
                            let value = battleNode.Element("majorcapture")?.Value                            
                            // ezert itt teszteljuk, hogy null-e
                            where battleNode.Element("outcome").Value == "defender" && value != null && int.Parse(value) > 0
                           select battleNode.Element("name").Value;
            // Mindketto jo:
            //Console.WriteLine($"Number of ambush type battles: {queryRes2.Count()}");
            queryRes2.Count().ToString().ToConsole("Number of ambush type battles");

            // alternativ megfogalmazas (method style):
            doc.Descendants("battle")
                .Where(battleNode =>
                    battleNode.Element("outcome").Value == "defender"
                    && battleNode.Element("majorcapture")?.Value != null
                    && int.Parse(battleNode.Element("majorcapture")?.Value) > 0
                )
                .Select(battleNode => battleNode.Element("name").Value)
                .Count().ToString().ToConsole("Number of ambush type battles v2");

            // 6) feladat: hany olyan csata volt, amelyet a Stark haz nyert meg?
            // a.) van egy outcome, ami vagy attacker vagy defender
            // b.) attol fuggoen, hogy melyik, az attacker vagy defender
            // node-ban meg kell nezni a house-t, hogy "Stark"-e
            // VIGYAZAT: olyan is lehet, hogy tobb house tag van egy attacker
            // vagy defender elejen
            // TESZT: Battle of the Whispering Wood megfelel ennek
            var queryRes3 = from battleNode in doc.Descendants("battle")

                            let whoWon = battleNode.Element("outcome").Value
                            let winnerHouses = battleNode.Element(whoWon).Elements("house").Select(x => x.Value)

                            where winnerHouses.Contains("Stark")

                            //select battleNode.Element("name").Value;
                            select new
                            {
                                battleName = battleNode.Element("name").Value,
                                Outcome = whoWon,
                                Houses = String.Join("; ", winnerHouses)
                            };

            queryRes3.ToConsole("Battles in which winners include Stark house");
            queryRes3.Count().ToString().ToConsole("Number of such battles");

            // 7) feladat: mely csatakban vett reszt tobb, mint 2 haz
            // (attacker es defender houses, es legalabb az egyikben 2 haz kell)
            var queryRes4 = from battleNode in doc.Descendants("battle")

                            let numAttackerHouses = battleNode.Element("attacker").Elements("house").Count()
                            let numDefenderHouses = battleNode.Element("defender").Elements("house").Count()

                            where numAttackerHouses + numDefenderHouses > 2

                            //select battleNode.Element("name").Value;
                            select new
                            {
                                battleName = battleNode.Element("name").Value,
                                numAttackerHouses,
                                numDefenderHouses
                            };

            queryRes4.ToConsole("Battles in which more than 2 houses participated");

            // 8) Melyik 3 regioban volt a legtobb eroszak?
            // -> ossze kell szamolni, hogy melyik regioban hany csata volt
            // -> ezutan groupby segitsegevel a top 3-at kivalasztani
            var queryRes5 = from battleNode in doc.Descendants("battle")
                            group battleNode by battleNode.Element("region").Value into grp
                            let cnt = grp.Count()
                            orderby cnt descending

                            select new
                            {
                                region = grp.Key,
                                count = cnt
                            };

            queryRes5.Take(50).ToConsole("Regions from most to least violent");
        }
    }
}

war_of_westeros.xml
<?xml version="1.0" encoding="utf-8"?>
<war>
  <battle>
    <name>Battle of the Golden Tooth</name>
    <year>298</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Golden Tooth</location>
    <region>The Westerlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Jaime Lannister</commander>
      </commanders>
      <house>Lannister</house>
      <size>15000</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Clement Piper</commander>
        <commander>Vance</commander>
      </commanders>
      <house>Tully</house>
      <size>4000</size>
    </defender>
  </battle>
  <battle>
    <name>Battle at the Mummer's Ford</name>
    <year>298</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Mummer's Ford</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Gregor Clegane</commander>
      </commanders>
      <house>Lannister</house>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Beric Dondarrion</commander>
      </commanders>
      <house>Baratheon</house>
      <size>120</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of Riverrun</name>
    <year>298</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>Riverrun</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Jaime Lannister</commander>
        <commander>Andros Brax</commander>
      </commanders>
      <house>Lannister</house>
      <size>15000</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Edmure Tully</commander>
        <commander>Tytos Blackwood</commander>
      </commanders>
      <house>Tully</house>
      <size>10000</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Green Fork</name>
    <year>298</year>
    <outcome>defender</outcome>
    <type>pitched battle</type>
    <majordeath>1</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>Green Fork</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Roose Bolton</commander>
        <commander>Wylis Manderly</commander>
        <commander>Medger Cerwyn</commander>
        <commander>Harrion Karstark</commander>
        <commander>Halys Hornwood</commander>
      </commanders>
      <house>Stark</house>
      <size>18000</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Tywin Lannister</commander>
        <commander>Gregor Clegane</commander>
        <commander>Kevan Lannister</commander>
        <commander>Addam Marbrand</commander>
      </commanders>
      <house>Lannister</house>
      <size>20000</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Whispering Wood</name>
    <year>298</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>1</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>Whispering Wood</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Robb Stark</commander>
        <commander>Brynden Tully</commander>
      </commanders>
      <house>Stark</house>
      <house>Tully</house>
      <size>1875</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Jaime Lannister</commander>
      </commanders>
      <house>Lannister</house>
      <size>6000</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Camps</name>
    <year>298</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Riverrun</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Robb Stark</commander>
        <commander>Tytos Blackwood</commander>
        <commander>Brynden Tully</commander>
      </commanders>
      <house>Stark</house>
      <house>Tully</house>
      <size>6000</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Lord Andros Brax</commander>
        <commander>Forley Prester</commander>
      </commanders>
      <house>Lannister</house>
      <size>12625</size>
    </defender>
  </battle>
  <battle>
    <name>Sack of Darry</name>
    <year>298</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Darry</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Gregor Clegane</commander>
      </commanders>
      <house>Lannister</house>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Lyman Darry</commander>
      </commanders>
      <house>Darry</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of Moat Cailin</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Moat Cailin</location>
    <region>The North</region>
    <attacker>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Victarion Greyjoy</commander>
      </commanders>
      <house>Greyjoy</house>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <house>Stark</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of Deepwood Motte</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Deepwood Motte</location>
    <region>The North</region>
    <attacker>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Asha Greyjoy</commander>
      </commanders>
      <house>Greyjoy</house>
      <size>1000</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <house>Stark</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Stony Shore</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Stony Shore</location>
    <region>The North</region>
    <attacker>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Theon Greyjoy</commander>
      </commanders>
      <house>Greyjoy</house>
      <size>264</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <house>Stark</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of Torrhen's Square</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Torrhen's Square</location>
    <region>The North</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Rodrik Cassel</commander>
        <commander>Cley Cerwyn</commander>
      </commanders>
      <house>Stark</house>
      <size>244</size>
    </attacker>
    <defender>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Dagmer Cleftjaw</commander>
      </commanders>
      <house>Greyjoy</house>
      <size>900</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of Winterfell</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>0</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>Winterfell</location>
    <region>The North</region>
    <attacker>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Theon Greyjoy</commander>
      </commanders>
      <house>Greyjoy</house>
      <size>20</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Bran Stark</commander>
      </commanders>
      <house>Stark</house>
    </defender>
  </battle>
  <battle>
    <name>Sack of Torrhen's Square</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>Torrhen's Square</location>
    <region>The North</region>
    <attacker>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Dagmer Cleftjaw</commander>
      </commanders>
      <house>Greyjoy</house>
    </attacker>
    <defender>
      <king>Balon/Euron Greyjoy</king>
      <house>Stark</house>
    </defender>
  </battle>
  <battle>
    <name>Sack of Winterfell</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Winterfell</location>
    <region>The North</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Ramsay Snow</commander>
        <commander>Theon Greyjoy</commander>
      </commanders>
      <house>Bolton</house>
      <house>Greyjoy</house>
      <size>618</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Rodrik Cassel</commander>
        <commander>Cley Cerwyn</commander>
        <commander>Leobald Tallhart</commander>
      </commanders>
      <house>Stark</house>
      <size>2000</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of Oxcross</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>1</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>Oxcross</location>
    <region>The Westerlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Robb Stark</commander>
        <commander>Brynden Tully</commander>
      </commanders>
      <house>Stark</house>
      <house>Tully</house>
      <size>6000</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Stafford Lannister</commander>
        <commander>Roland Crakehall</commander>
        <commander>Antario Jast</commander>
      </commanders>
      <house>Lannister</house>
      <size>10000</size>
    </defender>
  </battle>
  <battle>
    <name>Siege of Storm's End</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Storm's End</location>
    <region>The Stormlands</region>
    <attacker>
      <king>Stannis Baratheon</king>
      <commanders>
        <commander>Stannis Baratheon</commander>
        <commander>Davos Seaworth</commander>
      </commanders>
      <house>Baratheon</house>
      <size>5000</size>
    </attacker>
    <defender>
      <king>Renly Baratheon</king>
      <commanders>
        <commander>Renly Baratheon</commander>
        <commander>Cortnay Penrose</commander>
        <commander>Loras Tyrell</commander>
        <commander>Randyll Tarly</commander>
        <commander>Mathis Rowan</commander>
      </commanders>
      <house>Baratheon</house>
      <size>20000</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Fords</name>
    <year>299</year>
    <outcome>defender</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Red Fork</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Tywin Lannister</commander>
        <commander>Flement Brax</commander>
        <commander>Gregor Clegane</commander>
        <commander>Addam Marbrand</commander>
        <commander>Lyle Crakehall</commander>
        <commander>Leo Lefford</commander>
      </commanders>
      <house>Lannister</house>
      <size>20000</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Edmure Tully</commander>
        <commander>Jason Mallister</commander>
        <commander>Karyl Vance</commander>
      </commanders>
      <house>Tully</house>
      <size>10000</size>
    </defender>
  </battle>
  <battle>
    <name>Sack of Harrenhal</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Harrenhal</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Roose Bolton</commander>
        <commander>Vargo Hoat</commander>
        <commander>Robett Glover</commander>
      </commanders>
      <house>Stark</house>
      <size>100</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Amory Lorch</commander>
      </commanders>
      <house>Lannister</house>
      <size>100</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Crag</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Crag</location>
    <region>The Westerlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Robb Stark</commander>
        <commander>Smalljon Umber</commander>
        <commander>Black Walder Frey</commander>
      </commanders>
      <house>Stark</house>
      <size>6000</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Rolph Spicer</commander>
      </commanders>
      <house>Lannister</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Blackwater</name>
    <year>299</year>
    <outcome>defender</outcome>
    <type>pitched battle</type>
    <majordeath>1</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>King's Landing</location>
    <region>The Crownlands</region>
    <attacker>
      <king>Stannis Baratheon</king>
      <commanders>
        <commander>Stannis Baratheon</commander>
        <commander>Imry Florent</commander>
        <commander>Guyard Morrigen</commander>
        <commander>Rolland Storm</commander>
        <commander>Salladhor Saan</commander>
        <commander>Davos Seaworth</commander>
      </commanders>
      <house>Baratheon</house>
      <size>21000</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Tyrion Lannister</commander>
        <commander>Jacelyn Bywater</commander>
        <commander>Sandor Clegane</commander>
        <commander>Tywin Lannister</commander>
        <commander>Garlan Tyrell</commander>
        <commander>Mace Tyrell</commander>
        <commander>Randyll Tarly</commander>
      </commanders>
      <house>Lannister</house>
      <size>7250</size>
    </defender>
  </battle>
  <battle>
    <name>Siege of Darry</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Darry</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Helman Tallhart</commander>
      </commanders>
      <house>Darry</house>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <house>Lannister</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of Duskendale</name>
    <year>299</year>
    <outcome>defender</outcome>
    <type>pitched battle</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Duskendale</location>
    <region>The Crownlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Robertt Glover</commander>
        <commander>Helman Tallhart</commander>
      </commanders>
      <house>Stark</house>
      <size>3000</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Randyll Tarly</commander>
        <commander>Gregor Clegane</commander>
      </commanders>
      <house>Lannister</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Burning Septry</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location></location>
    <region>The Riverlands</region>
    <attacker>
      <house>Brotherhood without Banners</house>
    </attacker>
    <defender>
      <house>Brave Companions</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Ruby Ford</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Ruby Ford</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Gregor Clegane</commander>
      </commanders>
      <house>Lannister</house>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Roose Bolton</commander>
        <commander>Wylis Manderly</commander>
      </commanders>
      <house>Stark</house>
      <size>6000</size>
    </defender>
  </battle>
  <battle>
    <name>Retaking of Harrenhal</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>summer</season>
    <location>Harrenhal</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Gregor Clegane</commander>
      </commanders>
      <house>Lannister</house>
    </attacker>
    <defender>
      <commanders>
        <commander>Vargo Hoat</commander>
      </commanders>
      <house>Brave Companions</house>
    </defender>
  </battle>
  <battle>
    <name>The Red Wedding</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>ambush</type>
    <majordeath>1</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>The Twins</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Walder Frey</commander>
        <commander>Roose Bolton</commander>
        <commander>Walder Rivers</commander>
      </commanders>
      <house>Frey</house>
      <house>Bolton</house>
      <size>3500</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Robb Stark</commander>
      </commanders>
      <house>Stark</house>
      <size>3500</size>
    </defender>
  </battle>
  <battle>
    <name>Siege of Seagard</name>
    <year>299</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>1</majorcapture>
    <season>summer</season>
    <location>Seagard</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Robb Stark</king>
      <commanders>
        <commander>Walder Frey</commander>
      </commanders>
      <house>Frey</house>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Jason Mallister</commander>
      </commanders>
      <house>Mallister</house>
    </defender>
  </battle>
  <battle>
    <name>Battle of Castle Black</name>
    <year>300</year>
    <outcome>defender</outcome>
    <type>siege</type>
    <majordeath>1</majordeath>
    <majorcapture>1</majorcapture>
    <season>winter</season>
    <location>Castle Black</location>
    <region>Beyond the Wall</region>
    <attacker>
      <king>Stannis Baratheon</king>
      <commanders>
        <commander>Mance Rayder</commander>
        <commander>Tormund Giantsbane</commander>
        <commander>Harma Dogshead</commander>
        <commander>Magnar Styr</commander>
        <commander>Varamyr</commander>
      </commanders>
      <house>Free folk</house>
      <house>Thenns</house>
      <house>Giants</house>
      <size>100000</size>
    </attacker>
    <defender>
      <king>Mance Rayder</king>
      <commanders>
        <commander>Stannis Baratheon</commander>
        <commander>Jon Snow</commander>
        <commander>Donal Noye</commander>
        <commander>Cotter Pyke</commander>
      </commanders>
      <house>Night's Watch</house>
      <house>Baratheon</house>
      <size>1240</size>
    </defender>
  </battle>
  <battle>
    <name>Fall of Moat Cailin</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Moat Cailin</location>
    <region>The North</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Ramsey Bolton</commander>
      </commanders>
      <house>Bolton</house>
    </attacker>
    <defender>
      <king>Balon/Euron Greyjoy</king>
      <house>Greyjoy</house>
    </defender>
  </battle>
  <battle>
    <name>Sack of Saltpans</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>razing</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Saltpans</location>
    <region>The Riverlands</region>
    <attacker>
      <commanders>
        <commander>Rorge</commander>
      </commanders>
      <house>Brave Companions</house>
    </attacker>
    <defender />
  </battle>
  <battle>
    <name>Retaking of Deepwood Motte</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Deepwood Motte</location>
    <region>The North</region>
    <attacker>
      <king>Stannis Baratheon</king>
      <commanders>
        <commander>Stannis Baratheon</commander>
        <commander>Alysane Mormot</commander>
      </commanders>
      <house>Baratheon</house>
      <house>Karstark</house>
      <house>Mormont</house>
      <house>Glover</house>
      <size>4500</size>
    </attacker>
    <defender>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Asha Greyjoy</commander>
      </commanders>
      <house>Greyjoy</house>
      <size>200</size>
    </defender>
  </battle>
  <battle>
    <name>Battle of the Shield Islands</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>pitched battle</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Shield Islands</location>
    <region>The Reach</region>
    <attacker>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Euron Greyjoy</commander>
        <commander>Victarion Greyjoy</commander>
      </commanders>
      <house>Greyjoy</house>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <house>Tyrell</house>
    </defender>
  </battle>
  <battle>
    <name>Invasion of Ryamsport, Vinetown, and Starfish Harbor</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>razing</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Ryamsport, Vinetown, Starfish Harbor</location>
    <region>The Reach</region>
    <attacker>
      <king>Balon/Euron Greyjoy</king>
      <commanders>
        <commander>Euron Greyjoy</commander>
        <commander>Victarion Greyjoy</commander>
      </commanders>
      <house>Greyjoy</house>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <house>Tyrell</house>
    </defender>
  </battle>
  <battle>
    <name>Second Seige of Storm's End</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Storm's End</location>
    <region>The Stormlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Mace Tyrell</commander>
        <commander>Mathis Rowan</commander>
      </commanders>
      <house>Baratheon</house>
    </attacker>
    <defender>
      <king>Stannis Baratheon</king>
      <commanders>
        <commander>Gilbert Farring</commander>
      </commanders>
      <house>Baratheon</house>
      <size>200</size>
    </defender>
  </battle>
  <battle>
    <name>Siege of Dragonstone</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Dragonstone</location>
    <region>The Stormlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Loras Tyrell</commander>
        <commander>Raxter Redwyne</commander>
      </commanders>
      <house>Baratheon</house>
      <size>2000</size>
    </attacker>
    <defender>
      <king>Stannis Baratheon</king>
      <commanders>
        <commander>Rolland Storm</commander>
      </commanders>
      <house>Baratheon</house>
    </defender>
  </battle>
  <battle>
    <name>Siege of Riverrun</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Riverrun</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Daven Lannister</commander>
        <commander>Ryman Fey</commander>
        <commander>Jaime Lannister</commander>
      </commanders>
      <house>Lannister</house>
      <house>Frey</house>
      <size>3000</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Brynden Tully</commander>
      </commanders>
      <house>Tully</house>
    </defender>
  </battle>
  <battle>
    <name>Siege of Raventree</name>
    <year>300</year>
    <outcome>attacker</outcome>
    <type>siege</type>
    <majordeath>0</majordeath>
    <majorcapture>1</majorcapture>
    <season>winter</season>
    <location>Raventree</location>
    <region>The Riverlands</region>
    <attacker>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Jonos Bracken</commander>
        <commander>Jaime Lannister</commander>
      </commanders>
      <house>Bracken</house>
      <house>Lannister</house>
      <size>1500</size>
    </attacker>
    <defender>
      <king>Robb Stark</king>
      <commanders>
        <commander>Tytos Blackwood</commander>
      </commanders>
      <house>Blackwood</house>
    </defender>
  </battle>
  <battle>
    <name>Siege of Winterfell</name>
    <year>300</year>
    <outcome>defender</outcome>
    <type>siege</type>
    <majordeath>1</majordeath>
    <majorcapture>0</majorcapture>
    <season>winter</season>
    <location>Winterfell</location>
    <region>The North</region>
    <attacker>
      <king>Stannis Baratheon</king>
      <commanders>
        <commander>Stannis Baratheon</commander>
      </commanders>
      <house>Baratheon</house>
      <house>Karstark</house>
      <house>Mormont</house>
      <house>Glover</house>
      <size>5000</size>
    </attacker>
    <defender>
      <king>Joffrey/Tommen Baratheon</king>
      <commanders>
        <commander>Roose Bolton</commander>
      </commanders>
      <house>Bolton</house>
      <house>Frey</house>
      <size>8000</size>
    </defender>
  </battle>
</war>
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
Gyak4
Program.cs
using Validation.Classes;

namespace ValidationDllExample
{
    internal class Person
    {
        [Validation.Classes.MaxLength(10)]
        public string Name { get; set; }

        public string DateOfBirth { get; set; }

        [Validation.Classes.Range(150,200)]
        public int HeightInCms { get; set; }
    }

    internal class Program
    {
        static void myPersonValidator(Person p)
        {
            bool isValid = Validator.validate(p);
            if (isValid)
            {
                Console.WriteLine($"{p.Name} is valid");
            }
            else
            {
                Console.WriteLine($"{p.Name} is NOT valid");
            }
        }

        static void Main(string[] args)
        {
            //Validation.Classes.TestClass.testFn();
            Person person1 = new Person() {
                Name = "Attila the Hun",
                DateOfBirth = "415.01.20",
                HeightInCms = 170
            };

            Person person2 = new Person()
            {
                Name = "Ottilia",
                DateOfBirth = "1912.12.24",
                HeightInCms = 70
            };

            myPersonValidator(person1);
            myPersonValidator(person2);

        }
    }
}

Validators.cs
using System.Reflection;

namespace Validation.Classes
{
    public class TestClass
    {
        public static void testFn() {
            Console.WriteLine("Success!");
        }
    }

    [AttributeUsage(AttributeTargets.Property)]
    public class MaxLengthAttribute : Attribute {

        public int MaxLen { get; set; }

        public MaxLengthAttribute(int len)
        {
            MaxLen = len;
        }
    }

    [AttributeUsage(AttributeTargets.Property)]
    public class RangeAttribute : Attribute
    {

        public int MinVal { get; set; }
        public int MaxVal { get; set; }

        public RangeAttribute(int minval, int maxval)
        {
            MinVal = minval;
            MaxVal = maxval;
        }
    }

    public interface IValidation
    {
        public bool validate(Object instance, PropertyInfo prop);
    }

    public class MaxLengthValidation : IValidation {
        private MaxLengthAttribute _attr;
        public MaxLengthValidation(MaxLengthAttribute attr)
        {
            _attr = attr;
        }

        public bool validate(object instance, PropertyInfo prop) {
            int maxLength = ((MaxLengthAttribute)_attr).MaxLen;
            string value = (string)prop.GetValue(instance);
            if (value.Length > maxLength)
            {
                return false;
            }
            return true;
        }
    }

    public class RangeValidation : IValidation
    {
        private RangeAttribute _attr;
        public RangeValidation(RangeAttribute attr)
        {
            _attr = attr;
        }

        public bool validate(object instance, PropertyInfo prop)
        {
            int minval = ((RangeAttribute)_attr).MinVal;
            int maxval = ((RangeAttribute)_attr).MaxVal;
            int value = (int)prop.GetValue(instance);
            if (value > maxval || value < minval)
            {
                return false;
            }
            return true;
        }
    }

    class ValidationFactory
    {
        public IValidation GetValidation(Attribute attr)
        {
            if (attr is MaxLengthAttribute) { 
                return new MaxLengthValidation((MaxLengthAttribute)attr);
            }
            if (attr is RangeAttribute) {
                return new RangeValidation((RangeAttribute)attr);
            }
            return null;
        }
    }

    public class Validator {
        public static bool validate(Object instance) {
            ValidationFactory valFactory = new ValidationFactory();

            foreach(
               var prop in instance.GetType().GetProperties()
            ){
                //Console.WriteLine(
                //  $"Property: {prop.Name}");
                //Console.WriteLine(
                //  $"\tValue: {prop.GetValue(instance)}");

                foreach(var attr in prop.GetCustomAttributes(false))
                {
                    IValidation validation = valFactory.GetValidation((System.Attribute)attr);

                    if (validation?.validate(instance, prop) == false) {
                        return false;
                    }
                }
            }

            return true;
        }
    }
}
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
Gyak5
CsprojFajl
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <RootNamespace>Gyak005_CarBrand</RootNamespace>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.12" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="7.0.12" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="7.0.12" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.12" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.12">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>

Brand.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Gyak005_CarBrand.Models
{
    public class Brand
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [StringLength(20)]
        [Required]
        public string Name { get; set; }

        [NotMapped]
        public virtual ICollection<Car> Cars { get; set; }

        public Brand()
        {
            Cars = new HashSet<Car>();
        }

        // ha pl. csv fajlban taroljuk el a seed adatokat...
        public Brand(string initstr)
        {
            string[] split = initstr.Split(',');
            Id = int.Parse(split[0]);
            Name = split[1];

            Cars = new HashSet<Car>();
        }
    }
}

Car.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Gyak005_CarBrand.Models
{
    public class Car
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column("CarId", TypeName ="int")]
        public int Id { get; set; }

        [StringLength(20)]
        [Required]
        public string Model { get; set; }

        public virtual Brand Brand { get; set; }

        public int XId { get; set; }

        [ForeignKey(nameof(Brand))]
        public int BId { get; set; }

        

        public Car()
        {

        }

        // ha pl. csv fajlban taroljuk el a seed adatokat...
        public Car(string initstr)
        {
            string[] split = initstr.Split(',');
            Id = int.Parse(split[0]);
            Model = split[1];
            XId = int.Parse(split[2]);
            BId = int.Parse(split[3]);
        }
    }
}

CarDbContext.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Gyak005_CarBrand.Models;
using Microsoft.EntityFrameworkCore;

namespace Gyak005_CarBrand.Data
{
    internal class CarDbContext : DbContext
    {
        public DbSet<Brand> Brands { get; set; }
        public DbSet<Car> Cars { get; set; }
        public CarDbContext ()
        {
            this.Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!builder.IsConfigured) {
                builder
                    .UseLazyLoadingProxies()
                    .UseInMemoryDatabase("CarDB");
            }
            
            //base.OnConfiguring(builder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Ha ez az 1-a-tobbhoz kapcsolat nem lenne
            // specifikalva, akkor is "rajonne" a fordito,
            // felteve hogy az idegen kulcs neve: BrandId
            // es nem alkalmazzuk a "NotMapped" attributumot
            // mihelyt BId-re cserelem (es a Car osztalyban
            // nem mondom meg, hogy ez idegen kulcs!),
            // kivetelt dob a program.
            // ha ezeket megmondom, de alkalmazom a NotMapped
            // attributumot, akkor is kotelezo ez:
            modelBuilder.Entity<Car>(entity => entity
                .HasOne(entity => entity.Brand)
                .WithMany(brand => brand.Cars)
                .HasForeignKey(car => car.BId)
            );

            modelBuilder.Entity<Brand>().HasData(new Brand[]
                { 
                    new Brand() { Id = 1, Name = "Renault" },
                    new Brand() { Id = 2, Name = "Ford" },
                    new Brand() { Id = 3, Name = "Suzuki" },
                    new Brand("4,Mazda")
                }
            );

            modelBuilder.Entity<Car>().HasData(new Car[]
                {
                    new Car() { Id = 1, Model = "Clio", XId = 2, BId = 1 },
                    new Car("2,Megane,2,1"),
                    new Car("3,Baleno,2,3"),
                    new Car("4,Swift,2,3")
                }
            );
            
            //base.OnModelCreating(modelBuilder);
        }
    }
}

Program.cs
using Gyak005_CarBrand.Data;

namespace Gyak005_CarBrand
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CarDbContext ctx = new CarDbContext();
            var brands = ctx.Brands.Select(x => x);
            foreach (var brand in brands)
            {
                Console.WriteLine(brand.Name);
                foreach (var car in brand.Cars) {
                    Console.WriteLine($"\t{car.Model}");
                }
            }

            Console.WriteLine("***");

            var cars = ctx.Cars.Select(x => x);
            foreach (var car in cars)
            {
                Console.WriteLine(car.Model);
                Console.WriteLine($"\t{car.Brand.Name}");
            }
        }
    }
}
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
Gyak6/CarDBWithRepositoryLayer
CarDB.Client
CarDB.Client.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Data\CarDB.Data.csproj" />
  </ItemGroup>

</Project>

Program.cs
using CarDB.Data;
using CarDB.Models;

namespace CarDB
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CarDbContext ctx = new CarDbContext();

            // Ez csak olvasas... de mi CRUD muveleteket
            // szeretnenk...
            // Create, Read, Update, Delete
            var brands = ctx.Brands.Select(x => x);
            foreach (var brand in brands)
            {
                Console.WriteLine(brand.Name);
            }

            // Repository celja: absztrakcio CRUD muveletek folott...
            // (ne nekunk kelljen kezzel...)
            // ahhoz, hogy a repository tudjon mukodni,
            // at kell neki adni a contextet...
            BrandRepository brep = new BrandRepository(ctx);
            CarRepository crep = new CarRepository(ctx);

            brep.Update(new Brand() { Id = 4, Name = "Matsuda" });

            Console.WriteLine("");
            Console.WriteLine("*** Update() utan: ***");
            foreach (var brand in brands)
            {
                Console.WriteLine(brand.Name);
            }

            crep.Create(new Car() { 
                Id = 5,
                Model = "Kadjar",
                BId = 1,
            });

            crep.Update(new Car()
            {
                Id = 4, // ha ez 10 akkor kivetel...
                Model = "Vitara",
                BId = 3,
            });

            Console.WriteLine("");
            Console.WriteLine("*** Create Kadjar utan: ***");
            foreach (var brand in brands)
            {
                Console.WriteLine(brand.Name);
                foreach (var car in brand.Cars)
                {
                    Console.WriteLine($"\t{car.Model}");
                }
            }
        }
    }
}

CarDB.Models
Brand.cs
using CarDB.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CarDB.Models
{
    public class Brand
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [StringLength(20)]
        [Required]
        public string Name { get; set; }

        [NotMapped]
        public virtual ICollection<Car> Cars { get; set; }

        public Brand()
        {
            Cars = new HashSet<Car>();
        }

        // ha pl. csv fajlban taroljuk el a seed adatokat...
        public Brand(string initstr)
        {
            string[] split = initstr.Split(',');
            Id = int.Parse(split[0]);
            Name = split[1];

            Cars = new HashSet<Car>();
        }
    }
}

Car.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CarDB.Models
{
    public class Car
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column("CarId", TypeName = "int")]
        public int Id { get; set; }

        [StringLength(20)]
        [Required]
        public string Model { get; set; }

        public virtual Brand Brand { get; set; }

        [ForeignKey(nameof(Brand))]
        public int BId { get; set; }



        public Car()
        {

        }

        // ha pl. csv fajlban taroljuk el a seed adatokat...
        public Car(string initstr)
        {
            string[] split = initstr.Split(',');
            Id = int.Parse(split[0]);
            Model = split[1];
            BId = int.Parse(split[2]);
        }
    }
}

CarDB.Models.csproj
<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>Library</OutputType>
		<TargetFramework>net6.0</TargetFramework>
		<RootNamespace>Gyak005_CarBrand</RootNamespace>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.12" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="7.0.12" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="7.0.12" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.12" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.12">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

</Project>

Data
BrandRepository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using CarDB.Models;

namespace CarDB.Data
{
    public class BrandRepository : Repository<Brand>, IRepository<Brand>
    {
        public BrandRepository(CarDbContext ctx) : base(ctx)
        {
        }

        public override Brand Read(int id)
        {
            var b = ctx.Brands.FirstOrDefault(
                b => b.Id == id
            );
            if (b != null) {
                return b;
            }
            throw new Exception("No such brand!");
        }
        public override void Update(Brand item)
        {
            var brandToUpdate = Read(item.Id);
            if (brandToUpdate != null)
            {
                brandToUpdate.Name = item.Name;
                ctx.SaveChanges();
            }
            else { 
                throw new Exception("Cannot update non-existent brand!");
            }
        }
    }
}

CarRepository.cs
using CarDB.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CarDB.Data
{
    public class CarRepository : Repository<Car>, IRepository<Car>
    {
        public CarRepository(CarDbContext ctx) : base(ctx)
        {
        }

        public override Car Read(int id)
        {
            var c = ctx.Cars.FirstOrDefault(
                c => c.Id == id
            );
            if (c != null)
            {
                return c;
            }
            throw new Exception("No such car!");
        }
        public override void Update(Car item)
        {
            // akkor is a Read()-ben keletkezik a kivetel
            // ha upate-elni probalok, de egy nem letezo
            // id-ju autot!
            // ezert: legyen itt egy try catch

            try
            {
                var carToUpdate = Read(item.Id);
                
                carToUpdate.Model = item.Model;
                carToUpdate.BId = item.BId;
                ctx.SaveChanges();

            } catch (Exception ex) {
                throw new Exception("Cannot update non-existent car!");
            }
        }
    }
}

CarDBContext.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using CarDB.Models;
using Microsoft.EntityFrameworkCore;

namespace CarDB.Data
{
    public class CarDbContext : DbContext
    {
        public DbSet<Brand> Brands { get; set; }
        public DbSet<Car> Cars { get; set; }
        public CarDbContext()
        {
            this.Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!builder.IsConfigured)
            {
                builder
                    .UseLazyLoadingProxies()
                    .UseInMemoryDatabase("CarDB");
            }

            //base.OnConfiguring(builder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Ha ez az 1-a-tobbhoz kapcsolat nem lenne
            // specifikalva, akkor is "rajonne" a fordito,
            // felteve hogy az idegen kulcs neve: BrandId
            // es nem alkalmazzuk a "NotMapped" attributumot
            // mihelyt BId-re cserelem (es a Car osztalyban
            // nem mondom meg, hogy ez idegen kulcs!),
            // kivetelt dob a program.
            // ha ezeket megmondom, de alkalmazom a NotMapped
            // attributumot, akkor is kotelezo ez:
            modelBuilder.Entity<Car>(entity => entity
                .HasOne(entity => entity.Brand)
                .WithMany(brand => brand.Cars)
                .HasForeignKey(car => car.BId)
            );

            modelBuilder.Entity<Brand>().HasData(new Brand[]
                {
                    new Brand() { Id = 1, Name = "Renault" },
                    new Brand() { Id = 2, Name = "Ford" },
                    new Brand() { Id = 3, Name = "Suzuki" },
                    new Brand("4,Mazda")
                }
            );

            modelBuilder.Entity<Car>().HasData(new Car[]
                {
                    new Car() { Id = 1, Model = "Clio", BId = 1 },
                    new Car("2,Megane,1"),
                    new Car("3,Baleno,3"),
                    new Car("4,Swift,3")
                }
            );

            //base.OnModelCreating(modelBuilder);
        }
    }
}

CarDB.Data.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\CarDB.Models\CarDB.Models.csproj" />
  </ItemGroup>

</Project>

Repository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CarDB.Data
{
    public abstract class Repository<T>: IRepository<T> where T : class
    {
        protected CarDbContext ctx;

        public Repository(CarDbContext ctx)
        {
            this.ctx = ctx;
        }

        public abstract T Read(int id);
        public abstract void Update(T item);

        public IQueryable<T> ReadAll() {
            return ctx.Set<T>();
        }

        public void Create(T item) { 
            ctx.Set<T>().Add(item);
            ctx.SaveChanges();
        }
        public void Delete(int id) {
            ctx.Set<T>().Remove(Read(id));
            ctx.SaveChanges();
        }

        
    }
}

IRepository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CarDB.Data
{
    public interface IRepository<T> where T : class
    {
        IQueryable<T> ReadAll();
        T Read(int id);
        void Create(T item);
        void Update(T item);
        void Delete(int id);
    }
}
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
Gyak7
Bookstore
Bookstore.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.13" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.13">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Data\Data.csproj" />
    <ProjectReference Include="..\Models\Models.csproj" />
  </ItemGroup>

</Project>

Program.cs


using Bookstore.Data;

namespace Bookstore {

    internal class Program { 
    
        static void Main(string[] args)
        {
            //Feladat:
            //Books table
            //Bookstores table
            //mivel tobb-a-tobbhoz:
            //BooksAndBookstores kapcsolotabla

            BookstoreDbContext ctx = new BookstoreDbContext();
            var li = ctx.BooksAndBookstores.Select(x => x.Bookstore).Distinct().ToList();
            // distinct nelkul annyiszor szerepelne mindegyik konyv,
            // ahany soraban megtalalhato a BooksAndBookstores tablanak

            Console.WriteLine("Az adatbázisban levő könyvesboltok:");
            foreach(var item in li)
            {
                Console.WriteLine(item.Name);
            }

            // Feladat: keressuk meg Jokai osszes konyvet!
            var li2 = ctx.BooksAndBookstores
                .Where(sor => sor.Book.Author == "Jokai")
                .Select(sor => sor.Book).Distinct().ToList();

            Console.WriteLine("\nJokai összes könyve:");
            foreach (var item in li2)
            {
                Console.WriteLine(item.Title);
            }

        }

    }

}

Data
BookstoreDbContext.cs
using Microsoft.EntityFrameworkCore;
using Bookstore.Models;

namespace Bookstore.Data
{
    public class BookstoreDbContext : DbContext
    {
        public DbSet<BookAndBookstore> BooksAndBookstores { get; set; }

        public BookstoreDbContext()
        {
            this.Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!builder.IsConfigured)
            {
                builder.
                    UseLazyLoadingProxies().UseInMemoryDatabase("BooksDB");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BookAndBookstore>(entity => entity
                .HasOne(entity => entity.Book)
                .WithMany(book => book.Bookstores)
                .HasForeignKey(bab => bab.BookId)
            );

            // Regen 1 Brandhez tobb Car tartozhatott...
            // Most: 1 Bookstore-hoz tobb BookAndBookstore tartozik
            // ... es BookAndBookstore-ban a foreign key nem BId, hanem BookstoreId
            //modelBuilder.Entity<Car>(entity => entity
            //    .HasOne(entity => entity.Brand)
            //    .WithMany(brand => brand.Cars)
            //    .HasForeignKey(car => car.BId)
            //);
            modelBuilder.Entity<BookAndBookstore>(entity => entity
                .HasOne(entity => entity.Bookstore)
                .WithMany(bookstore => bookstore.Books)
                .HasForeignKey(bab => bab.BookstoreId)
            );

            modelBuilder.Entity<Book>().HasData(new Book[]
                {
                    new Book() { Id = 1, Title = "Koszivu ember fiai", Author="Jokai" },
                    new Book() { Id = 2, Title = "Az arany ember", Author="Jokai" },
                    new Book() { Id = 3, Title = "Edes Anna", Author="Kosztolanyi" },
                    new Book() { Id = 4, Title = "Jonas konyve", Author="Babits" }
                }
            );

            modelBuilder.Entity<BookStore>().HasData(new BookStore[]
                {
                    new BookStore() { Id = 1, Name = "Libri" },
                    new BookStore() { Id = 2, Name = "Alexandra" },
                    new BookStore() { Id = 3, Name = "Lira" }
                }
            );

            modelBuilder.Entity<BookAndBookstore>().HasData(new BookAndBookstore[]
                {
                    // 1-es konyv csak a Libriben es Alexandraban
                    // 2-es konyv mindharom boltban
                    // 3-as konyv csak a Liraban
                    new BookAndBookstore() { Id = 1, BookId = 1, BookstoreId = 1 },
                    new BookAndBookstore() { Id = 2, BookId = 1, BookstoreId = 2 },
                    new BookAndBookstore() { Id = 3, BookId = 2, BookstoreId = 1 },
                    new BookAndBookstore() { Id = 4, BookId = 2, BookstoreId = 2 },
                    new BookAndBookstore() { Id = 5, BookId = 2, BookstoreId = 3 },
                    new BookAndBookstore() { Id = 6, BookId = 3, BookstoreId = 3 }
                }
            );
        }
    }
}

Data.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.13" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="7.0.13">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Models\Models.csproj" />
  </ItemGroup>

</Project>

Models
Books.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Bookstore.Models
{
    public class Book
    {
        // auto-generated int id kell
        // es kell title, year, author

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        public string Author { get; set; }

        [NotMapped]
        public virtual ICollection<BookAndBookstore> Bookstores { get; set; }

        public Book()
        {
            Bookstores = new HashSet<BookAndBookstore>();
        }
    }
}

Bookstores.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Bookstore.Models
{
    public class BookStore
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public string Name { get; set; }

        public virtual ICollection<BookAndBookstore> Books { get; set; }

        public BookStore()
        {
            Books = new HashSet<BookAndBookstore>();
        }
    }
}

BooksAndBookstores.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Bookstore.Models
{
    public class BookAndBookstore
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public int BookId { get; set; }

        [Required]
        public int BookstoreId { get; set; }

        [NotMapped]
        public virtual Book Book { get; set; }
        [NotMapped]
        public virtual BookStore Bookstore { get; set; }
    }

}

Models.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>
########################################################################################################################

#####1. MintaZHDeveloper#####
TesterProj
TesterClass.cs
using MintaZHDeveloper;
using NUnit.Framework;
using System;

namespace TesterProj
{
    [TestFixture]
    public class TesterClass
    {
        XMLExporter exp = new XMLExporter();

        [Test]
        public void PropertyToXElementTest()
        {
            //ARRANGE
            CustomerData data = new CustomerData();
            data.CustomerName = "Béla";

            //ACT
            var result = exp.PropertyToXElement(data.GetType().GetProperty("CustomerName"), data);

            //ASSERT
            Assert.That(result.Name == "MegrendeloNev");
            Assert.That(result.Value == "Béla");
        }

        [Test]
        public void PropertyToXElementTest2()
        {
            //ARRANGE
            DateTime data = DateTime.Now;

            //ACT
            var result = exp.PropertyToXElement(data.GetType().GetProperty("Hour"), data);

            //ASSERT
            Assert.That(result.Name == "Hour");
            Assert.That(result.Value == "14");
        }
    }
}
TesterProj.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.2" />
    <PackageReference Include="NUnit" Version="3.13.3" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MintaZHDeveloper\MintaZHDeveloper.csproj" />
  </ItemGroup>

</Project>
MintaZHDeveloper
XMLExporter.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace MintaZHDeveloper
{
    public class XMLExporter
    {
        public void Export<T>(IQueryable<T> items, string xmlFile)
        {
            XDocument xdoc = new XDocument();
            XElement root = new XElement(typeof(T).Name + "s");
            xdoc.Add(root);

            foreach (var item in items)
            {
                XElement sub = new XElement(typeof(T).Name);
                root.Add(sub);
                foreach (var prop in typeof(T).GetProperties())
                {
                    var result = PropertyToXElement(prop, item);
                    sub.Add(result);
                }
            }

            xdoc.Save(xmlFile);
        }

        public XElement PropertyToXElement(PropertyInfo prop, object o)
        {
            var attr = prop.GetCustomAttribute<HungarianTranslationAttribute>();
            var result = prop.GetValue(o);
            if (attr != null)
            {
                return new XElement(attr.Translation, result);
            }
            else
            {
                return new XElement(prop.Name, result);
            }
        }
    }
}
ProjectDbContext.cs
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper
{
    internal class ProjectDbContext : DbContext
    {
        public DbSet<Project> Projects { get; set; }
        public DbSet<Developer> Developers { get; set; }

        public ProjectDbContext()
        {
            Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //optionsBuilder.UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\devs.mdf;Integrated Security=True;MultipleActiveResultSets=True");
            optionsBuilder.UseInMemoryDatabase("db");
            base.OnConfiguring(optionsBuilder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Developer>()
                .HasOne(t => t.Project)
                .WithMany(t => t.Developers)
                .HasForeignKey(t => t.ProjectId);

            var projs = new Project[]
            {
                new Project(){ Id = 1, ProjectName = "Felhő alapú fizetési megoldás", Customer = "Mol Zrt.", Cost = 2000 },
                new Project(){ Id = 2, ProjectName = "Portfolio weboldal", Customer = "Tóth Csaba e.v.", Cost = 300 },
                new Project(){ Id = 3, ProjectName = "5G hálózathoz monitoring rendszer", Customer = "Magyar Telekom", Cost = 5000 },
                new Project(){ Id = 4, ProjectName = "Üzleti intelligencia projekt", Customer = "Mol Zrt.", Cost = 1500 },
                new Project(){ Id = 5, ProjectName = "Biometrikus beléptetőkapu", Customer = "Magyar Telekom", Cost = 1000 },
                new Project(){ Id = 6, ProjectName = "Mobil alkalmazás", Customer = "Rizmajer Sörfőzde", Cost = 1000 },
                new Project(){ Id = 7, ProjectName = "Elnökséget imitáló chatbot", Customer = "NIK HÖK", Cost = 1500 },
                new Project(){ Id = 8, ProjectName = "Okos benzinkút", Customer = "Mol Zrt.", Cost = 90000 },

            };


            var devs = new Developer[]{
                new Developer(){ Id = 1, Name = "Nagy Béla", IsStudent = false, ProjectId = 1 },
                new Developer(){ Id = 2, Name = "Kovács Géza", IsStudent = true, ProjectId = 1 },
                new Developer(){ Id = 3, Name = "Varga Emese", IsStudent = false, ProjectId = 1 },
                new Developer(){ Id = 4, Name = "Tóth Dániel", IsStudent = false, ProjectId = 1 },
                new Developer(){ Id = 5, Name = "Varga Emese", IsStudent = false, ProjectId = 2 },
                new Developer(){ Id = 6, Name = "Tóth Szabolcs", IsStudent = false, ProjectId = 2 },
                new Developer(){ Id = 7, Name = "Nagy Béla", IsStudent = false, ProjectId = 3 },
                new Developer(){ Id = 8, Name = "Kovács Géza", IsStudent = true, ProjectId = 3 },
                new Developer(){ Id = 9, Name = "Varga Eszter", IsStudent = true, ProjectId = 3 },
                new Developer(){ Id = 10, Name = "Sipos Miklós", IsStudent = true, ProjectId = 3 },
                new Developer(){ Id = 11, Name = "Kovács Géza", IsStudent = true, ProjectId = 4 },
                new Developer(){ Id = 12, Name = "Varga Emese", IsStudent = false, ProjectId = 4 },
                new Developer(){ Id = 13, Name = "Tóth Zsombor", IsStudent = false, ProjectId = 4 },
                new Developer(){ Id = 14, Name = "Nagy Béla", IsStudent = false, ProjectId = 5 },
                new Developer(){ Id = 15, Name = "Kovács Géza", IsStudent = true, ProjectId = 5 },
                new Developer(){ Id = 16, Name = "Varga Emese", IsStudent = false, ProjectId = 5 },
                new Developer(){ Id = 17, Name = "Tóth Dániel", IsStudent = false, ProjectId = 5 },
                new Developer(){ Id = 18, Name = "Nagy Béla", IsStudent = false, ProjectId = 6 },
                new Developer(){ Id = 19, Name = "Tóth Dániel", IsStudent = false, ProjectId = 6 },
                new Developer(){ Id = 20, Name = "Kovács András", IsStudent = false, ProjectId = 8 },
                new Developer(){ Id = 21, Name = "Szénási Sándor", IsStudent = true, ProjectId = 8 },
                new Developer(){ Id = 22, Name = "Varga Emese", IsStudent = false, ProjectId = 8 },
                new Developer(){ Id = 23, Name = "Tóth Dániel", IsStudent = false, ProjectId = 8 }
                        };

            modelBuilder.Entity<Project>().HasData(projs);
            modelBuilder.Entity<Developer>().HasData(devs);

            base.OnModelCreating(modelBuilder);
        }
    }
}
Project.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper
{

    //Id: int (automatikusan növelt)
    //o ProjectName: string
    //o Customer: string
    //o Cost: int
    //o Developers: Developer lista(LazyLoading)

    internal class Project
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }
        [StringLength(100)]
        public string ProjectName { get; set; }
        [StringLength(100)]
        public string Customer { get; set; }
        public int Cost { get; set; }
        [NotMapped]
        public virtual ICollection<Developer> Developers { get; set; }
    }
}
Program.cs
using System;
using System.Linq;

namespace MintaZHDeveloper
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ProjectDbContext db = new ProjectDbContext();

            var students = db.Developers.Where(t => t.IsStudent).Select(t => t.Name).Distinct();

            var workers = from x in db.Developers
                          group x by x.Name into g
                          select new
                          {
                              WorkerName = g.Key,
                              ProjectCount = g.Count()
                          };

            var customer = from x in db.Projects
                           group x by x.Customer into g
                           select new CustomerData()
                           {
                               CustomerName = g.Key,
                               ProjectCount = g.Count(),
                               SumCost = g.Sum(z => z.Cost)
                           };

            XMLExporter exporter = new XMLExporter();
            exporter.Export(customer, "output.xml");
            
        }
    }
}
MintaZHDeveloper.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="5.0.17" />
  </ItemGroup>

  <ItemGroup>
    <None Update="devs_log.ldf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>

</Project>
HungarianTranslationAttribute.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper
{
    internal class HungarianTranslationAttribute : Attribute
    {
        public string Translation { get; }

        public HungarianTranslationAttribute(string translation)
        {
            Translation = translation;
        }
    }
}
Developer.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper
{
//    o Id: int (automatikusan növelt)
//o Name: string
//o IsStudent: bool
//o ProjectId: int (idegen kulcs)
//o Project: Project(LazyLoading)
    internal class Developer
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [StringLength(100)]
        public string Name { get; set; }

        public bool IsStudent { get; set; }

        public int ProjectId { get; set; }

        [NotMapped]
        public virtual Project Project { get; set; }
    }
}
CustomerData.cs
namespace MintaZHDeveloper
{
    public class CustomerData
    {
        public CustomerData()
        {
        }

        [HungarianTranslation("MegrendeloNev")]
        public string CustomerName { get; set; }

        [HungarianTranslation("ProjektekSzama")]
        public int ProjectCount { get; set; }

        [HungarianTranslation("OsszesKoltseg")]
        public int SumCost { get; set; }
    }
}
########################################################################################################################

#####2. MintaZHFood#####
TesterProj
Tester.cs
using MintaZHFood;
using NUnit.Framework;
using System;

namespace TesterProj
{
    [TestFixture]
    public class Tester
    {
        AttributeHelper helper = new AttributeHelper();
        [Test]
        public void TestWithAttr()
        {
            var value = helper.GetPropertyDisplayName<Product>("Amount");
            Assert.That(value == "Mennyiség");
        }

        [Test]
        public void TestWithoutAttr()
        {
            var value = helper.GetPropertyDisplayName<DateTime>("Hour");
            Assert.That(value == "Hour");
        }

        [Test]
        public void TestWithNull()
        {
            Assert.Throws<ArgumentException>(() =>
            {
                helper.GetPropertyDisplayName<Product>(null);
            });
        }
    }
}
TesterProj.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.2" />
    <PackageReference Include="NUnit" Version="3.13.3" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MintaZHFood\MintaZHFood.csproj" />
  </ItemGroup>

</Project>
MintaZHFood
Refrigerator.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace MintaZHFood
{
    internal class Refrigerator
    {
        [DisplayName("Márka")]
        public string Brand { get; set; }

        [DisplayName("Kapacitás")]
        public int Capacity { get; set; }

        [DisplayName("Termékek")]
        public List<Product> Products { get; set; }

        public Refrigerator()
        {
            Products = new List<Product>();
        }

        public static Refrigerator LoadFromXML(string path = "frigo.xml")
        {
            var xdoc = XDocument.Load(path);
            var result = new Refrigerator();
            result.Brand = xdoc.Root.Attribute("brand").Value;
            result.Capacity = int.Parse(xdoc.Root.Attribute("capacity").Value);
            foreach (var item in xdoc.Descendants("product"))
            {
                result.Products.Add(new Product()
                {
                    Name = item.Value,
                    Amount = int.Parse(item.Attribute("amount").Value)
                });
            }
            return result;
        }
    }
}
Receipt.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHFood
{
//    i. Id (int) – elsődleges kulcs, adatbázis által növelt(auto increment) érték legyen;
//    ii.Name(string) – recept megnevezése.Legfeljebb 50 hosszú, kötelező mező;
//    iii.Price(int) – a recept költsége;
//iv.IsSeductive(bool) – „csajozós”-ságát jelöli egy receptnek, ha igaz az értéke
    internal class Receipt
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [StringLength(50)]
        public string Name { get; set; }

        public int Price { get; set; }

        public bool IsSeductive { get; set; }

        [NotMapped]
        public virtual ICollection<Ingredient> Ingredients { get; set; }
    }
}
Program.cs
using System;
using System.Linq;

namespace MintaZHFood
{
    internal class Program
    {
        static void Main(string[] args)
        {
            FoodContext db = new FoodContext();
            Refrigerator refrigerator = Refrigerator.LoadFromXML();

            //Mennyi recept van az adatbázisban?
            var receiptsCount = db.Receipts.Count();

            //Jelenítse meg a konzolon a csajozós recepteket! 
            var seductives = db.Receipts.Where(t => t.IsSeductive);

            //Rendezze be ár szerint csökkenő módon azokat a recepteket, amelyek alapanyagai között található Olaj 
            //megnevezésű alapanyag!
            var receiptsWithOil = db.Receipts
                .Where(t => t.Ingredients.FirstOrDefault(z => z.Name == "Olaj") != null)
                .OrderByDescending(t => t.Price);

            //Amennyiben elkészítenénk az összes receptet, melyik alapanyagból mennyire lenne szükségünk? Az 
            //eredményben az alapanyag nevét és összesített darabszámát jelenítse meg oly módon, hogy az összesített
            //mennyiség szerint növekvő módon jelenjen meg!

            var ingredientStat = from x in db.Ingredients
                                 group x by x.Name into g
                                 orderby g.Sum(z => z.Amount) ascending
                                 select new
                                 {
                                     IngredientName = g.Key,
                                     SumAmount = g.Sum(z => z.Amount)
                                 };


            AttributeHelper helper = new AttributeHelper();
            Console.WriteLine("Refrigerator product list");
            foreach (var item in refrigerator.Products)
            {
                foreach (var prop in typeof(Product).GetProperties())
                {
                    Console.Write(helper.GetPropertyDisplayName<Product>(prop.Name) + ": " +
                        prop.GetValue(item) + " ");
                }
                Console.WriteLine();
            }

            Console.ReadLine();

        }
    }
}
Product.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHFood
{
    public class Product
    {
        [DisplayName("Név")]
        public string Name { get; set; }

        [DisplayName("Mennyiség")]
        public int Amount { get; set; }
    }
}
MintaZHFood.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="FoodReceipts.mdf" />
    <None Remove="FoodReceipts_log.ldf" />
    <None Remove="frigo.xml" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="FoodReceipts.mdf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="FoodReceipts_log.ldf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="frigo.xml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="5.0.17" />
  </ItemGroup>

</Project>
Ingredient.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHFood
{
    //i. Id (int) – elsődleges kulcs, adatbázis által növelt(auto increment) érték legyen;
    //ii.Name(string) – alapanyag megnevezése.Legfeljebb 50 hosszú, kötelező mező;
    //iii.Amount(int) – alapanyag mennyisége;
    //iv.ReceiptId(int) – recept azonosító.

    internal class Ingredient
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [StringLength(50)]
        public string Name { get; set; }

        public int Amount { get; set; }

        public int ReceiptId { get; set; }

        [NotMapped]
        public virtual Receipt Receipt { get; set; }
    }
}
frigo.xml
<?xml version="1.0" encoding="utf-8"?>
<refrigerator brand="lehel" capacity="13">
  <products>
    <product amount="1">Bor</product>
    <product amount="2">Spagetti</product>
    <product amount="3">Sör</product>
    <product amount="1">Borsodi</product>
    <product amount="3">Hagyma</product>
    <product amount="3">Olaj</product>
    <product amount="3">Krumpli</product>
    <product amount="5">Só</product>
    <product amount="5">Bors</product>
    <product amount="2">Zeller</product>
    <product amount="13">Darálthús</product>
    <product amount="13">Paradicsom szósz</product>
  </products>
</refrigerator>
FoodReceipts_log.ldfFoodReceipts.mdfFoodContext.cs
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHFood
{
    internal class FoodContext : DbContext
    {
        public DbSet<Ingredient> Ingredients { get; set; }

        public DbSet<Receipt> Receipts { get; set; }

        public FoodContext()
        {
            Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\FoodReceipts.mdf;Integrated Security=True");
            base.OnConfiguring(optionsBuilder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ingredient>()
               .HasOne(t => t.Receipt)
               .WithMany(t => t.Ingredients)
               .HasForeignKey(t => t.ReceiptId);

            var carb = new Receipt() { Id = 1, Name = "Carbonara", Price = 1400 };
            var bolo = new Receipt() { Id = 2, Name = "Bolognai", Price = 900 };
            var gt = new Receipt() { Id = 3, Name = "Grízes tészta", Price = 400, IsSeductive = true };
            var lasa = new Receipt() { Id = 4, Name = "Lasagne", Price = 1600, IsSeductive = true };
            var pk = new Receipt() { Id = 5, Name = "Paprikás krumpli", Price = 700 };
            var lecso = new Receipt() { Id = 6, Name = "Lecsó", Price = 850 };

            modelBuilder.Entity<Receipt>().HasData(carb, bolo, gt, lasa, pk, lecso);

            var ingredients = new List<Ingredient>()
            {
                // Carb
                new Ingredient() { Id = 1, Name = "Spagetti tészta", Amount = 1, ReceiptId = carb.Id },
                new Ingredient() { Id = 2, Name = "Tojás", Amount = 4, ReceiptId = carb.Id },
                new Ingredient() { Id = 3, Name = "Só", Amount = 1, ReceiptId = carb.Id },
                new Ingredient() { Id = 4, Name = "Bors", Amount = 1, ReceiptId = carb.Id },
                new Ingredient() { Id = 5, Name = "Bacon", Amount = 5, ReceiptId = carb.Id },
                // Bolo
                new Ingredient() { Id = 6, Name = "Spagetti tészta", Amount = 1, ReceiptId = bolo.Id },
                new Ingredient() { Id = 7, Name = "Paradicsom szósz", Amount = 3, ReceiptId = bolo.Id },
                new Ingredient() { Id = 8, Name = "Hagyma", Amount = 1, ReceiptId = bolo.Id },
                new Ingredient() { Id = 9, Name = "Darálthús", Amount = 1, ReceiptId = bolo.Id },
                new Ingredient() { Id = 10, Name = "Oregánó", Amount = 1, ReceiptId = bolo.Id },
                new Ingredient() { Id = 11, Name = "Só", Amount = 1, ReceiptId = bolo.Id },
                new Ingredient() { Id = 12, Name = "Bors", Amount = 1, ReceiptId = bolo.Id },
                new Ingredient() { Id = 13, Name = "Olaj", Amount = 1, ReceiptId = bolo.Id },
                // Gt
                new Ingredient() { Id = 14, Name = "Lapos tészta", Amount = 2, ReceiptId = gt.Id },
                new Ingredient() { Id = 15, Name = "Gríz", Amount = 2, ReceiptId = gt.Id },
                new Ingredient() { Id = 16, Name = "Olaj", Amount = 2, ReceiptId = gt.Id },
                new Ingredient() { Id = 17, Name = "Lekvár", Amount = 1, ReceiptId = gt.Id },
                // Lasa
                new Ingredient() { Id = 18, Name = "Nagy lapos tészta", Amount = 2, ReceiptId = lasa.Id },
                new Ingredient() { Id = 19, Name = "Paradicsom szósz", Amount = 3, ReceiptId = lasa.Id },
                new Ingredient() { Id = 20, Name = "Hagyma", Amount = 1, ReceiptId = lasa.Id },
                new Ingredient() { Id = 21, Name = "Darálthús", Amount = 1, ReceiptId = lasa.Id },
                new Ingredient() { Id = 22, Name = "Oregánó", Amount = 1, ReceiptId = lasa.Id },
                new Ingredient() { Id = 23, Name = "Só", Amount = 1, ReceiptId = lasa.Id },
                new Ingredient() { Id = 24, Name = "Bors", Amount = 1, ReceiptId = lasa.Id },
                new Ingredient() { Id = 25, Name = "Olaj", Amount = 1, ReceiptId = lasa.Id },
                new Ingredient() { Id = 26, Name = "Besamel", Amount = 1, ReceiptId = lasa.Id },
                new Ingredient() { Id = 27, Name = "Sajt", Amount = 1, ReceiptId = lasa.Id },
                // PK
                new Ingredient() { Id = 28, Name = "Krumpli", Amount = 10, ReceiptId = pk.Id },
                new Ingredient() { Id = 29, Name = "Hagyma", Amount = 1, ReceiptId = pk.Id },
                new Ingredient() { Id = 30, Name = "Kolbász", Amount = 2, ReceiptId = pk.Id },
                new Ingredient() { Id = 31, Name = "Fűszer paprika", Amount = 1, ReceiptId = pk.Id },
                new Ingredient() { Id = 32, Name = "Só", Amount = 1, ReceiptId = pk.Id },
                new Ingredient() { Id = 33, Name = "Bors", Amount = 1, ReceiptId = pk.Id },
                new Ingredient() { Id = 34, Name = "Majoranna", Amount = 1, ReceiptId = pk.Id },
                // Lecso
                new Ingredient() { Id = 35, Name = "Paprika", Amount = 6, ReceiptId = lecso.Id },
                new Ingredient() { Id = 36, Name = "Paradicsom", Amount = 4, ReceiptId = lecso.Id },
                new Ingredient() { Id = 37, Name = "Hagyma", Amount = 1, ReceiptId = lecso.Id },
                new Ingredient() { Id = 38, Name = "Só", Amount = 1, ReceiptId = lecso.Id },
                new Ingredient() { Id = 39, Name = "Bors", Amount = 1, ReceiptId = lecso.Id },
            };

            modelBuilder.Entity<Ingredient>().HasData(ingredients);

            base.OnModelCreating(modelBuilder);
        }
    }
}
DisplayNameAttribute.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHFood
{
    [AttributeUsage(AttributeTargets.Property)]
    internal class DisplayNameAttribute : Attribute
    {
        public string Value { get; set; }

        public DisplayNameAttribute(string value)
        {
            Value = value;
        }
    }
}
AttributeHelper.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHFood
{
    public class AttributeHelper
    {
        public string GetPropertyDisplayName<T>(string propertyName)
        {
            if (propertyName == null)
            {
                throw new ArgumentException("PropertyName cannot be null");
            }
            var attr = typeof(T)
                .GetProperty(propertyName)
                .GetCustomAttribute<DisplayNameAttribute>();
            if (attr != null)
            {
                return attr.Value;
            }
            else
            {
                return propertyName;
            }
        }
    }
}
########################################################################################################################

#####3. MintaZHPizza#####
TesterProj
Tester.cs
using MintaZHPizza;
using NUnit.Framework;
using System;
using System.Xml.Linq;

namespace TesterProj
{
    [TestFixture]
    public class Tester
    {
        //ConvertNodeToEntity
        XMLImporter importer = new XMLImporter();

        [Test]
        public void Test()
        {
            XElement xe = new XElement("Pizza");
            xe.Add(new XElement("Type", "hawaii"));
            xe.Add(new XElement("Size", "32"));
            xe.Add(new XElement("PastaThickness", "6"));
            xe.Add(new XElement("Price", "2400"));
            xe.Add(new XElement("NumberOfToppings", "3"));
            xe.Add(new XElement("FantasyName", "Hawaii Five O"));

            var obj = importer.ConvertNodeToEntity<Pizza>(xe);

            Assert.That(obj.Type == "hawaii");
            Assert.That(obj.Size == 32);
        }
    }
}
TesterProj.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.2" />
    <PackageReference Include="NUnit" Version="3.13.3" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MintaZHPizza\MintaZHPizza.csproj" />
  </ItemGroup>

</Project>
MintaZHPizza
XMLImporter.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace MintaZHPizza
{
    public class XMLImporter
    {
        public IEnumerable<XElement> SelectSubElements<T>(string path)
        {
            var xdoc = XDocument.Load(path);
            string tname = typeof(T).Name;
            return xdoc.Descendants(tname);
        }

        public T ConvertNodeToEntity<T>(XElement element)
        {
            var obj = Activator.CreateInstance(typeof(T));
            foreach (var prop in typeof(T).GetProperties())
            {
                if (prop.PropertyType == typeof(int))
                {
                    prop.SetValue(obj, int.Parse(element.Element(prop.Name).Value));
                }
                else if (prop.PropertyType == typeof(string))
                {
                    prop.SetValue(obj, element.Element(prop.Name).Value);
                }
            }
            return (T)obj;
        }
    }
}
Program.cs
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace MintaZHPizza
{
    internal class Program
    {
        static void Main(string[] args)
        {
            XMLImporter importer = new XMLImporter();
            var pizzaXml = importer.SelectSubElements<Pizza>("pizza.xml");
            IEnumerable<Pizza> pizzas = pizzaXml
                .Select(t => importer.ConvertNodeToEntity<Pizza>(t));

            //large pizzák
            var large = pizzas
                .Where(t => t.Type == "large")
                .Select(t => t.FantasyName + " (" + t.Price + " Ft)");

            var stat = from x in pizzas
                       group x by x.Type into g
                       select new PizzaSize()
                       {
                           Type = g.Key,
                           Count = g.Count(),
                           AvgPrice = g.Average(z => z.Price)
                       };
            PizzaDbContext ctx = new PizzaDbContext();
            ctx.PizzaSizes.AddRange(stat);
            ctx.SaveChanges();

            var fb = ctx.PizzaSizes.ToArray();
        }
    }
}
PizzaSize.cs
using System.ComponentModel.DataAnnotations;

namespace MintaZHPizza
{
    internal class PizzaSize
    {
        public PizzaSize()
        {
        }

        [Key]
        public string Type { get; set; }
        public int Count { get; set; }
        public double AvgPrice { get; set; }
    }
}
PizzaDbContext.cs
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHPizza
{
    internal class PizzaDbContext : DbContext
    {
        public DbSet<PizzaSize> PizzaSizes { get; set; }

        public PizzaDbContext()
        {
            Database.EnsureCreated();
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\pizza.mdf;Integrated Security=True");
            base.OnConfiguring(optionsBuilder);
        }
    }
}
pizza_log.ldfpizza.xml
<?xml version="1.0" encoding="utf-8"?>
<PizzaDatabase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Pizza>
    <Type base="sour cream">medium</Type>
    <Size unit="inch">30</Size>
    <PastaThickness>5</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>3700</Price>
    <FantasyName>Bulgogi and Kimchi Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">large</Type>
    <Size unit="cm">45</Size>
    <PastaThickness>7</PastaThickness>
    <NumberOfToppings>2</NumberOfToppings>
    <Price>1200</Price>
    <FantasyName>Kimchi and Bulgogi Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>9</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>3600</Price>
    <FantasyName>Capsicum and Mushroom Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">large</Type>
    <Size unit="inch">45</Size>
    <PastaThickness>10</PastaThickness>
    <NumberOfToppings>2</NumberOfToppings>
    <Price>4200</Price>
    <FantasyName>Chicken and Strawberry Balsamic Pizza</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="sour cream">small</Type>
    <Size unit="inch">20</Size>
    <PastaThickness>11</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>2700</Price>
    <FantasyName>Chimichurri Chorizo Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">small</Type>
    <Size unit="cm">20</Size>
    <PastaThickness>10</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>4800</Price>
    <FantasyName>Pizza con Chorizo y Salsa Chimichurri</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="sour cream">small</Type>
    <Size unit="cm">20</Size>
    <PastaThickness>9</PastaThickness>
    <NumberOfToppings>2</NumberOfToppings>
    <Price>2300</Price>
    <FantasyName>Chimichurri Chorizo Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="sour cream">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>8</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>2700</Price>
    <FantasyName>Fire Breather Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="sour cream">medium</Type>
    <Size unit="inch">30</Size>
    <PastaThickness>6</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>2300</Price>
    <FantasyName>Egg and Bacon Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="sour cream">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>6</PastaThickness>
    <NumberOfToppings>2</NumberOfToppings>
    <Price>2900</Price>
    <FantasyName>The Aussie Egg And Bacon Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">small</Type>
    <Size unit="cm">20</Size>
    <PastaThickness>9</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>3400</Price>
    <FantasyName>Fish Pizza with Olives, Capsicum, and Parmesan</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">small</Type>
    <Size unit="cm">20</Size>
    <PastaThickness>7</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>3500</Price>
    <FantasyName>Green Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">small</Type>
    <Size unit="cm">20</Size>
    <PastaThickness>12</PastaThickness>
    <NumberOfToppings>2</NumberOfToppings>
    <Price>4700</Price>
    <FantasyName>Ham and Asparagus Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="sour cream">small</Type>
    <Size unit="inch">20</Size>
    <PastaThickness>8</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>2000</Price>
    <FantasyName>Lamb Pizza with Salsa and Tzatziki Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>7</PastaThickness>
    <NumberOfToppings>4</NumberOfToppings>
    <Price>2000</Price>
    <FantasyName>Meat Lovers Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">small</Type>
    <Size unit="inch">20</Size>
    <PastaThickness>13</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>4200</Price>
    <FantasyName>Pepperoni and Mushroom Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">small</Type>
    <Size unit="inch">20</Size>
    <PastaThickness>9</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>3500</Price>
    <FantasyName>Pizza with Ramen Noodle Base</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="sour cream">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>11</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>1700</Price>
    <FantasyName>Pepperoni and Sausage Pizza</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="tomato">large</Type>
    <Size unit="cm">45</Size>
    <PastaThickness>13</PastaThickness>
    <NumberOfToppings>4</NumberOfToppings>
    <Price>2500</Price>
    <FantasyName>Peri Peri Chicken Pizza</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="sour cream">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>5</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>1400</Price>
    <FantasyName>Pizza Bianca with Potatoes – Potato Pizza</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="sour cream">large</Type>
    <Size unit="inch">45</Size>
    <PastaThickness>7</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>4400</Price>
    <FantasyName>Pizza Hut’s Original Pan Pizzaa</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="tomato">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>11</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>2800</Price>
    <FantasyName>Poached Egg and Rocket Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">large</Type>
    <Size unit="cm">45</Size>
    <PastaThickness>13</PastaThickness>
    <NumberOfToppings>4</NumberOfToppings>
    <Price>3500</Price>
    <FantasyName>Poached Egg and Rocket Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="tomato">medium</Type>
    <Size unit="cm">30</Size>
    <PastaThickness>13</PastaThickness>
    <NumberOfToppings>4</NumberOfToppings>
    <Price>2500</Price>
    <FantasyName>Potato and Taleggio Cheese Pizza</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="tomato">medium</Type>
    <Size unit="inch">30</Size>
    <PastaThickness>13</PastaThickness>
    <NumberOfToppings>5</NumberOfToppings>
    <Price>2900</Price>
    <FantasyName>Pumpkin and Ricotta Pizza</FantasyName>
  </Pizza>
  <Pizza>
    <Type base="mustard">medium</Type>
    <Size unit="inch">30</Size>
    <PastaThickness>10</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>4400</Price>
    <FantasyName>Seafood Marinara Pizza</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="sour cream">small</Type>
    <Size unit="cm">20</Size>
    <PastaThickness>5</PastaThickness>
    <NumberOfToppings>3</NumberOfToppings>
    <Price>4900</Price>
    <FantasyName>Steak Fajita Pizza</FantasyName>
  </Pizza>
  <Pizza status="VIP">
    <Type base="tomato">small</Type>
    <Size unit="inch">20</Size>
    <PastaThickness>10</PastaThickness>
    <NumberOfToppings>2</NumberOfToppings>
    <Price>1900</Price>
    <FantasyName>Tandoori Chicken Pizza</FantasyName>
  </Pizza>
</PizzaDatabase>
pizza.mdfPizza.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHPizza
{
//    o Type: string
//o Size: int
//o PastaThickness: int
//o NumberOfToppings: int
//o Price: int
//o FantasyName: string
    public class Pizza
    {
        public string Type { get; set; }
        public int Size { get; set; }
        public int PastaThickness { get; set; }
        public int NumberOfToppings { get; set; }
        public string FantasyName { get; set; }
        public int Price { get; set; }
    }
}
MintaZHPizza.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="pizza.mdf" />
    <None Remove="pizza.xml" />
    <None Remove="pizza_log.ldf" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="pizza.mdf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="pizza.xml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="pizza_log.ldf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="5.0.17" />
  </ItemGroup>

</Project>
########################################################################################################################

#####4. MintaZHDeveloper2#####
TesterProj
Tester.cs
using MintaZHDeveloper2;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace TesterProj
{
    [TestFixture]
    public class Tester
    {
        ProjectFilter filter = new ProjectFilter();

        [Test]
        public void Test()
        {
            var fake = new List<Project>();
            fake.Add(new Project() { Cost = 300, ProjectName = "A" });
            fake.Add(new Project() { Cost = 600, ProjectName = "B" });
            fake.Add(new Project() { Cost = 1000, ProjectName = "C" });

            var filtered = filter.Filter(fake);

            Assert.That(filtered.Count() == 2);
            Assert.That(filtered.FirstOrDefault(t => t.ProjectName == "B") != null);
            Assert.That(filtered.FirstOrDefault(t => t.ProjectName == "C") != null);

        }
    }
}
TesterProj.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.2" />
    <PackageReference Include="NUnit" Version="3.13.3" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MintaZHDeveloper2\MintaZHDeveloper2.csproj" />
  </ItemGroup>

</Project>
MintaZHDeveloper2
ProjectFilter.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper2
{
    public class ProjectFilter
    {
        public IEnumerable<Project> Filter(IEnumerable<Project> projects)
        {
            return projects
                .Where(t => t.Cost > typeof(Project).GetProperty("Cost")
                .GetCustomAttribute<MinimumValueAttribute>().Value);
        }
    }
}
ProjectDbContext.cs
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper2
{
    internal class ProjectDbContext : DbContext
    {
        public DbSet<CustomerData> CustomerDatas { get; set; }

        public ProjectDbContext()
        {
            Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\proj.mdf;Integrated Security=True");
            base.OnConfiguring(optionsBuilder);
        }
    }
}
project.xml
<?xml version="1.0" encoding="UTF-8" ?>
<projects>
	<project>
		<projectname>Felhő alapú fizetési megoldás</projectname>
		<customer>MOL Zrt.</customer>
		<cost>2000</cost>
		<developers>
			<developer>Nagy Béla</developer>
			<developer student="true">Kovács Géza</developer>
			<developer>Varga Emese</developer>
			<developer>Tóth Dániel</developer>
		</developers>
	</project>
	<project>
		<projectname>Portfolio weboldal</projectname>
		<customer>Tóth Csaba e.v.</customer>
		<cost>300</cost>
		<developers>
			<developer>Varga Emese</developer>
			<developer>Tóth Szabolcs</developer>
		</developers>
	</project>
	<project>
		<projectname>5G hálózathoz monitoring rendszer</projectname>
		<customer>Magyar Telekom</customer>
		<cost>5000</cost>
		<developers>
			<developer>Nagy Béla</developer>
			<developer student="true">Kovács Géza</developer>
			<developer student="true">Varga Eszter</developer>
			<developer student="true">Sipos Miklós</developer>
		</developers>
	</project>
	<project>
		<projectname>Üzleti intelligencia projekt</projectname>
		<customer>MOL Zrt.</customer>
		<cost>1500</cost>
		<developers>
			<developer student="true">Kovács Géza</developer>
			<developer>Varga Emese</developer>
			<developer>Tóth Zsombor</developer>
		</developers>
	</project>
	<project>
		<projectname>Biometrikus beléptetőkapu</projectname>
		<customer>Magyar Telekom</customer>
		<cost>1000</cost>
		<developers>
			<developer>Nagy Béla</developer>
			<developer student="true">Kovács Géza</developer>
			<developer>Varga Emese</developer>
			<developer>Tóth Dániel</developer>
		</developers>
	</project>
	<project>
		<projectname>Mobil alkalmazás</projectname>
		<customer>Rizmajer Sörfőzde</customer>
		<cost>1000</cost>
		<developers>
			<developer>Nagy Béla</developer>
			<developer>Tóth Dániel</developer>
		</developers>
	</project>
	<project>
		<projectname>Elnökséget imitáló chatbot</projectname>
		<customer>NIK HÖK</customer>
		<cost>1500</cost>
		<developers>
		</developers>
	</project>
	<project>
		<projectname>Okos benzinkút</projectname>
		<customer>MOL Zrt.</customer>
		<cost>90000</cost>
		<developers>
			<developer>Kovács András</developer>
			<developer student="true">Szénási Sándor</developer>
			<developer>Varga Emese</developer>
			<developer>Tóth Dániel</developer>
		</developers>
	</project>
</projects>
Project.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace MintaZHDeveloper2
{
//    o ProjectName: string
//o Customer: string
//o Cost: int
//o Developers: Developer lista

    public class Project
    {
        public string ProjectName { get; set; }

        public string Customer { get; set; }

        [MinimumValue(500)]
        public int Cost { get; set; }

        public List<Developer> Developers { get; set; }

        public Project()
        {
            Developers = new List<Developer>();
        }

        public static List<Project> Import(string path)
        {
            List<Project> projects = new List<Project>();
            var xdoc = XDocument.Load(path);
            foreach (var project in xdoc.Descendants("project"))
            {
                var proj = new Project();
                proj.ProjectName = project.Element("projectname").Value;
                proj.Customer = project.Element("customer").Value;
                proj.Cost = int.Parse(project.Element("cost").Value);

                foreach (var developer in project.Descendants("developer"))
                {
                    var dev = new Developer();
                    dev.Name = developer.Value;
                    if (developer.Attribute("student") != null)
                    {
                        dev.IsStudent = true;
                    }
                    else
                    {
                        dev.IsStudent = false;
                    }
                    proj.Developers.Add(dev);
                }

                projects.Add(proj);
            }
            return projects;
        }
    }
}
proj_log.ldf - nem tudom megnyitniproj.mdf - nem tudom megnyitniProgram.cs
using System;
using System.Linq;

namespace MintaZHDeveloper2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var projectsFromXml = Project.Import("project.xml");
            var filteredProjects = new ProjectFilter().Filter(projectsFromXml);

            //Jelenítse meg a cég összes bevételét, amennyibe minden projekt sikeresen elkészülne!
            var allcost = filteredProjects.Sum(t => t.Cost);

            //Átlagosan hány fejlesztő dolgozik egy projekten?
            var avgdev = filteredProjects.Average(t => t.Developers.Count());

            //Jelenítse meg a diákok nevét ismétlődés nélkül!
            var students = filteredProjects
                .SelectMany(t => t.Developers)
                .Where(t => t.IsStudent)
                .Select(t => t.Name)
                .Distinct();

            //Jelenítse meg az összes dolgozó nevét és azt, hogy hány projektben vannak benne! A projektek 
            //száma szerint csökkenő sorrendbe legyenek rendezve!
            var workers = from x in filteredProjects.SelectMany(t => t.Developers)
                          group x by x.Name into g
                          orderby g.Count() descending
                          select new
                          {
                              WorkerName = g.Key,
                              ProjectCount = g.Count()
                          };

            //Hány eltérő megrendelőnk van? Ezek összesen hány projektet hoztak a cégünkhöz? Ezek a 
            //projektek összesen mennyit fizetnek?
            var customers = from x in filteredProjects
                            group x by x.Customer into g
                            select new CustomerData()
                            {
                                CustomerName = g.Key,
                                ProjectCount = g.Count(),
                                SumCost = g.Sum(t => t.Cost)
                            };
            
            ProjectDbContext db = new ProjectDbContext();
            db.CustomerDatas.AddRange(customers);
            db.SaveChanges();

            var fb = db.CustomerDatas.ToArray();
            ;

        }
    }
}
MintaZHDeveloper2.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="proj.mdf" />
    <None Remove="project.xml" />
    <None Remove="proj_log.ldf" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="proj.mdf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="project.xml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="proj_log.ldf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.17" />
	  <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="5.0.17" />
  </ItemGroup>

</Project>
MinimumValueAttribute.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper2
{
    internal class MinimumValueAttribute : Attribute
    {
        public int Value { get; set; }

        public MinimumValueAttribute(int value)
        {
            Value = value;
        }
    }
}
Developer.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MintaZHDeveloper2
{
    
//o Name: string
//o IsStudent: bool

    public class Developer
    {
        public string Name { get; set; }

        public bool IsStudent { get; set; }
    }
}
CustomerData.cs
using System.ComponentModel.DataAnnotations;

namespace MintaZHDeveloper2
{
    internal class CustomerData
    {
        public CustomerData()
        {
        }

        [Key]
        public string CustomerName { get; set; }
        public int ProjectCount { get; set; }
        public int SumCost { get; set; }
    }
}
########################################################################################################################

#####Modul01 - Delegáltak, névtelen függvények és lambdák#####
###LinkedList###

##MyLinkedList.cs##
using System;

namespace HFT01LinkedList
{
    internal class MyLinkedList<T>
    {

        internal class LinkedListItemEventArgs : EventArgs
        {
            public LinkedListItemEventArgs(T oldItem, T newItem)
            {
                OldItem = oldItem;
                NewItem = newItem;
            }

            public T OldItem { get; }
            public T NewItem { get; }
            
        }

        public delegate T LinkedListItemTransformHandler(T input);
        public delegate void LinkedListTraverseHandler(T item);

        public event EventHandler<LinkedListItemEventArgs> LinkedListItemChanged;
        public LinkedListTraverseHandler traverseHandler;

        private MyLinkedListItem head;
        internal class MyLinkedListItem
        {
            public T Content { get; set; }
            public MyLinkedListItem Next { get; set; }
        }

        public void Add(T item)
        {
            MyLinkedListItem newItem = new MyLinkedListItem()
            {
                Content = item,
                Next = head
            };
            head = newItem;
        }

        public void Transform(LinkedListItemTransformHandler method)
        {
            MyLinkedListItem current = head;
            while (current != null)
            {
                if (method != null)
                {
                    T oldItem = current.Content;
                    current.Content = method(current.Content);
                    T newItem = current.Content;
                    LinkedListItemChanged?.Invoke(this, new LinkedListItemEventArgs(oldItem, newItem));
                }
                current = current.Next;
            }
        }

        public void Traverse()
        {
            MyLinkedListItem current = head;
            while (current != null)
            {
                traverseHandler?.Invoke(current.Content);
                current = current.Next;
            }
        }
    }
}

##Program.cs##
using System;

namespace HFT01LinkedList
{
    internal class Program
    {
        static void Traverser(string item)
        {
            Console.WriteLine(item);
        }

        static void Traverser2(string item)
        {
            Console.WriteLine("--" + item + "--");
        }

        static string Transformer(string input)
        {
            return input.ToUpper();
        }

        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            MyLinkedList<string> myList = new MyLinkedList<string>();

            myList.LinkedListItemChanged += MyList_LinkedListItemChanged;

            myList.Add("John");
            myList.Add("Jack");
            myList.Add("Steve");
            myList.Add("Paul");
            myList.Transform(Transformer);

            myList.traverseHandler += Traverser;
            myList.traverseHandler += Traverser2;

            myList.Traverse();
            Console.ReadLine();
        }

        private static void MyList_LinkedListItemChanged(object sender, MyLinkedList<string>.LinkedListItemEventArgs e)
        {
            Console.WriteLine("Old item: " + e.OldItem);
            Console.WriteLine("New item: " + e.NewItem);
        }
    }
}
########################################################################################################################

###PersonManager###

##Person.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT01PersonManager
{
    internal class Person
    {
        public Person(string name, int age, string job)
        {
            Name = name;
            Age = age;
            Job = job;
        }

        public string Name { get; set; }

        public int Age { get; set; }

        public string Job { get; set; }
    }
}

##Program.cs##
using System;
using System.Collections.Generic;

namespace HFT01PersonManager
{
    internal class Program
    {

        static int PersonComparer(Person a, Person b)
        {
            return a.Age.CompareTo(b.Age);
        }

        static void Main(string[] args)
        {
            List<Person> people = new List<Person>
            {
                new Person("Béla", 55, "menedzser"),
                new Person("Ágnes", 40, "biztonsági szakértő"),
                new Person("Kristóf", 23, "IT gyakornok"),
                new Person("József", 33, "tesztelő"),
                new Person("Sándor", 24, "grafikus"),
                new Person("Krisztina", 40, "architect"),
            };

            //Minden személy kigyűjtése, akiknek az életkora kisebb, mint 25
            List<Person> youngerThan25 = people.FindAll(t => t.Age < 25);

            //Az első olyan személy megkeresése, akinek a munkaköre menedzser
            Person manager = people.Find(t => t.Job == "menedzser");

            //Válasz arra a kérdésre, hogy van - e a cégnél 60 év feletti fejlesztő
            bool developerOlderThan60 = people.Exists(t => t.Age > 60 && t.Job == "fejlesztő");

            //Rendezés
            Person[] peopleArray = people.ToArray();
            Array.Sort(peopleArray, (a, b) => a.Age.CompareTo(b.Age));
            


            

        }
    }
}
########################################################################################################################

###Sort###

##ArrayManager.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT01Sort
{
    internal static class ArrayManager
    {
        //IComparable
        public static void Sort<T>(T[] array)
        {
            for (int i = 0; i < array.Length - 1; i++)
            {
                for (int j = i + 1; j < array.Length; j++)
                {
                    //if array[i] > array[j] akkor csere
                    if ((array[i] as IComparable).CompareTo(array[j] as IComparable) > 0)
                    {
                        T temp = array[i];
                        array[i] = array[j];
                        array[j] = temp;
                    }
                }
            }
        }

        //Comparison<T>
        public static void Sort<T>(T[] array, Comparison<T> comparer)
        {
            for (int i = 0; i < array.Length - 1; i++)
            {
                for (int j = i + 1; j < array.Length; j++)
                {
                    if (comparer?.Invoke(array[i], array[j]) > 0)
                    {
                        T temp = array[i];
                        array[i] = array[j];
                        array[j] = temp;
                    }
                }
            }
        }
    }
}

##Dog.cs##
using System;

namespace HFT01Sort
{
    internal class Dog
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public Dog()
        {
            
        }

        public Dog(string name, int age)
        {
            Name = name;
            Age = age;
        }
    }
}

##Program.cs##
using System;
using System.Collections.Generic;
using System.Linq;

namespace HFT01Sort
{
    internal class Program
    {
        static int DogComparer(Dog a, Dog b)
        {
            return a.Age.CompareTo(b.Age);
        }

        static bool YoungerThan7(Dog d)
        {
            return d.Age < 7;
        }

        static void Main(string[] args)
        {
            int[] numbers = { 65, 12, 43, 76, 98, 32, 6, 2, 99 };
            ArrayManager.Sort(numbers);
            ;
            Dog[] dogs =
            {
                new Dog("Buksi", 6),
                new Dog("Bundás", 8),
                new Dog("Morzsi", 2),
                new Dog("Csöpi", 10),
            };

            

            ArrayManager.Sort(dogs, DogComparer);
            ;


            List<Dog> dogList = dogs.ToList();
            //7 évnél fiatalabb kutyák

            List<Dog> filtered = dogList.FindAll(YoungerThan7);
            List<Dog> filtered2 = dogList.FindAll(delegate (Dog d)
            {
                return d.Age < 7;
            });

            List<Dog> filtered3 = dogList.FindAll(d => d.Age < 7);
            ;

            

        }
    }
}
########################################################################################################################

#####Modul02 - 	XML, JSON és LINQ#####
###HFT02CustomLinq###

##Dog.cs##
using System;

namespace HFT02CustomLinq
{
    public class Dog : IComparable
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public Dog()
        {

        }

        public Dog(string name, int age)
        {
            Name = name;
            Age = age;
        }

        public int CompareTo(object obj)
        {
            return this.Age.CompareTo((obj as Dog).Age);
        }
    }
}

##CollectionExtender.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OEnik.CollectionFunctions
{

    // Középső elemet!
    // Legnagyobb elemet!
    // Adott kritériumoknak megfelelő elemeket!
    public static class CollectionExtender
    {
        public static T MiddleItem<T>(this IEnumerable<T> source)
        {
            var sourceAsArray = source.ToArray();
            return sourceAsArray[sourceAsArray.Length / 2];
        }

        public static T MaxItem<T>(this IEnumerable<T> source)
        {
            var sourceAsArray = source.ToArray();
            Array.Sort(sourceAsArray);
            return sourceAsArray[sourceAsArray.Length - 1];
        }

        public static T Single<T>(this IEnumerable<T> source, Predicate<T> function)
        {
            var enumerator = source.GetEnumerator();
            enumerator.MoveNext();
            do
            {
                if (function(enumerator.Current))
                {
                    return enumerator.Current;
                }
            } while (enumerator.MoveNext());
            throw new ArgumentException("Item not found...");
        }
    }
}

##Program.cs##
using System;
using System.Collections.Generic;
using OEnik.CollectionFunctions;


namespace HFT02CustomLinq
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<int> numbers = new List<int>{ 65, 12, 43, 76, 98, 32, 6, 2, 99 };
            Dog[] dogs =
            {
                new Dog("Buksi", 6),
                new Dog("Bundás", 8),
                new Dog("Morzsi", 2),
                new Dog("Csöpi", 10),
            };

            Console.WriteLine(numbers.MiddleItem());
            Console.WriteLine(dogs.MiddleItem().Name);

            Console.WriteLine(numbers.MaxItem());
            Console.WriteLine(dogs.MaxItem().Name);

            Console.WriteLine(numbers.Single(t => t > 42 && t < 44));
            Console.WriteLine(dogs.Single(t => t.Age > 7).Name);
            
            
        }
    }
}

##HFT02CustomLinq.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>
########################################################################################################################

###HFT02Movies###

##Movie.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT02Movies
{
    public class Movie
    {
        public string Title { get; set; }

        public int Duration { get; set; }

        public int Year { get; set; }
    }
}

##Program.cs##
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace HFT02Movies
{
    internal class Program
    {
        static List<Movie> movies;
        static void Main(string[] args)
        {
            movies = new List<Movie>();
            //LoadMoviesAuto("out2.xml");
            LoadMoviesAutoJson("out.json");
            foreach (Movie movie in movies)
            {
                Console.WriteLine($"{movie.Title} - {movie.Year} - {movie.Duration}");
            }

            string choice = "";
            do
            {
                movies.Add(CreateMovie());
                Console.WriteLine("Another movie? y/n");
                choice = Console.ReadLine();
            } while (choice == "y");
            //SerializeTxt(movies, "out.txt");
            //SerializeXmlAuto(movies, "out2.xml");
            SerializeJsonAuto(movies, "out.json");
        }

        static void LoadMovies(string filename)
        {
            XDocument xdoc = XDocument.Load(filename);
            foreach (XElement item in xdoc.Element("movies").Elements("movie"))
            {
                movies.Add(new Movie()
                {
                    Title = item.Element("title").Value,
                    Duration = int.Parse(item.Element("duration").Value),
                    Year = int.Parse(item.Element("year").Value),
                });
            }
        }

        static void LoadMoviesAuto(string filename)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(List<Movie>));
            StreamReader sr = new StreamReader(filename);
            movies = (List<Movie>)serializer.Deserialize(sr);
            sr.Close();
        }

        static void LoadMoviesAutoJson(string filename)
        {
            string jsonContent = File.ReadAllText(filename);
            movies = JsonConvert.DeserializeObject<List<Movie>>(jsonContent);
        }

        static void SerializeTxt(List<Movie> movies, string filename)
        {
            foreach (Movie movie in movies)
            {
                File.AppendAllText(filename, $"{movie.Title}*{movie.Year}*{movie.Duration}\r\n");
            }
        }

        static void SerializeXml(List<Movie> movies, string filename)
        {
            XDocument xdoc = new XDocument();
            XElement root = new XElement("movies");
            xdoc.Add(root);
            foreach (Movie movie in movies)
            {
                XElement xmovie = new XElement("movie");
                xmovie.Add(new XElement("title", movie.Title));
                xmovie.Add(new XElement("year", movie.Year));
                xmovie.Add(new XElement("duration", movie.Duration));
                root.Add(xmovie);
            }
            xdoc.Save(filename);
        }

        static void SerializeXmlAuto(List<Movie> movies, string filename)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(List<Movie>));
            FileStream fs = File.Create(filename);
            serializer.Serialize(fs, movies);
            fs.Close();
        }

        static void SerializeJsonAuto(List<Movie> movies, string filename)
        {
            string jsonContent = JsonConvert.SerializeObject(movies, Formatting.Indented);
            File.WriteAllText(filename, jsonContent);
        }

        static Movie CreateMovie()
        {
            Movie m = new Movie();
            Console.Write("Enter title: ");
            m.Title = Console.ReadLine();
            Console.Write("Enter duration: ");
            m.Duration = int.Parse(Console.ReadLine());
            Console.Write("Enter year: ");
            m.Year = int.Parse(Console.ReadLine());
            return m;
        }
    }
}

##HFT02Movies.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>

</Project>
########################################################################################################################

###HFT02MoviesFromWeb###

##Movie.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT02MoviesFromWeb
{

    public class Movie
    {
        public string Title { get; set; }
        public string Genre { get; set; }
        public int Year { get; set; }
        public string Director { get; set; }
    }

}

##Program.cs##
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Xml.Linq;

namespace HFT02MoviesFromWeb
{
    internal class Program
    {
        static void Main(string[] args)
        {
            WebClient wc = new WebClient();
            string jsonContent = wc.DownloadString("https://nikprog.hu/samples/movie.json");

            //string jsonContent = File.ReadAllText("movie.json");

            var movies = JsonConvert.DeserializeObject<List<Movie>>(jsonContent);

            //Leszűri a 2006-os filmeket (Where metódussal)

            var moviesFrom2006 = movies.Where(t => t.Year == 2006);

            //Minden film címét és rendezőjének nevét XElement - re alakítja!(Select metódussal)

            var xmlNodes = moviesFrom2006.Select(t =>
            {
                var root = new XElement("movie");
                root.Add(new XElement("title", t.Title));
                root.Add(new XElement("director", t.Director));
                return root;
            });


            //Kimenti XML-be a címüket és a rendező nevét XDocument módszerrel!
            XDocument xdoc = new XDocument();
            xdoc.Add(new XElement("movies"));

            xdoc.Root.Add(xmlNodes);

            xdoc.Save("movies2006.xml");
            ;
        }
    }
}

##HFT02MoviesFromWeb.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>

</Project>
########################################################################################################################

###HFT02MoviesFromWebGroup###

##Movie.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT02MoviesFromWebGroup
{

    public class Movie
    {
        public string Title { get; set; }
        public string Genre { get; set; }
        public int Year { get; set; }
        public string Director { get; set; }
    }

}

##Program.cs##
using ConsoleTools;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;

namespace HFT02MoviesFromWebGroup
{
    internal class Program
    {
        static void Main(string[] args)
        {
            WebClient wc = new WebClient();
            string jsonContent = wc.DownloadString("https://nikprog.hu/samples/movie.json");
            var movies = JsonConvert.DeserializeObject<IEnumerable<Movie>>(jsonContent);

            var groups = movies
                .GroupBy(t => t.Genre)
                .OrderByDescending(t => t.Count())
                .Take(10);

            var menu = new ConsoleMenu();

            foreach (var item in groups)
            {
                menu.Add(item.Key, () => GenreSelect(item.Key, menu, item));
            }

            menu.Show();
        }

        static void GenreSelect(string genre, ConsoleMenu menu, IEnumerable<Movie> moviesInGenre)
        {
            menu.CloseMenu();
            Console.Clear();
            Console.WriteLine(genre);
            Console.WriteLine("Movies count: " + moviesInGenre.Count());
            Console.WriteLine();
            foreach (var movie in moviesInGenre.Take(10))
            {
                Console.WriteLine(movie.Director + ": " + movie.Title);
            }
        }
    }
}

##HFT02MoviesFromWebGroup.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ConsoleMenu-simple" Version="2.4.2" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>

</Project>
########################################################################################################################

###HFT02DevTasks###

##Models.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT02DevTasks
{

    public class DevTask
    {
        public string PersonName { get; set; }
        public string TaskName { get; set; }
        public int EstimatedDuration { get; set; }
        public int Cost { get; set; }
    }

    public partial class Person
    {

        private string nameField;

        private byte ageField;

        private string levelField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public byte Age
        {
            get
            {
                return this.ageField;
            }
            set
            {
                this.ageField = value;
            }
        }

        /// <remarks/>
        public string Level
        {
            get
            {
                return this.levelField;
            }
            set
            {
                this.levelField = value;
            }
        }
    }



}

##Program.cs##
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Xml.Serialization;
using System.Linq;

namespace HFT02DevTasks
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*
             *  Fűzzünk össze két adatforrást!
                https://nikprog.hu/samples/devtask.json
                https://nikprog.hu/samples/person.xml

                A person-ben a dolgozóink szerepelnek, a devtask-ban a vállalt feladataik!

                Válaszoljunk az alábbi kérdésre:
                Adott tudásszintű emberek átlagosan hány órányi feladatot vállalnak?
             */

            string jsonContent = new WebClient().DownloadString("https://nikprog.hu/samples/devtask.json");
            var tasks = JsonConvert.DeserializeObject<IEnumerable<DevTask>>(jsonContent);

            new WebClient().DownloadFile("https://nikprog.hu/samples/person.xml", "person.xml");
            XmlSerializer reader = new XmlSerializer(typeof(Person[]));
            StreamReader sr = new StreamReader("person.xml");
            var people = (IEnumerable<Person>)reader.Deserialize(sr);

            var query = from p in people
                        join t in tasks
                        on p.Name equals t.PersonName
                        group (p, t) by p.Level into g
                        select new
                        {
                            LevelName = g.Key,
                            AvgHour = g.Average(z => z.t.EstimatedDuration)
                        };
            

        }
    }
}

##HFT02DevTasks.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>
</Project>
########################################################################################################################

#####Modul03 - DLL és reflexió#####

###Hft03IceCream###
##QuestionWindow.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Hft03IceCream
{
    public static class QuestionWindow
    {
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern int MessageBox(IntPtr hWnd, String text, String caption, uint type);

        public static bool Show(string text, string caption)
        {
            int result = MessageBox(IntPtr.Zero, text, caption, 4);
            if (result == 6)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

##Program.cs##
using System;
using System.Runtime.InteropServices;

namespace Hft03IceCream
{
    internal class Program
    {
        static void Main(string[] args)
        {
            bool result = QuestionWindow.Show("Kérsz fagyit?", "Fagyi kérdés");
            if (result)
            {
                Console.WriteLine("Fagyi!");
            }
            else
            {
                Console.WriteLine("Nem fagyi");
            }
            
        }
    }
}

##Hft03IceCream.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>
########################################################################################################################

###Hft03ObjectRecorder###
##Person.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Hft03ObjectRecorder
{
    public class Person
    {
        public Person(string name, int age, string job)
        {
            Name = name;
            Age = age;
            Job = job;
        }
        public Person()
        {

        }
        public string Name { get; set; }
        public int Age { get; set; }
        public string Job { get; set; }
    }
}

##Program.cs##
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;

namespace Hft03ObjectRecorder
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Type t = ClassSwitcher();
            var people = ImportCollection(t);
            CollectionTraverser(people, t);
            people.AddRange(RecordCollection(t));

            ExportCollection(people, t);
            
        }

        static Type ClassSwitcher()
        {
            string workingDir = Directory.GetCurrentDirectory();
            string classesDir = Path.Combine(workingDir, "classes");
            List<Type> types = new List<Type>();
            foreach (var item in Directory.GetFiles(classesDir, "*.dll"))
            {
                Assembly a = Assembly.LoadFrom(item);
                types.AddRange(a.GetTypes());
            }

            Console.WriteLine("Enter the number of the selected class!");
            for (int i = 0; i < types.Count; i++)
            {
                Console.WriteLine($"{i}: {types[i].Name}");
            }
            int index = int.Parse(Console.ReadLine());
            Console.Clear();
            return types[index];
        }

        static List<object> ImportCollection(Type t)
        {
            if (!File.Exists(t.Name + ".xml"))
            {
                return new List<object>();
            }


            List<object> items = new List<object>();
            XDocument xdoc = XDocument.Load(t.Name + ".xml");
            foreach (var element in xdoc.Descendants(t.Name))
            {
                object instance = Activator.CreateInstance(t);
                foreach (var prop in t.GetProperties())
                {
                    object result = element.Element(prop.Name).Value;
                    if (prop.PropertyType == typeof(string))
                    {
                        prop.SetValue(instance, result);
                    }
                    else
                    {
                        Type propType = prop.PropertyType;
                        var parseMethod = propType.GetMethods().First(t => t.Name.Contains("Parse"));
                        var converted = parseMethod.Invoke(null, new object[] { result });
                        prop.SetValue(instance, converted);
                    }
                }
                items.Add(instance);
            }
            return items;
        }

        static void CollectionTraverser<T>(IEnumerable<T> collection, Type t)
        {
            foreach (var item in t.GetProperties())
            {
                Console.Write(item.Name.Length > 7 ? item.Name.Substring(0, 7) : item.Name + "\t");
            }
            Console.WriteLine();
            foreach (var item in collection)
            {
                foreach (var prop in t.GetProperties())
                {
                    Console.Write(prop.GetValue(item).ToString().Length > 7 ?
                        prop.GetValue(item).ToString().Substring(0, 7) :
                        prop.GetValue(item) + "\t");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }

        static void ExportCollection<T>(IEnumerable<T> collection, Type t)
        {
            XDocument xdoc = new XDocument();
            XElement root = new XElement(t.Name + "s");
            xdoc.Add(root);
            foreach (var item in collection)
            {
                XElement sub = new XElement(t.Name);
                foreach (var prop in t.GetProperties())
                {
                    XElement propelement = new XElement(prop.Name, prop.GetValue(item));
                    sub.Add(propelement);
                }
                root.Add(sub);
            }
            xdoc.Save(t.Name + ".xml");
        }

        static List<object> RecordCollection(Type t)
        {
            List<object> items = new List<object>();
            string choice = "";
            do
            {
                items.Add(RecordObject(t));
                Console.WriteLine("Another object? y/n");
                choice = Console.ReadLine();
                Console.Clear();
            } while (choice == "y");
            return items;
        }


        static object RecordObject(Type t)
        {
            object instance = Activator.CreateInstance(t);
            foreach (var item in t.GetProperties())
            {
                var attr = item.GetCustomAttribute<DisplayNameAttribute>();
                if (attr != null)
                {
                    Console.Write(attr.DisplayName + ": ");
                }
                else
                {
                    Console.Write($"Enter {item.Name} value: ");
                }

                

                string result = Console.ReadLine();
                
                if (item.PropertyType == typeof(string))
                {
                    item.SetValue(instance, result);
                }
                else
                {
                    Type propType = item.PropertyType;
                    var parseMethod = propType.GetMethods().First(t => t.Name.Contains("Parse"));
                    var converted = parseMethod.Invoke(null, new object[] { result });
                    item.SetValue(instance, converted);
                }
                
                
            }
            return instance;
        }
    }
}

##Hft03ObjectRecorder.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>
########################################################################################################################

###Hft03PropertyTraverser###
##Program.cs##
using System;
using System.Collections;
using System.Collections.Generic;

namespace Hft03PropertyTraverser
{
    class Person
    {
        public Person(string name, int age, string job)
        {
            Name = name;
            Age = age;
            Job = job;
        }

        public string Name { get; set; }
        public int Age { get; set; }

        public string Job { get; set; }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            //DateTime now = DateTime.Now;
            //Traverser(now);

            List<DateTime> dates = new List<DateTime>()
            {
                DateTime.Now.AddYears(1),
                DateTime.Now.AddYears(2),
                DateTime.Now.AddYears(3),
            };

            List<Person> people = new List<Person>()
            {
                new Person("Kati", 34, "portás"),
                new Person("Géza", 50, "taxis"),
                new Person("Sándor", 39, "tanár"),
            };


            CollectionTraverser(people);
        }

        static void Traverser(object o)
        {
            Type t = o.GetType();
            var props = t.GetProperties();
            foreach (var item in props)
            {
                Console.WriteLine(item.Name + ": " + item.GetValue(o));
            }
        }

        static void CollectionTraverser<T>(IEnumerable<T> collection)
        {
            Type t = typeof(T);
            foreach (var item in t.GetProperties())
            {
                Console.Write(item.Name.Length > 7 ? item.Name.Substring(0,7) : item.Name + "\t");
            }
            Console.WriteLine();
            foreach (var item in collection)
            {
                foreach (var prop in t.GetProperties())
                {
                    Console.Write(prop.GetValue(item).ToString().Length > 7 ? 
                        prop.GetValue(item).ToString().Substring(0,7) : 
                        prop.GetValue(item) + "\t");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }
    }
}

##Hft03PropertyTraverser.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>
########################################################################################################################

###Hft03DllConsumer###
##Program.cs##
using System;
using OENIK.NotifyCollection;

namespace Hft03DllConsumer
{
    internal class Program
    {
        static void Main(string[] args)
        {
            EventList<string> list = new EventList<string>();
            list.ItemAdded += List_ItemAdded;

            list.Add("Béla");
            list.Add("Kati");
            list.Add("Sanyi");

        }

        private static void List_ItemAdded(object sender, EventList<string>.ListEventArgs e)
        {
            Console.WriteLine(e.Item + " added");
        }
    }
}

##Hft03DllConsumer.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="NotifyCollection">
      <HintPath>..\..\..\..\Desktop\NotifyCollection.dll</HintPath>
    </Reference>
  </ItemGroup>

</Project>
########################################################################################################################

###BookDll###
##Person.cs##
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BookDll
{
    public class Person
    {
        public Person(string name, int age, string job)
        {
            Name = name;
            Age = age;
            Job = job;
        }
        public Person()
        {

        }
        public string Name { get; set; }
        public int Age { get; set; }
        public string Job { get; set; }
    }
}

##Book.cs##
using System;
using System.ComponentModel;

namespace BookDll
{
    public class Book
    {
        [DisplayName("Add meg a könyv címét")]
        public string Title { get; set; }

        [DisplayName("Add meg a könyv szerzőjét")]
        public string Author { get; set; }
    }
}

##BookDll.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>
########################################################################################################################

#####Modul04 - Adatbázis kezelés#####

###HFT4.AdoNet###
##Program.cs##
using System;
using System.Data.SqlClient;

namespace HFT04.AdoNet
{
    internal class Program
    {

        static void Insert(int id, string title, SqlConnection conn)
        {
            SqlCommand cmd = new SqlCommand($"insert into MOVIES (MovieId,Title,DirectorId) values ({id},'{title}',1)", conn);
            cmd.ExecuteNonQuery();
        }

        static void Main(string[] args)
        {
            string connStr = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Users\Andras\source\repos\HFT04\HFT04.AdoNet\marvel.mdf;Integrated Security=True";
            SqlConnection conn = new SqlConnection(connStr);
            conn.Open();

            //Insert(28, "Dr. Strange 2", conn);
            //Insert(29, "Thor 3", conn);


            SqlCommand cmd = new SqlCommand("select * from MOVIES", conn);
            SqlDataReader reader = cmd.ExecuteReader();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                if (reader.GetName(i).Length > 7)
                {
                    Console.Write(reader.GetName(i).Substring(0, 7) + "\t");
                }
                else
                {
                    Console.Write(reader.GetName(i) + "\t");
                }
            }
            Console.WriteLine();
            while (reader.Read())
            {
                //Console.WriteLine(reader["Title"].ToString());
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    if (reader.GetValue(i).ToString().Length > 7)
                    {
                        Console.Write(reader.GetValue(i).ToString().Substring(0, 7) + "\t");
                    }
                    else
                    {
                        Console.Write(reader.GetValue(i).ToString() + "\t");
                    }
                    
                }
                Console.WriteLine();
            }
            reader.Close();
        }
    }
}

##HFT04.AdoNet.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Data.SqlClient" Version="4.8.3" />
  </ItemGroup>

</Project>
########################################################################################################################

###HFT04B.DbFirst###
##Program.cs##
using HFT04B.DbFirst.Models;
using System;
using System.Linq;

namespace HFT04B.DbFirst
{
    internal class Program
    {
        static void Main(string[] args)
        {
            MarvelDbContext ctx = new MarvelDbContext();

            //ctx.Movies.ToList()
            //    .ForEach(t => Console.WriteLine(t.Title));

            var asd = ctx.Movies.ToArray();
            
            
            foreach (var item in ctx.Movies)
            {
                Console.WriteLine(item.Director.DirectorName + ": " + item.Title);
            }

        }
    }
}


##HFT04B.DbFirst.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="marvel.mdf" />
    <None Remove="marvel_log.ldf" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="marvel.mdf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="marvel_log.ldf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
	
<ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="5.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="5.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.14">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>


</Project>

##Models##
#Movie.cs#
using System;
using System.Collections.Generic;

#nullable disable

namespace HFT04B.DbFirst.Models
{
    public partial class Movie
    {
        public decimal MovieId { get; set; }
        public string Title { get; set; }
        public double? Income { get; set; }
        public decimal DirectorId { get; set; }
        public DateTime? Release { get; set; }
        public double? Rating { get; set; }

        public virtual Director Director { get; set; }
    }
}

#MarvelDbContext.cs#
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace HFT04B.DbFirst.Models
{
    public partial class MarvelDbContext : DbContext
    {
        public MarvelDbContext()
        {
        }

        public MarvelDbContext(DbContextOptions<MarvelDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Director> Directors { get; set; }
        public virtual DbSet<Movie> Movies { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder
                    .UseSqlServer("Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\\marvel.mdf;Integrated Security=True;MultipleActiveResultSets=True")
                    .UseLazyLoadingProxies();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Director>(entity =>
            {
                entity.Property(e => e.DirectorId).HasColumnType("numeric(4, 0)");

                entity.Property(e => e.DirectorName)
                    .HasMaxLength(240)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Movie>(entity =>
            {
                entity.Property(e => e.MovieId).HasColumnType("numeric(4, 0)");

                entity.Property(e => e.DirectorId).HasColumnType("numeric(4, 0)");

                entity.Property(e => e.Release).HasColumnType("date");

                entity.Property(e => e.Title)
                    .HasMaxLength(240)
                    .IsUnicode(false);

                entity.HasOne(d => d.Director)
                    .WithMany(p => p.Movies)
                    .HasForeignKey(d => d.DirectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Movies_directors_foreign_key");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}

#Director.cs#
using System;
using System.Collections.Generic;

#nullable disable

namespace HFT04B.DbFirst.Models
{
    public partial class Director
    {
        public Director()
        {
            Movies = new HashSet<Movie>();
        }

        public decimal DirectorId { get; set; }
        public string DirectorName { get; set; }

        public virtual ICollection<Movie> Movies { get; set; }
    }
}
########################################################################################################################

###HFT04B.CodeFirst###
##Peogram.cs##
using HFT04B.CodeFirst.Data;
using System;
using System.Linq;

namespace HFT04B.CodeFirst
{
    internal class Program
    {
        static void Main(string[] args)
        {
            MarvelDbContext ctx = new MarvelDbContext();

            //ctx.Movies.ToList()
            //    .ForEach(t => Console.WriteLine(t.Title));

            //foreach (var item in ctx.Movies)
            //{
            //    Console.WriteLine(item.Title);
            //    foreach (var role in item.Roles)
            //    {
            //        Console.WriteLine("\t" + role.RoleName + ": " + role.Actor.ActorName);
            //    }
            //}

            //Hány filmben szerepel Robert Downey Jr.?
            int count = ctx.Actors
                .FirstOrDefault(t => t.ActorName == "Robert Downey Jr.")
                .Movies.Count;
            ;


            //Melyik a legtöbb szereplőt felsorakoztató film?
            var top = (from m in ctx.Movies
                       orderby m.Roles.Count descending
                       select m.Title).First();


            //Írjuk ki Paul Rudd szerepeit és filmjeit!
            foreach (var item in ctx.Actors.FirstOrDefault(t => t.ActorName == "Paul Rudd").Roles)
            {
                Console.WriteLine(item.RoleName + " (" + item.Movie.Title + ")");
            }



            //Évente milyen átlagértékelésű filmek születtek ?
            var avg = from m in ctx.Movies
                      group m by m.Release.Year into g
                      select new
                      {
                          Year = g.Key,
                          AvgRate = g.Average(t => t.Rating)
                      };
            ;

        }
    }
}

##HFT04B.CodeFirst.csproj##
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="movies.mdf" />
    <None Remove="movies_log.ldf" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="movies.mdf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="movies_log.ldf">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.14">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

</Project>

##Models##
#Role.cs#
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT04B.CodeFirst.Models
{
    public class Role
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int RoleId { get; set; }

        public int Priority { get; set; }
        public string RoleName { get; set; }

        public int MovieId { get; set; }
        public int ActorId { get; set; }

        public virtual Actor Actor { get; private set; }
        public virtual Movie Movie { get; private set; }

        public Role()
        {

        }

        public Role(string line)
        {
            string[] split = line.Split('#');
            RoleId = int.Parse(split[0]);
            MovieId = int.Parse(split[1]);
            ActorId = int.Parse(split[2]);
            Priority = int.Parse(split[3]);
            RoleName = split[4];
        }
    }

}

#Movie.cs#
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT04B.CodeFirst.Models
{
    public class Movie
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int MovieId { get; set; }

        [StringLength(240)]
        public string Title { get; set; }

        [Range(0, 10000)]
        public double Income { get; set; }

        [Range(0, 10)]
        public double Rating { get; set; }

        public DateTime Release { get; set; }

        public int DirectorId { get; set; }

        public virtual Director Director { get; set; }

        public virtual ICollection<Actor> Actors { get; set; }

        public virtual ICollection<Role> Roles { get; set; }


        public Movie()
        {

        }

        public Movie(string line)
        {
            string[] split = line.Split('#');
            MovieId = int.Parse(split[0]);
            Title = split[1];
            Income = double.Parse(split[2]);
            DirectorId = int.Parse(split[3]);
            Release = DateTime.Parse(split[4].Replace('*', '.'));
            Rating = double.Parse(split[5]);
        }

    }

}

#Director.cs#
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT04B.CodeFirst.Models
{
    public class Director
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int DirectorId { get; set; }

        [Required]
        [StringLength(240)]
        public string DirectorName { get; set; }

        public virtual ICollection<Movie> Movies { get; set; }

        public Director()
        {
            Movies = new HashSet<Movie>();
        }

        public Director(string line)
        {
            string[] split = line.Split('#');
            DirectorId = int.Parse(split[0]);
            DirectorName = split[1];
            Movies = new HashSet<Movie>();
        }
    }

}

#Actor.cs#
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT04B.CodeFirst.Models
{
    public class Actor
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int ActorId { get; set; }

        [Required]
        [StringLength(240)]
        public string ActorName { get; set; }

        public virtual ICollection<Movie> Movies { get; set; }
        public virtual ICollection<Role> Roles { get; set; }
        public Actor()
        {

        }

        public Actor(string line)
        {
            string[] split = line.Split('#');
            ActorId = int.Parse(split[0]);
            ActorName = split[1];
        }
    }

}

##Data##
#MarvelDbContext.cs#
using HFT04B.CodeFirst.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HFT04B.CodeFirst.Data
{
    internal class MarvelDbContext : DbContext
    {
        public DbSet<Movie> Movies { get; set; }
        public DbSet<Director> Directors { get; set; }

        public DbSet<Role> Roles { get; set; }
        public DbSet<Actor> Actors { get; set; }


        public MarvelDbContext()
        {
            this.Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!builder.IsConfigured)
            {
     //           string conn = @"Data Source=(LocalDB)\MSSQLLocalDB;
		   //AttachDbFilename=|DataDirectory|\movies.mdf;Integrated Security=True;MultipleActiveResultSets=true";

                builder
                   //.UseSqlServer(conn)
                   .UseInMemoryDatabase("marvel")
                   .UseLazyLoadingProxies();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<Movie>(movie => movie
                .HasOne(movie => movie.Director)
                .WithMany(director => director.Movies)
                .HasForeignKey(movie => movie.DirectorId)
                .OnDelete(DeleteBehavior.Cascade));

            modelBuilder.Entity<Actor>()
                .HasMany(x => x.Movies)
                .WithMany(x => x.Actors)
                .UsingEntity<Role>(
                    x => x.HasOne(x => x.Movie)
                        .WithMany().HasForeignKey(x => x.MovieId).OnDelete(DeleteBehavior.Cascade),
                    x => x.HasOne(x => x.Actor)
                        .WithMany().HasForeignKey(x => x.ActorId).OnDelete(DeleteBehavior.Cascade));
            
            modelBuilder.Entity<Role>()
                .HasOne(r => r.Actor)
                .WithMany(actor => actor.Roles)
                .HasForeignKey(r => r.ActorId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Role>()
                .HasOne(r => r.Movie)
                .WithMany(movie => movie.Roles)
                .HasForeignKey(r => r.MovieId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Movie>().HasData(new Movie[]
            {
                new Movie("1#Iron Man#585,8#1#2008*05*02#7,9"),
                new Movie("2#The Incredible Hulk#264,8#2#2008*06*13#6,6"),
                new Movie("3#Iron Man 2#623,9#1#2010*05*07#6,9"),
                new Movie("4#Thor#449,3#3#2011*05*06#7"),
                new Movie("5#Captain America: The First Avenger#370,6#4#2011*07*22#6,9"),
                new Movie("6#The Avengers#1519#5#2012*05*04#8"),
                new Movie("7#Iron Man 3#1214#6#2013*05*03#7,1"),
                new Movie("8#Thor: The Dark World#644,8#7#2013*11*08#6,8"),
                new Movie("9#Captain America: The Winter Soldier#714,4#8#2014*04*04#6,9"),
                new Movie("10#Guardians of the Galaxy#772,8#9#2014*08*01#8"),
                new Movie("11#Avengers: Age of Ultron#1403#5#2015*05*01#7,3"),
                new Movie("12#Ant-Man#519,3#10#2015*07*17#7,3"),
                new Movie("13#Captain America: Civil War#1153#8#2016*05*06#7,8"),
                new Movie("14#Doctor Strange#677,7#11#2016*11*04#7,5"),
                new Movie("15#Guardians of the Galaxy Vol. 2#863,8#9#2017*05*05#7,6"),
                new Movie("16#Spider-Man: Homecoming#880,2#12#2017*07*07#7,4"),
                new Movie("17#Thor: Ragnarok#854#13#2017*11*03#7,9"),
                new Movie("18#Black Panther#1348#14#2018*02*16#7,3"),
                new Movie("19#Avengers: Infinity War#2048#8#2018*04*27#8,4"),
                new Movie("20#Ant-Man and the Wasp#622,7#10#2018*07*06#7"),
                new Movie("21#Captain Marvel#1128#15#2019*03*08#6,8"),
                new Movie("22#Avengers: Endgame#2798#8#2019*04*26#8,4"),
                new Movie("23#Spider-Man: Far From Home#1132#12#2019*07*02#7,4"),
                new Movie("24#Black Widow#379,6#16#2021*07*09#6,7"),
                new Movie("25#Shang-Chi and the Legend of the Ten Rings#432,2#17#2021*09*03#7,5"),
                new Movie("26#Eternals#402,1#18#2021*11*05#6,4"),
                new Movie("27#Spider-Man: No Way Home#1804#12#2021*12*17#8,7"),
            });

            modelBuilder.Entity<Director>().HasData(new Director[]
            {
                   new Director("1#Jon Favreau"),
                new Director("2#Louis Leterrier"),
                new Director("3#Kenneth Branagh"),
                new Director("4#Joe Johnston"),
                new Director("5#Joss Whedon"),
                new Director("6#Shane Black"),
                new Director("7#Alan Taylor"),
                new Director("8#Anthony and Joe Russo"),
                new Director("9#James Gunn"),
                new Director("10#Peyton Reed"),
                new Director("11#Scott Derrickson"),
                new Director("12#Jon Watts"),
                new Director("13#Taika Waititi"),
                new Director("14#Ryan Coogler"),
                new Director("15#Anna Boden and Ryan Fleck"),
                new Director("16#Cate Shortland"),
                new Director("17#Destin Daniel Cretton"),
                new Director("18#ChloĂŠ Zhao"),
            });

            modelBuilder.Entity<Actor>().HasData(new Actor[]
            {
                new Actor("1#Aaron Schwartz"),
                new Actor("2#Aaron Taylor-Johnson"),
                new Actor("3#Abby Ryder Fortson"),
                new Actor("4#Abraham Attah"),
                new Actor("5#Adewale Akinnuoye-Agbaje"),
                new Actor("6#Adriana Barraza"),
                new Actor("7#Alaa Safi"),
                new Actor("8#Alan Scott"),
                new Actor("9#Alfred Molina"),
                new Actor("10#Algenis Perez Soto"),
                new Actor("11#Alice Krige"),
                new Actor("12#Amali Golden"),
                new Actor("13#Amy Landecker"),
                new Actor("14#Andrew Garfield"),
                new Actor("15#Andy Le"),
                new Actor("16#Andy Serkis"),
                new Actor("17#Angela Bassett"),
                new Actor("18#Angelina Jolie"),
                new Actor("19#Angourie Rice"),
                new Actor("20#Annette Bening"),
                new Actor("21#Anthony Hopkins"),
                new Actor("22#Anthony Mackie"),
                new Actor("23#Arian Moayed"),
                new Actor("24#Arnold Sun"),
                new Actor("25#Awkwafina"),
                new Actor("26#Barry Keoghan"),
                new Actor("27#Ben Kingsley"),
                new Actor("28#Ben Mendelsohn"),
                new Actor("29#Benedict Cumberbatch"),
                new Actor("30#Benedict Wong"),
                new Actor("31#Benicio Del Toro"),
                new Actor("32#Benjamin Bratt"),
                new Actor("33#Bill Skarsgård"),
                new Actor("34#Bill Smitrovich"),
                new Actor("35#Bobby Cannavale"),
                new Actor("36#Bokeem Woodbine"),
                new Actor("37#Bradley Cooper"),
                new Actor("38#Brian Tyree Henry"),
                new Actor("39#Brie Larson"),
                new Actor("40#Bruno Ricci"),
                new Actor("41#Cate Blanchett"),
                new Actor("42#Chadwick Boseman"),
                new Actor("43#Charlie Cox"),
                new Actor("44#Chiwetel Ejiofor"),
                new Actor("45#Chris Evans"),
                new Actor("46#Chris Hemsworth"),
                new Actor("47#Chris Pratt"),
                new Actor("48#Chris Sullivan"),
                new Actor("49#Christina Cabot"),
                new Actor("50#Christopher Eccleston"),
                new Actor("51#Christopher Fairbank"),
                new Actor("52#Clancy Brown"),
                new Actor("53#Clark Gregg"),
                new Actor("54#Clive Russell"),
                new Actor("55#Cobie Smulders"),
                new Actor("56#Colm Feore"),
                new Actor("57#Connie Chiume"),
                new Actor("58#Corey Stoll"),
                new Actor("59#Danai Gurira"),
                new Actor("60#Daniel Brühl"),
                new Actor("61#Daniel Kaluuya"),
                new Actor("62#Dave Bautista"),
                new Actor("63#David Dastmalchian"),
                new Actor("64#David Harbour"),
                new Actor("65#David S. Lee"),
                new Actor("66#Débora Nascimento"),
                new Actor("67#Derek Luke"),
                new Actor("68#Divian Ladwa"),
                new Actor("69#Djimon Hounsou"),
                new Actor("70#Dominic Cooper"),
                new Actor("71#Don Cheadle"),
                new Actor("72#Donald Glover"),
                new Actor("73#Edward Norton"),
                new Actor("74#Elizabeth Debicki"),
                new Actor("75#Elizabeth Olsen"),
                new Actor("76#Elodie Fong"),
                new Actor("77#Emily VanCamp"),
                new Actor("78#Esai Daniel Cross"),
                new Actor("79#Evangeline Lilly"),
                new Actor("80#Ever Anderson"),
                new Actor("81#Fala Chen"),
                new Actor("82#Faran Tahir"),
                new Actor("83#Florence Kasumba"),
                new Actor("84#Florence Pugh"),
                new Actor("85#Florian Munteanu"),
                new Actor("86#Forest Whitaker"),
                new Actor("87#Frank Grillo"),
                new Actor("88#Garrett Morris"),
                new Actor("89#Garry Shandling"),
                new Actor("90#Gemma Chan"),
                new Actor("91#Georgia Blizzard"),
                new Actor("92#Glenn Close"),
                new Actor("93#Goran Kostic"),
                new Actor("94#Gregg Turkington"),
                new Actor("95#Guy Pearce"),
                new Actor("96#Gwyneth Paltrow"),
                new Actor("97#Haaz Sleiman"),
                new Actor("98#Hannah Dodd"),
                new Actor("99#Hannah Harlow"),
                new Actor("100#Hannah John-Kamen"),
                new Actor("101#Hannibal Buress"),
                new Actor("102#Harish Patel"),
                new Actor("103#Haroon Khan"),
                new Actor("104#Harry Styles"),
                new Actor("105#Hayley Atwell"),
                new Actor("106#Hugo Weaving"),
                new Actor("107#Idris Elba"),
                new Actor("108#Isaach De Bankolé"),
                new Actor("109#J.B. Smoove"),
                new Actor("110#J.K. Simmons"),
                new Actor("111#Jacob Batalon"),
                new Actor("112#Jaimie Alexander"),
                new Actor("113#Jake Gyllenhaal"),
                new Actor("114#James Badge Dale"),
                new Actor("115#James Spader"),
                new Actor("116#Jamie Foxx"),
                new Actor("117#Jayden Zhang"),
                new Actor("118#Jeff Bridges"),
                new Actor("119#Jeff Goldblum"),
                new Actor("120#Jeremy Renner"),
                new Actor("121#JJ Feild"),
                new Actor("122#Jodi Long"),
                new Actor("123#John C. Reilly"),
                new Actor("124#John Kani"),
                new Actor("125#John Slattery"),
                new Actor("126#Jon Favreau"),
                new Actor("127#Jonathan Howard"),
                new Actor("128#Jorge Lendeborg Jr."),
                new Actor("129#Josh Dallas"),
                new Actor("130#Jude Law"),
                new Actor("131#Judy Greer"),
                new Actor("132#Karen Gillan"),
                new Actor("133#Karl Urban"),
                new Actor("134#Kat Dennings"),
                new Actor("135#Kathleen Cardoso"),
                new Actor("136#Katrina Durden"),
                new Actor("137#Kenneth Choi"),
                new Actor("138#Khalili Dastan"),
                new Actor("139#Kit Harington"),
                new Actor("140#Krystian Godlewski"),
                new Actor("141#Kumail Nanjiani"),
                new Actor("142#Kunal Dudheker"),
                new Actor("143#Kurt Russell"),
                new Actor("144#Lashana Lynch"),
                new Actor("145#Laura Haddock"),
                new Actor("146#Laura Harrier"),
                new Actor("147#Lauren Ridloff"),
                new Actor("148#Laurence Fishburne"),
                new Actor("149#Lee Pace"),
                new Actor("150#Leslie Bibb"),
                new Actor("151#Letitia Wright"),
                new Actor("152#Lewis Young"),
                new Actor("153#Lex Shrapnel"),
                new Actor("154#Lia McHugh"),
                new Actor("155#Liani Samuel"),
                new Actor("156#Linda Cardellini"),
                new Actor("157#Linda Louise Duan"),
                new Actor("158#Liv Tyler"),
                new Actor("159#Lou Ferrigno"),
                new Actor("160#Lupita Nyong'o"),
                new Actor("161#Ma Dong-seok"),
                new Actor("162#Mads Mikkelsen"),
                new Actor("163#Marco Khan"),
                new Actor("164#Marisa Tomei"),
                new Actor("165#Mark Anthony Brighton"),
                new Actor("166#Mark Ruffalo"),
                new Actor("167#Martin Donovan"),
                new Actor("168#Martin Freeman"),
                new Actor("169#Martin Starr"),
                new Actor("170#Mary Rivera"),
                new Actor("171#Maximiliano Hernández"),
                new Actor("172#Meera Syal"),
                new Actor("173#Meng'er Zhang"),
                new Actor("174#Michael B. Jordan"),
                new Actor("175#Michael Douglas"),
                new Actor("176#Michael Keaton"),
                new Actor("177#Michael Peña"),
                new Actor("178#Michael Rooker"),
                new Actor("179#Michael Stuhlbarg"),
                new Actor("180#Michelle Lee"),
                new Actor("181#Michelle Pfeiffer"),
                new Actor("182#Michelle Yeoh"),
                new Actor("183#Mickey Rourke"),
                new Actor("184#Nabiyah Be"),
                new Actor("185#Natalie Portman"),
                new Actor("186#Neal McDonough"),
                new Actor("187#Numan Acar"),
                new Actor("188#Olga Kurylenko"),
                new Actor("189#O-T Fagbenle"),
                new Actor("190#Paul Bettany"),
                new Actor("191#Paul Rudd"),
                new Actor("192#Paul Soles"),
                new Actor("193#Paul W. He"),
                new Actor("194#Paula Newsome"),
                new Actor("195#Peter Billingsley"),
                new Actor("196#Peter Mensah"),
                new Actor("197#Peter Serafinowicz"),
                new Actor("198#Pom Klementieff"),
                new Actor("199#Rachel House"),
                new Actor("200#Rachel McAdams"),
                new Actor("201#Rachel Weisz"),
                new Actor("202#Ramone Morgan"),
                new Actor("203#Randall Park"),
                new Actor("204#Ray Stevenson"),
                new Actor("205#Ray Winstone"),
                new Actor("206#Rebecca Hall"),
                new Actor("207#Remy Hii"),
                new Actor("208#Rene Russo"),
                new Actor("209#Rhys Ifans"),
                new Actor("210#Richard Armitage"),
                new Actor("211#Richard Madden"),
                new Actor("212#Robert Downey Jr."),
                new Actor("213#Robert Redford"),
                new Actor("214#Rod Hallett"),
                new Actor("215#Rune Temte"),
                new Actor("216#Ryan Kiera Armstrong"),
                new Actor("217#Salma Hayek"),
                new Actor("218#Sam Rockwell"),
                new Actor("219#Samuel L. Jackson"),
                new Actor("220#Sayed Badreya"),
                new Actor("221#Scarlett Johansson"),
                new Actor("222#Scott Adkins"),
                new Actor("223#Sean Gunn"),
                new Actor("224#Sebastian Stan"),
                new Actor("225#Selenis Leyva"),
                new Actor("226#Shaun Toub"),
                new Actor("227#Simu Liu"),
                new Actor("228#Stanley Tucci"),
                new Actor("229#Stellan Skarsgård"),
                new Actor("230#Stephanie Hsu"),
                new Actor("231#Stephanie Szostak"),
                new Actor("232#Sterling K. Brown"),
                new Actor("233#Sylvester Stallone"),
                new Actor("234#T.I."),
                new Actor("235#Tadanobu Asano"),
                new Actor("236#Taika Waititi"),
                new Actor("237#Terrence Howard"),
                new Actor("238#Tessa Thompson"),
                new Actor("239#Thomas Haden Church"),
                new Actor("240#Tilda Swinton"),
                new Actor("241#Tim Blake Nelson"),
                new Actor("242#Tim Guinee"),
                new Actor("243#Tim Roth"),
                new Actor("244#Tobey Maguire"),
                new Actor("245#Toby Jones"),
                new Actor("246#Tom Hiddleston"),
                new Actor("247#Tom Holland"),
                new Actor("248#Tom Morello"),
                new Actor("249#Tommy Flanagan"),
                new Actor("250#Tommy Lee Jones"),
                new Actor("251#Tony Chiu-Wai Leung"),
                new Actor("252#Tony Revolori"),
                new Actor("253#Topo Wresniwiro"),
                new Actor("254#Tsai Chin"),
                new Actor("255#Ty Burrell"),
                new Actor("256#Tyne Daly"),
                new Actor("257#Umit Ulgen"),
                new Actor("258#Vin Diesel"),
                new Actor("259#Violet McGraw"),
                new Actor("260#Wah Yuen"),
                new Actor("261#Walton Goggins"),
                new Actor("262#Will Lyman"),
                new Actor("263#Willem Dafoe"),
                new Actor("264#William Hurt"),
                new Actor("265#Winston Duke"),
                new Actor("266#Wood Harris"),
                new Actor("267#Wyatt Oleff"),
                new Actor("268#Yasmin Mwanza"),
                new Actor("269#Zach Barack"),
                new Actor("270#Zachary Levi"),
                new Actor("271#Zara Phythian"),
                new Actor("272#Zendaya"),
                new Actor("273#Zoe Saldana"),
                new Actor("274#Zoha Rahman"),

            });

            modelBuilder.Entity<Role>().HasData(new Role[]
            {
                new Role("1#1#212#1#Tony Stark"),
                new Role("2#1#96#2#Pepper Potts"),
                new Role("3#1#237#3#Rhodey"),
                new Role("4#1#118#4#Obadiah Stane"),
                new Role("5#1#150#5#Christine Everhart"),
                new Role("6#1#226#6#Yinsen"),
                new Role("7#1#82#7#Raza"),
                new Role("8#1#53#8#Agent Coulson"),
                new Role("9#1#34#9#General Gabriel"),
                new Role("10#1#220#10#Abu Bakaar"),
                new Role("11#1#190#11#JARVIS"),
                new Role("12#1#126#12#Hogan"),
                new Role("13#1#195#13#William Ginter Riva"),
                new Role("14#1#242#14#Major Allen"),
                new Role("15#1#262#15#Award Ceremony Narrator"),
                new Role("16#1#248#16#Guard"),
                new Role("17#1#163#17#Guard"),
                new Role("18#1#138#18#Guard"),
                new Role("19#2#73#1#Bruce Banner"),
                new Role("20#2#158#2#Betty Ross"),
                new Role("21#2#243#3#Emil Blonsky"),
                new Role("22#2#264#4#General 'Thunderbolt' Ross"),
                new Role("23#2#241#5#Samuel Sterns"),
                new Role("24#2#255#6#Leonard"),
                new Role("25#2#49#7#Major Kathleen Sparr"),
                new Role("26#2#196#8#General Joe Greller"),
                new Role("27#2#159#9#Voice of The Incredible Hulk"),
                new Role("28#2#192#10#Stanley"),
                new Role("29#2#66#11#Martina"),
                new Role("30#3#212#1#Tony Stark"),
                new Role("31#3#183#2#Ivan Vanko"),
                new Role("32#3#96#3#Pepper Potts"),
                new Role("33#3#71#4#Lt. Col. James 'Rhodey' Rhodes"),
                new Role("34#3#221#5#Natalie Rushman"),
                new Role("35#3#218#6#Justin Hammer"),
                new Role("36#3#219#7#Nick Fury"),
                new Role("37#3#53#8#Agent Coulson"),
                new Role("38#3#125#9#Howard Stark"),
                new Role("39#3#89#10#Senator Stern"),
                new Role("40#3#190#11#JARVIS"),
                new Role("41#4#46#1#Thor"),
                new Role("42#4#21#2#Odin"),
                new Role("43#4#185#3#Jane Foster"),
                new Role("44#4#246#4#Loki"),
                new Role("45#4#229#5#Erik Selvig"),
                new Role("46#4#134#6#Darcy Lewis"),
                new Role("47#4#53#7#Agent Coulson"),
                new Role("48#4#56#8#King Laufey"),
                new Role("49#4#107#9#Heimdall"),
                new Role("50#4#204#10#Volstagg"),
                new Role("51#4#235#11#Hogun"),
                new Role("52#4#129#12#Fandral"),
                new Role("53#4#112#13#Sif"),
                new Role("54#4#208#14#Frigga"),
                new Role("55#4#6#15#Isabela Alvarez"),
                new Role("56#4#171#16#Agent Sitwell"),
                new Role("57#5#45#1#Captain America"),
                new Role("58#5#106#2#Johann Schmidt"),
                new Role("59#5#219#3#Nick Fury"),
                new Role("60#5#105#4#Peggy Carter"),
                new Role("61#5#224#5#James Buchanan 'Bucky' Barnes"),
                new Role("62#5#250#6#Colonel Chester Phillips"),
                new Role("63#5#70#7#Howard Stark"),
                new Role("64#5#210#8#Heinz Kruger"),
                new Role("65#5#228#9#Dr. Abraham Erskine"),
                new Role("66#5#245#10#Dr. Arnim Zola"),
                new Role("67#5#186#11#Timothy 'Dum Dum' Dugan"),
                new Role("68#5#67#12#Gabe Jones"),
                new Role("69#5#137#13#Jim Morita"),
                new Role("70#5#121#14#James Montgomery Falsworth"),
                new Role("71#5#40#15#Jacques Dernier"),
                new Role("72#5#153#16#Gilmore Hodge"),
                new Role("73#6#212#1#Tony Stark"),
                new Role("74#6#45#2#Steve Rogers"),
                new Role("75#6#221#3#Natasha Romanoff"),
                new Role("76#6#120#4#Clint Barton"),
                new Role("77#6#166#5#Bruce Banner"),
                new Role("78#6#46#6#Thor"),
                new Role("79#6#246#7#Loki"),
                new Role("80#6#53#8#Agent Phil Coulson"),
                new Role("81#6#55#9#Agent Maria Hill"),
                new Role("82#6#229#10#Selvig"),
                new Role("83#6#219#11#Nick Fury"),
                new Role("84#6#96#12#Pepper Potts"),
                new Role("85#6#190#13#Jarvis"),
                new Role("86#7#212#1#Tony Stark"),
                new Role("87#7#95#2#Aldrich Killian"),
                new Role("88#7#96#3#Pepper Potts"),
                new Role("89#7#71#4#Colonel James Rhodes"),
                new Role("90#7#206#5#Maya Hansen"),
                new Role("91#7#126#6#Happy Hogan"),
                new Role("92#7#27#7#Trevor Slattery"),
                new Role("93#7#114#8#Savin"),
                new Role("94#7#231#9#Brandt"),
                new Role("95#7#190#10#JARVIS"),
                new Role("96#8#46#1#Thor"),
                new Role("97#8#185#2#Jane Foster"),
                new Role("98#8#246#3#Loki"),
                new Role("99#8#229#4#Erik Selvig"),
                new Role("100#8#21#5#Odin"),
                new Role("101#8#50#6#Malekith"),
                new Role("102#8#112#7#Sif"),
                new Role("103#8#270#8#Fandral"),
                new Role("104#8#204#9#Volstagg"),
                new Role("105#8#235#10#Hogun"),
                new Role("106#8#107#11#Heimdall"),
                new Role("107#8#208#12#Frigga"),
                new Role("108#8#5#13#Algrim"),
                new Role("109#8#134#14#Darcy Lewis"),
                new Role("110#8#11#15#Eir"),
                new Role("111#8#54#16#Tyr"),
                new Role("112#8#127#17#Ian Boothby"),
                new Role("113#8#202#18#John"),
                new Role("114#9#45#1#Steve Rogers"),
                new Role("115#9#219#2#Nick Fury"),
                new Role("116#9#221#3#Natasha Romanoff"),
                new Role("117#9#213#4#Alexander Pierce"),
                new Role("118#9#224#5#Bucky Barnes"),
                new Role("119#9#22#6#Sam Wilson"),
                new Role("120#9#55#7#Maria Hill"),
                new Role("121#9#87#8#Brock Rumlow"),
                new Role("122#9#171#9#Jasper Sitwell"),
                new Role("123#10#47#1#Peter Quill"),
                new Role("124#10#258#2#Groot"),
                new Role("125#10#37#3#Rocket"),
                new Role("126#10#273#4#Gamora"),
                new Role("127#10#62#5#Drax"),
                new Role("128#10#149#6#Ronan"),
                new Role("129#10#178#7#Yondu Udonta"),
                new Role("130#10#132#8#Nebula"),
                new Role("131#10#69#9#Korath"),
                new Role("132#10#123#10#Corpsman Dey"),
                new Role("133#10#92#11#Nova Prime"),
                new Role("134#10#31#12#The Collector"),
                new Role("135#10#145#13#Meredith Quill"),
                new Role("136#10#223#14#Kraglin…"),
                new Role("137#10#197#15#Denarian Saal"),
                new Role("138#10#51#16#The Broker"),
                new Role("139#10#140#17#On Set Groot"),
                new Role("140#10#267#18#Young Quill"),
                new Role("141#11#212#1#Tony Stark"),
                new Role("142#11#45#2#Steve Rogers"),
                new Role("143#11#166#3#Bruce Banner"),
                new Role("144#11#46#4#Thor"),
                new Role("145#11#221#5#Natasha Romanoff"),
                new Role("146#11#120#6#Clint Barton"),
                new Role("147#11#115#7#Ultron"),
                new Role("148#11#219#8#Nick Fury"),
                new Role("149#11#71#9#James Rhodes"),
                new Role("150#11#2#10#Pietro Maximoff"),
                new Role("151#11#75#11#Wanda Maximoff"),
                new Role("152#11#190#12#Jarvis"),
                new Role("153#11#55#13#Maria Hill"),
                new Role("154#11#22#14#Sam Wilson"),
                new Role("155#11#105#15#Peggy Carter"),
                new Role("156#11#107#16#Heimdall"),
                new Role("157#11#156#17#Laura Barton"),
                new Role("158#11#229#18#Erik Selvig"),
                new Role("159#12#191#1#Scott Lang"),
                new Role("160#12#175#2#Dr. Hank Pym"),
                new Role("161#12#58#3#Darren Cross"),
                new Role("162#12#79#4#Hope Van Dyne"),
                new Role("163#12#35#5#Paxton"),
                new Role("164#12#22#6#Sam Wilson"),
                new Role("165#12#131#7#Maggie Lang"),
                new Role("166#12#3#8#Cassie Lang"),
                new Role("167#12#177#9#Luis"),
                new Role("168#12#63#10#Kurt"),
                new Role("169#12#234#11#Dave"),
                new Role("170#12#266#12#Gale"),
                new Role("171#12#105#13#Peggy Carter"),
                new Role("172#12#125#14#Howard Stark"),
                new Role("173#12#167#15#Mitchell Carson"),
                new Role("174#12#88#16#Cab Driver"),
                new Role("175#12#94#17#Dale"),
                new Role("176#12#214#18#Hydra Buyer"),
                new Role("177#13#45#1#Steve Rogers"),
                new Role("178#13#212#2#Tony Stark"),
                new Role("179#13#221#3#Natasha Romanoff"),
                new Role("180#13#224#4#Bucky Barnes"),
                new Role("181#13#22#5#Sam Wilson"),
                new Role("182#13#71#6#Lieutenant James Rhodes"),
                new Role("183#13#120#7#Clint Barton"),
                new Role("184#13#42#8#T'Challa"),
                new Role("185#13#190#9#Vision"),
                new Role("186#13#75#10#Wanda Maximoff"),
                new Role("187#13#191#11#Scott Lang"),
                new Role("188#13#77#12#Sharon Carter"),
                new Role("189#13#247#13#Peter Parker"),
                new Role("190#13#60#14#Zemo"),
                new Role("191#13#87#15#Brock Rumlow"),
                new Role("192#13#264#16#Secretary of State Thaddeus Ross"),
                new Role("193#13#168#17#Everett K. Ross"),
                new Role("194#13#164#18#May Parker"),
                new Role("195#14#29#1#Dr. Stephen Strange"),
                new Role("196#14#44#2#Mordo"),
                new Role("197#14#200#3#Dr. Christine Palmer"),
                new Role("198#14#30#4#Wong"),
                new Role("199#14#162#5#Kaecilius"),
                new Role("200#14#240#6#The Ancient One"),
                new Role("201#14#179#7#Dr. Nicodemus West"),
                new Role("202#14#32#8#Jonathan Pangborn"),
                new Role("203#14#222#9#Lucian…"),
                new Role("204#14#271#10#Brunette Zealot"),
                new Role("205#14#7#11#Tall Zealot"),
                new Role("206#14#136#12#Blonde Zealot"),
                new Role("207#14#253#13#Hamir"),
                new Role("208#14#257#14#Sol Rama"),
                new Role("209#14#157#15#Tina Minoru"),
                new Role("210#14#165#16#Daniel Drumm"),
                new Role("211#14#172#17#Dr. Patel"),
                new Role("212#14#13#18#Dr. Bruner"),
                new Role("213#15#47#1#Peter Quill"),
                new Role("214#15#273#2#Gamora"),
                new Role("215#15#62#3#Drax"),
                new Role("216#15#258#4#Baby Groot"),
                new Role("217#15#37#5#Rocket"),
                new Role("218#15#178#6#Yondu"),
                new Role("219#15#132#7#Nebula"),
                new Role("220#15#198#8#Mantis"),
                new Role("221#15#233#9#Stakar Ogord"),
                new Role("222#15#143#10#Ego"),
                new Role("223#15#74#11#Ayesha"),
                new Role("224#15#48#12#Taserface"),
                new Role("225#15#223#13#Kraglin"),
                new Role("226#15#249#14#Tullk"),
                new Role("227#15#145#15#Meredith Quill"),
                new Role("228#15#1#16#Young Ego Facial Reference"),
                new Role("229#15#99#17#Sovereign Chambermaid"),
                new Role("230#16#247#1#Peter Parker"),
                new Role("231#16#176#2#Adrian Toomes"),
                new Role("232#16#212#3#Tony Stark"),
                new Role("233#16#164#4#May Parker"),
                new Role("234#16#126#5#Happy Hogan"),
                new Role("235#16#96#6#Pepper Potts"),
                new Role("236#16#272#7#Michelle"),
                new Role("237#16#72#8#Aaron Davis"),
                new Role("238#16#111#9#Ned"),
                new Role("239#16#146#10#Liz"),
                new Role("240#16#252#11#Flash"),
                new Role("241#16#36#12#Herman Schultz"),
                new Role("242#16#256#13#Anne Marie Hoag"),
                new Role("243#16#4#14#Abe"),
                new Role("244#16#101#15#Coach Wilson"),
                new Role("245#16#137#16#Principal Morita"),
                new Role("246#16#225#17#Ms. Warren"),
                new Role("247#16#19#18#Betty"),
                new Role("248#17#46#1#Thor"),
                new Role("249#17#246#2#Loki"),
                new Role("250#17#41#3#Hela"),
                new Role("251#17#166#4#Bruce Banner"),
                new Role("252#17#107#5#Heimdall"),
                new Role("253#17#119#6#Grandmaster"),
                new Role("254#17#238#7#Valkyrie"),
                new Role("255#17#133#8#Skurge"),
                new Role("256#17#21#9#Odin"),
                new Role("257#17#29#10#Doctor Strange"),
                new Role("258#17#236#11#Korg"),
                new Role("259#17#199#12#Topaz"),
                new Role("260#17#52#13#Surtur"),
                new Role("261#17#235#14#Hogun"),
                new Role("262#17#204#15#Volstagg"),
                new Role("263#17#270#16#Fandral"),
                new Role("264#17#91#17#Asgardian Date #1"),
                new Role("265#17#12#18#Asgardian Date #2"),
                new Role("266#18#42#1#T'Challa"),
                new Role("267#18#174#2#Erik Killmonger"),
                new Role("268#18#160#3#Nakia"),
                new Role("269#18#59#4#Okoye"),
                new Role("270#18#168#5#Everett K. Ross"),
                new Role("271#18#61#6#W'Kabi"),
                new Role("272#18#151#7#Shuri"),
                new Role("273#18#265#8#M'Baku"),
                new Role("274#18#232#9#N'Jobu"),

            });
        }


    }
}
########################################################################################################################

###Modul5 - Rétegzés###
##MovieDbApp##
#MovieDbApp.Repository#
MovieDbApp.Repository.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\MovieDbApp.Models\MovieDbApp.Models.csproj" />
  </ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.14">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

</Project>

ModelRepositories.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class RoleRepository : Repository<Role>, IRepository<Role>
    {
        public RoleRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Role Read(int id)
        {
            return ctx.Roles.FirstOrDefault(t => t.RoleId == id);
        }

        public override void Update(Role item)
        {
            var old = Read(item.RoleId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

MovieRepository.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class MovieRepository : Repository<Movie>, IRepository<Movie>
    {
        public MovieRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Movie Read(int id)
        {
            return ctx.Movies.FirstOrDefault(t => t.MovieId == id);
        }

        public override void Update(Movie item)
        {
            var old = Read(item.MovieId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

DirectorRepository.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class DirectorRepository : Repository<Director>, IRepository<Director>
    {
        public DirectorRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Director Read(int id)
        {
            return ctx.Directors.FirstOrDefault(t => t.DirectorId == id);
        }

        public override void Update(Director item)
        {
            var old = Read(item.DirectorId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

ActorRepository.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class ActorRepository : Repository<Actor>, IRepository<Actor>
    {
        public ActorRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Actor Read(int id)
        {
            return ctx.Actors.FirstOrDefault(t => t.ActorId == id);
        }

        public override void Update(Actor item)
        {
            var old = Read(item.ActorId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

Interfaces
IRepository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
	public interface IRepository<T> where T : class
	{
		IQueryable<T> ReadAll();
		T Read(int id);
		void Create(T item);
		void Update(T item);
		void Delete(int id);
	}

}

GenericRepository
Repository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public abstract class Repository<T> : IRepository<T> where T : class
    {
        protected MovieDbContext ctx;
        public Repository(MovieDbContext ctx)
        {
            this.ctx = ctx;
        }
        public void Create(T item)
        {
            ctx.Set<T>().Add(item);
            ctx.SaveChanges();
        }

        public IQueryable<T> ReadAll()
        {
            return ctx.Set<T>();
        }

        public void Delete(int id)
        {
            ctx.Set<T>().Remove(Read(id));
            ctx.SaveChanges();
        }

        public abstract T Read(int id);
        public abstract void Update(T item);

    }

}

Database
MovieDbContext.cs
using System;
using Microsoft.EntityFrameworkCore;
using MovieDbApp.Models;

namespace MovieDbApp.Repository
{
    public class MovieDbContext : DbContext
    {
        public DbSet<Movie> Movies { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Actor> Actors { get; set; }
        public DbSet<Director> Directors { get; set; }

        public MovieDbContext()
        {
            this.Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!builder.IsConfigured)
            {
                builder
                    .UseLazyLoadingProxies()
                    .UseInMemoryDatabase("movie");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<Movie>(movie => movie
                .HasOne(movie => movie.Director)
                .WithMany(director => director.Movies)
                .HasForeignKey(movie => movie.DirectorId)
                .OnDelete(DeleteBehavior.Cascade));

            modelBuilder.Entity<Actor>()
                .HasMany(x => x.Movies)
                .WithMany(x => x.Actors)
                .UsingEntity<Role>(
                    x => x.HasOne(x => x.Movie)
                        .WithMany().HasForeignKey(x => x.MovieId).OnDelete(DeleteBehavior.Cascade),
                    x => x.HasOne(x => x.Actor)
                        .WithMany().HasForeignKey(x => x.ActorId).OnDelete(DeleteBehavior.Cascade));

            modelBuilder.Entity<Role>()
                .HasOne(r => r.Actor)
                .WithMany(actor => actor.Roles)
                .HasForeignKey(r => r.ActorId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Role>()
                .HasOne(r => r.Movie)
                .WithMany(movie => movie.Roles)
                .HasForeignKey(r => r.MovieId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Movie>().HasData(new Movie[]
            {
                new Movie("1#Iron Man#585,8#1#2008*05*02#7,9"),
                new Movie("2#The Incredible Hulk#264,8#2#2008*06*13#6,6"),
                new Movie("3#Iron Man 2#623,9#1#2010*05*07#6,9"),
                new Movie("4#Thor#449,3#3#2011*05*06#7"),
                new Movie("5#Captain America: The First Avenger#370,6#4#2011*07*22#6,9"),
                new Movie("6#The Avengers#1519#5#2012*05*04#8"),
                new Movie("7#Iron Man 3#1214#6#2013*05*03#7,1"),
                new Movie("8#Thor: The Dark World#644,8#7#2013*11*08#6,8"),
                new Movie("9#Captain America: The Winter Soldier#714,4#8#2014*04*04#6,9"),
                new Movie("10#Guardians of the Galaxy#772,8#9#2014*08*01#8"),
                new Movie("11#Avengers: Age of Ultron#1403#5#2015*05*01#7,3"),
                new Movie("12#Ant-Man#519,3#10#2015*07*17#7,3"),
                new Movie("13#Captain America: Civil War#1153#8#2016*05*06#7,8"),
                new Movie("14#Doctor Strange#677,7#11#2016*11*04#7,5"),
                new Movie("15#Guardians of the Galaxy Vol. 2#863,8#9#2017*05*05#7,6"),
                new Movie("16#Spider-Man: Homecoming#880,2#12#2017*07*07#7,4"),
                new Movie("17#Thor: Ragnarok#854#13#2017*11*03#7,9"),
                new Movie("18#Black Panther#1348#14#2018*02*16#7,3"),
                new Movie("19#Avengers: Infinity War#2048#8#2018*04*27#8,4"),
                new Movie("20#Ant-Man and the Wasp#622,7#10#2018*07*06#7"),
                new Movie("21#Captain Marvel#1128#15#2019*03*08#6,8"),
                new Movie("22#Avengers: Endgame#2798#8#2019*04*26#8,4"),
                new Movie("23#Spider-Man: Far From Home#1132#12#2019*07*02#7,4"),
                new Movie("24#Black Widow#379,6#16#2021*07*09#6,7"),
                new Movie("25#Shang-Chi and the Legend of the Ten Rings#432,2#17#2021*09*03#7,5"),
                new Movie("26#Eternals#402,1#18#2021*11*05#6,4"),
                new Movie("27#Spider-Man: No Way Home#1804#12#2021*12*17#8,7"),
            });

            modelBuilder.Entity<Director>().HasData(new Director[]
            {
                   new Director("1#Jon Favreau"),
                new Director("2#Louis Leterrier"),
                new Director("3#Kenneth Branagh"),
                new Director("4#Joe Johnston"),
                new Director("5#Joss Whedon"),
                new Director("6#Shane Black"),
                new Director("7#Alan Taylor"),
                new Director("8#Anthony and Joe Russo"),
                new Director("9#James Gunn"),
                new Director("10#Peyton Reed"),
                new Director("11#Scott Derrickson"),
                new Director("12#Jon Watts"),
                new Director("13#Taika Waititi"),
                new Director("14#Ryan Coogler"),
                new Director("15#Anna Boden and Ryan Fleck"),
                new Director("16#Cate Shortland"),
                new Director("17#Destin Daniel Cretton"),
                new Director("18#ChloĂŠ Zhao"),
            });

            modelBuilder.Entity<Actor>().HasData(new Actor[]
            {
                new Actor("1#Aaron Schwartz"),
                new Actor("2#Aaron Taylor-Johnson"),
                new Actor("3#Abby Ryder Fortson"),
                new Actor("4#Abraham Attah"),
                new Actor("5#Adewale Akinnuoye-Agbaje"),
                new Actor("6#Adriana Barraza"),
                new Actor("7#Alaa Safi"),
                new Actor("8#Alan Scott"),
                new Actor("9#Alfred Molina"),
                new Actor("10#Algenis Perez Soto"),
                new Actor("11#Alice Krige"),
                new Actor("12#Amali Golden"),
                new Actor("13#Amy Landecker"),
                new Actor("14#Andrew Garfield"),
                new Actor("15#Andy Le"),
                new Actor("16#Andy Serkis"),
                new Actor("17#Angela Bassett"),
                new Actor("18#Angelina Jolie"),
                new Actor("19#Angourie Rice"),
                new Actor("20#Annette Bening"),
                new Actor("21#Anthony Hopkins"),
                new Actor("22#Anthony Mackie"),
                new Actor("23#Arian Moayed"),
                new Actor("24#Arnold Sun"),
                new Actor("25#Awkwafina"),
                new Actor("26#Barry Keoghan"),
                new Actor("27#Ben Kingsley"),
                new Actor("28#Ben Mendelsohn"),
                new Actor("29#Benedict Cumberbatch"),
                new Actor("30#Benedict Wong"),
                new Actor("31#Benicio Del Toro"),
                new Actor("32#Benjamin Bratt"),
                new Actor("33#Bill Skarsgård"),
                new Actor("34#Bill Smitrovich"),
                new Actor("35#Bobby Cannavale"),
                new Actor("36#Bokeem Woodbine"),
                new Actor("37#Bradley Cooper"),
                new Actor("38#Brian Tyree Henry"),
                new Actor("39#Brie Larson"),
                new Actor("40#Bruno Ricci"),
                new Actor("41#Cate Blanchett"),
                new Actor("42#Chadwick Boseman"),
                new Actor("43#Charlie Cox"),
                new Actor("44#Chiwetel Ejiofor"),
                new Actor("45#Chris Evans"),
                new Actor("46#Chris Hemsworth"),
                new Actor("47#Chris Pratt"),
                new Actor("48#Chris Sullivan"),
                new Actor("49#Christina Cabot"),
                new Actor("50#Christopher Eccleston"),
                new Actor("51#Christopher Fairbank"),
                new Actor("52#Clancy Brown"),
                new Actor("53#Clark Gregg"),
                new Actor("54#Clive Russell"),
                new Actor("55#Cobie Smulders"),
                new Actor("56#Colm Feore"),
                new Actor("57#Connie Chiume"),
                new Actor("58#Corey Stoll"),
                new Actor("59#Danai Gurira"),
                new Actor("60#Daniel Brühl"),
                new Actor("61#Daniel Kaluuya"),
                new Actor("62#Dave Bautista"),
                new Actor("63#David Dastmalchian"),
                new Actor("64#David Harbour"),
                new Actor("65#David S. Lee"),
                new Actor("66#Débora Nascimento"),
                new Actor("67#Derek Luke"),
                new Actor("68#Divian Ladwa"),
                new Actor("69#Djimon Hounsou"),
                new Actor("70#Dominic Cooper"),
                new Actor("71#Don Cheadle"),
                new Actor("72#Donald Glover"),
                new Actor("73#Edward Norton"),
                new Actor("74#Elizabeth Debicki"),
                new Actor("75#Elizabeth Olsen"),
                new Actor("76#Elodie Fong"),
                new Actor("77#Emily VanCamp"),
                new Actor("78#Esai Daniel Cross"),
                new Actor("79#Evangeline Lilly"),
                new Actor("80#Ever Anderson"),
                new Actor("81#Fala Chen"),
                new Actor("82#Faran Tahir"),
                new Actor("83#Florence Kasumba"),
                new Actor("84#Florence Pugh"),
                new Actor("85#Florian Munteanu"),
                new Actor("86#Forest Whitaker"),
                new Actor("87#Frank Grillo"),
                new Actor("88#Garrett Morris"),
                new Actor("89#Garry Shandling"),
                new Actor("90#Gemma Chan"),
                new Actor("91#Georgia Blizzard"),
                new Actor("92#Glenn Close"),
                new Actor("93#Goran Kostic"),
                new Actor("94#Gregg Turkington"),
                new Actor("95#Guy Pearce"),
                new Actor("96#Gwyneth Paltrow"),
                new Actor("97#Haaz Sleiman"),
                new Actor("98#Hannah Dodd"),
                new Actor("99#Hannah Harlow"),
                new Actor("100#Hannah John-Kamen"),
                new Actor("101#Hannibal Buress"),
                new Actor("102#Harish Patel"),
                new Actor("103#Haroon Khan"),
                new Actor("104#Harry Styles"),
                new Actor("105#Hayley Atwell"),
                new Actor("106#Hugo Weaving"),
                new Actor("107#Idris Elba"),
                new Actor("108#Isaach De Bankolé"),
                new Actor("109#J.B. Smoove"),
                new Actor("110#J.K. Simmons"),
                new Actor("111#Jacob Batalon"),
                new Actor("112#Jaimie Alexander"),
                new Actor("113#Jake Gyllenhaal"),
                new Actor("114#James Badge Dale"),
                new Actor("115#James Spader"),
                new Actor("116#Jamie Foxx"),
                new Actor("117#Jayden Zhang"),
                new Actor("118#Jeff Bridges"),
                new Actor("119#Jeff Goldblum"),
                new Actor("120#Jeremy Renner"),
                new Actor("121#JJ Feild"),
                new Actor("122#Jodi Long"),
                new Actor("123#John C. Reilly"),
                new Actor("124#John Kani"),
                new Actor("125#John Slattery"),
                new Actor("126#Jon Favreau"),
                new Actor("127#Jonathan Howard"),
                new Actor("128#Jorge Lendeborg Jr."),
                new Actor("129#Josh Dallas"),
                new Actor("130#Jude Law"),
                new Actor("131#Judy Greer"),
                new Actor("132#Karen Gillan"),
                new Actor("133#Karl Urban"),
                new Actor("134#Kat Dennings"),
                new Actor("135#Kathleen Cardoso"),
                new Actor("136#Katrina Durden"),
                new Actor("137#Kenneth Choi"),
                new Actor("138#Khalili Dastan"),
                new Actor("139#Kit Harington"),
                new Actor("140#Krystian Godlewski"),
                new Actor("141#Kumail Nanjiani"),
                new Actor("142#Kunal Dudheker"),
                new Actor("143#Kurt Russell"),
                new Actor("144#Lashana Lynch"),
                new Actor("145#Laura Haddock"),
                new Actor("146#Laura Harrier"),
                new Actor("147#Lauren Ridloff"),
                new Actor("148#Laurence Fishburne"),
                new Actor("149#Lee Pace"),
                new Actor("150#Leslie Bibb"),
                new Actor("151#Letitia Wright"),
                new Actor("152#Lewis Young"),
                new Actor("153#Lex Shrapnel"),
                new Actor("154#Lia McHugh"),
                new Actor("155#Liani Samuel"),
                new Actor("156#Linda Cardellini"),
                new Actor("157#Linda Louise Duan"),
                new Actor("158#Liv Tyler"),
                new Actor("159#Lou Ferrigno"),
                new Actor("160#Lupita Nyong'o"),
                new Actor("161#Ma Dong-seok"),
                new Actor("162#Mads Mikkelsen"),
                new Actor("163#Marco Khan"),
                new Actor("164#Marisa Tomei"),
                new Actor("165#Mark Anthony Brighton"),
                new Actor("166#Mark Ruffalo"),
                new Actor("167#Martin Donovan"),
                new Actor("168#Martin Freeman"),
                new Actor("169#Martin Starr"),
                new Actor("170#Mary Rivera"),
                new Actor("171#Maximiliano Hernández"),
                new Actor("172#Meera Syal"),
                new Actor("173#Meng'er Zhang"),
                new Actor("174#Michael B. Jordan"),
                new Actor("175#Michael Douglas"),
                new Actor("176#Michael Keaton"),
                new Actor("177#Michael Peña"),
                new Actor("178#Michael Rooker"),
                new Actor("179#Michael Stuhlbarg"),
                new Actor("180#Michelle Lee"),
                new Actor("181#Michelle Pfeiffer"),
                new Actor("182#Michelle Yeoh"),
                new Actor("183#Mickey Rourke"),
                new Actor("184#Nabiyah Be"),
                new Actor("185#Natalie Portman"),
                new Actor("186#Neal McDonough"),
                new Actor("187#Numan Acar"),
                new Actor("188#Olga Kurylenko"),
                new Actor("189#O-T Fagbenle"),
                new Actor("190#Paul Bettany"),
                new Actor("191#Paul Rudd"),
                new Actor("192#Paul Soles"),
                new Actor("193#Paul W. He"),
                new Actor("194#Paula Newsome"),
                new Actor("195#Peter Billingsley"),
                new Actor("196#Peter Mensah"),
                new Actor("197#Peter Serafinowicz"),
                new Actor("198#Pom Klementieff"),
                new Actor("199#Rachel House"),
                new Actor("200#Rachel McAdams"),
                new Actor("201#Rachel Weisz"),
                new Actor("202#Ramone Morgan"),
                new Actor("203#Randall Park"),
                new Actor("204#Ray Stevenson"),
                new Actor("205#Ray Winstone"),
                new Actor("206#Rebecca Hall"),
                new Actor("207#Remy Hii"),
                new Actor("208#Rene Russo"),
                new Actor("209#Rhys Ifans"),
                new Actor("210#Richard Armitage"),
                new Actor("211#Richard Madden"),
                new Actor("212#Robert Downey Jr."),
                new Actor("213#Robert Redford"),
                new Actor("214#Rod Hallett"),
                new Actor("215#Rune Temte"),
                new Actor("216#Ryan Kiera Armstrong"),
                new Actor("217#Salma Hayek"),
                new Actor("218#Sam Rockwell"),
                new Actor("219#Samuel L. Jackson"),
                new Actor("220#Sayed Badreya"),
                new Actor("221#Scarlett Johansson"),
                new Actor("222#Scott Adkins"),
                new Actor("223#Sean Gunn"),
                new Actor("224#Sebastian Stan"),
                new Actor("225#Selenis Leyva"),
                new Actor("226#Shaun Toub"),
                new Actor("227#Simu Liu"),
                new Actor("228#Stanley Tucci"),
                new Actor("229#Stellan Skarsgård"),
                new Actor("230#Stephanie Hsu"),
                new Actor("231#Stephanie Szostak"),
                new Actor("232#Sterling K. Brown"),
                new Actor("233#Sylvester Stallone"),
                new Actor("234#T.I."),
                new Actor("235#Tadanobu Asano"),
                new Actor("236#Taika Waititi"),
                new Actor("237#Terrence Howard"),
                new Actor("238#Tessa Thompson"),
                new Actor("239#Thomas Haden Church"),
                new Actor("240#Tilda Swinton"),
                new Actor("241#Tim Blake Nelson"),
                new Actor("242#Tim Guinee"),
                new Actor("243#Tim Roth"),
                new Actor("244#Tobey Maguire"),
                new Actor("245#Toby Jones"),
                new Actor("246#Tom Hiddleston"),
                new Actor("247#Tom Holland"),
                new Actor("248#Tom Morello"),
                new Actor("249#Tommy Flanagan"),
                new Actor("250#Tommy Lee Jones"),
                new Actor("251#Tony Chiu-Wai Leung"),
                new Actor("252#Tony Revolori"),
                new Actor("253#Topo Wresniwiro"),
                new Actor("254#Tsai Chin"),
                new Actor("255#Ty Burrell"),
                new Actor("256#Tyne Daly"),
                new Actor("257#Umit Ulgen"),
                new Actor("258#Vin Diesel"),
                new Actor("259#Violet McGraw"),
                new Actor("260#Wah Yuen"),
                new Actor("261#Walton Goggins"),
                new Actor("262#Will Lyman"),
                new Actor("263#Willem Dafoe"),
                new Actor("264#William Hurt"),
                new Actor("265#Winston Duke"),
                new Actor("266#Wood Harris"),
                new Actor("267#Wyatt Oleff"),
                new Actor("268#Yasmin Mwanza"),
                new Actor("269#Zach Barack"),
                new Actor("270#Zachary Levi"),
                new Actor("271#Zara Phythian"),
                new Actor("272#Zendaya"),
                new Actor("273#Zoe Saldana"),
                new Actor("274#Zoha Rahman"),

            });

            modelBuilder.Entity<Role>().HasData(new Role[]
            {
                new Role("1#1#212#1#Tony Stark"),
                new Role("2#1#96#2#Pepper Potts"),
                new Role("3#1#237#3#Rhodey"),
                new Role("4#1#118#4#Obadiah Stane"),
                new Role("5#1#150#5#Christine Everhart"),
                new Role("6#1#226#6#Yinsen"),
                new Role("7#1#82#7#Raza"),
                new Role("8#1#53#8#Agent Coulson"),
                new Role("9#1#34#9#General Gabriel"),
                new Role("10#1#220#10#Abu Bakaar"),
                new Role("11#1#190#11#JARVIS"),
                new Role("12#1#126#12#Hogan"),
                new Role("13#1#195#13#William Ginter Riva"),
                new Role("14#1#242#14#Major Allen"),
                new Role("15#1#262#15#Award Ceremony Narrator"),
                new Role("16#1#248#16#Guard"),
                new Role("17#1#163#17#Guard"),
                new Role("18#1#138#18#Guard"),
                new Role("19#2#73#1#Bruce Banner"),
                new Role("20#2#158#2#Betty Ross"),
                new Role("21#2#243#3#Emil Blonsky"),
                new Role("22#2#264#4#General 'Thunderbolt' Ross"),
                new Role("23#2#241#5#Samuel Sterns"),
                new Role("24#2#255#6#Leonard"),
                new Role("25#2#49#7#Major Kathleen Sparr"),
                new Role("26#2#196#8#General Joe Greller"),
                new Role("27#2#159#9#Voice of The Incredible Hulk"),
                new Role("28#2#192#10#Stanley"),
                new Role("29#2#66#11#Martina"),
                new Role("30#3#212#1#Tony Stark"),
                new Role("31#3#183#2#Ivan Vanko"),
                new Role("32#3#96#3#Pepper Potts"),
                new Role("33#3#71#4#Lt. Col. James 'Rhodey' Rhodes"),
                new Role("34#3#221#5#Natalie Rushman"),
                new Role("35#3#218#6#Justin Hammer"),
                new Role("36#3#219#7#Nick Fury"),
                new Role("37#3#53#8#Agent Coulson"),
                new Role("38#3#125#9#Howard Stark"),
                new Role("39#3#89#10#Senator Stern"),
                new Role("40#3#190#11#JARVIS"),
                new Role("41#4#46#1#Thor"),
                new Role("42#4#21#2#Odin"),
                new Role("43#4#185#3#Jane Foster"),
                new Role("44#4#246#4#Loki"),
                new Role("45#4#229#5#Erik Selvig"),
                new Role("46#4#134#6#Darcy Lewis"),
                new Role("47#4#53#7#Agent Coulson"),
                new Role("48#4#56#8#King Laufey"),
                new Role("49#4#107#9#Heimdall"),
                new Role("50#4#204#10#Volstagg"),
                new Role("51#4#235#11#Hogun"),
                new Role("52#4#129#12#Fandral"),
                new Role("53#4#112#13#Sif"),
                new Role("54#4#208#14#Frigga"),
                new Role("55#4#6#15#Isabela Alvarez"),
                new Role("56#4#171#16#Agent Sitwell"),
                new Role("57#5#45#1#Captain America"),
                new Role("58#5#106#2#Johann Schmidt"),
                new Role("59#5#219#3#Nick Fury"),
                new Role("60#5#105#4#Peggy Carter"),
                new Role("61#5#224#5#James Buchanan 'Bucky' Barnes"),
                new Role("62#5#250#6#Colonel Chester Phillips"),
                new Role("63#5#70#7#Howard Stark"),
                new Role("64#5#210#8#Heinz Kruger"),
                new Role("65#5#228#9#Dr. Abraham Erskine"),
                new Role("66#5#245#10#Dr. Arnim Zola"),
                new Role("67#5#186#11#Timothy 'Dum Dum' Dugan"),
                new Role("68#5#67#12#Gabe Jones"),
                new Role("69#5#137#13#Jim Morita"),
                new Role("70#5#121#14#James Montgomery Falsworth"),
                new Role("71#5#40#15#Jacques Dernier"),
                new Role("72#5#153#16#Gilmore Hodge"),
                new Role("73#6#212#1#Tony Stark"),
                new Role("74#6#45#2#Steve Rogers"),
                new Role("75#6#221#3#Natasha Romanoff"),
                new Role("76#6#120#4#Clint Barton"),
                new Role("77#6#166#5#Bruce Banner"),
                new Role("78#6#46#6#Thor"),
                new Role("79#6#246#7#Loki"),
                new Role("80#6#53#8#Agent Phil Coulson"),
                new Role("81#6#55#9#Agent Maria Hill"),
                new Role("82#6#229#10#Selvig"),
                new Role("83#6#219#11#Nick Fury"),
                new Role("84#6#96#12#Pepper Potts"),
                new Role("85#6#190#13#Jarvis"),
                new Role("86#7#212#1#Tony Stark"),
                new Role("87#7#95#2#Aldrich Killian"),
                new Role("88#7#96#3#Pepper Potts"),
                new Role("89#7#71#4#Colonel James Rhodes"),
                new Role("90#7#206#5#Maya Hansen"),
                new Role("91#7#126#6#Happy Hogan"),
                new Role("92#7#27#7#Trevor Slattery"),
                new Role("93#7#114#8#Savin"),
                new Role("94#7#231#9#Brandt"),
                new Role("95#7#190#10#JARVIS"),
                new Role("96#8#46#1#Thor"),
                new Role("97#8#185#2#Jane Foster"),
                new Role("98#8#246#3#Loki"),
                new Role("99#8#229#4#Erik Selvig"),
                new Role("100#8#21#5#Odin"),
                new Role("101#8#50#6#Malekith"),
                new Role("102#8#112#7#Sif"),
                new Role("103#8#270#8#Fandral"),
                new Role("104#8#204#9#Volstagg"),
                new Role("105#8#235#10#Hogun"),
                new Role("106#8#107#11#Heimdall"),
                new Role("107#8#208#12#Frigga"),
                new Role("108#8#5#13#Algrim"),
                new Role("109#8#134#14#Darcy Lewis"),
                new Role("110#8#11#15#Eir"),
                new Role("111#8#54#16#Tyr"),
                new Role("112#8#127#17#Ian Boothby"),
                new Role("113#8#202#18#John"),
                new Role("114#9#45#1#Steve Rogers"),
                new Role("115#9#219#2#Nick Fury"),
                new Role("116#9#221#3#Natasha Romanoff"),
                new Role("117#9#213#4#Alexander Pierce"),
                new Role("118#9#224#5#Bucky Barnes"),
                new Role("119#9#22#6#Sam Wilson"),
                new Role("120#9#55#7#Maria Hill"),
                new Role("121#9#87#8#Brock Rumlow"),
                new Role("122#9#171#9#Jasper Sitwell"),
                new Role("123#10#47#1#Peter Quill"),
                new Role("124#10#258#2#Groot"),
                new Role("125#10#37#3#Rocket"),
                new Role("126#10#273#4#Gamora"),
                new Role("127#10#62#5#Drax"),
                new Role("128#10#149#6#Ronan"),
                new Role("129#10#178#7#Yondu Udonta"),
                new Role("130#10#132#8#Nebula"),
                new Role("131#10#69#9#Korath"),
                new Role("132#10#123#10#Corpsman Dey"),
                new Role("133#10#92#11#Nova Prime"),
                new Role("134#10#31#12#The Collector"),
                new Role("135#10#145#13#Meredith Quill"),
                new Role("136#10#223#14#Kraglin…"),
                new Role("137#10#197#15#Denarian Saal"),
                new Role("138#10#51#16#The Broker"),
                new Role("139#10#140#17#On Set Groot"),
                new Role("140#10#267#18#Young Quill"),
                new Role("141#11#212#1#Tony Stark"),
                new Role("142#11#45#2#Steve Rogers"),
                new Role("143#11#166#3#Bruce Banner"),
                new Role("144#11#46#4#Thor"),
                new Role("145#11#221#5#Natasha Romanoff"),
                new Role("146#11#120#6#Clint Barton"),
                new Role("147#11#115#7#Ultron"),
                new Role("148#11#219#8#Nick Fury"),
                new Role("149#11#71#9#James Rhodes"),
                new Role("150#11#2#10#Pietro Maximoff"),
                new Role("151#11#75#11#Wanda Maximoff"),
                new Role("152#11#190#12#Jarvis"),
                new Role("153#11#55#13#Maria Hill"),
                new Role("154#11#22#14#Sam Wilson"),
                new Role("155#11#105#15#Peggy Carter"),
                new Role("156#11#107#16#Heimdall"),
                new Role("157#11#156#17#Laura Barton"),
                new Role("158#11#229#18#Erik Selvig"),
                new Role("159#12#191#1#Scott Lang"),
                new Role("160#12#175#2#Dr. Hank Pym"),
                new Role("161#12#58#3#Darren Cross"),
                new Role("162#12#79#4#Hope Van Dyne"),
                new Role("163#12#35#5#Paxton"),
                new Role("164#12#22#6#Sam Wilson"),
                new Role("165#12#131#7#Maggie Lang"),
                new Role("166#12#3#8#Cassie Lang"),
                new Role("167#12#177#9#Luis"),
                new Role("168#12#63#10#Kurt"),
                new Role("169#12#234#11#Dave"),
                new Role("170#12#266#12#Gale"),
                new Role("171#12#105#13#Peggy Carter"),
                new Role("172#12#125#14#Howard Stark"),
                new Role("173#12#167#15#Mitchell Carson"),
                new Role("174#12#88#16#Cab Driver"),
                new Role("175#12#94#17#Dale"),
                new Role("176#12#214#18#Hydra Buyer"),
                new Role("177#13#45#1#Steve Rogers"),
                new Role("178#13#212#2#Tony Stark"),
                new Role("179#13#221#3#Natasha Romanoff"),
                new Role("180#13#224#4#Bucky Barnes"),
                new Role("181#13#22#5#Sam Wilson"),
                new Role("182#13#71#6#Lieutenant James Rhodes"),
                new Role("183#13#120#7#Clint Barton"),
                new Role("184#13#42#8#T'Challa"),
                new Role("185#13#190#9#Vision"),
                new Role("186#13#75#10#Wanda Maximoff"),
                new Role("187#13#191#11#Scott Lang"),
                new Role("188#13#77#12#Sharon Carter"),
                new Role("189#13#247#13#Peter Parker"),
                new Role("190#13#60#14#Zemo"),
                new Role("191#13#87#15#Brock Rumlow"),
                new Role("192#13#264#16#Secretary of State Thaddeus Ross"),
                new Role("193#13#168#17#Everett K. Ross"),
                new Role("194#13#164#18#May Parker"),
                new Role("195#14#29#1#Dr. Stephen Strange"),
                new Role("196#14#44#2#Mordo"),
                new Role("197#14#200#3#Dr. Christine Palmer"),
                new Role("198#14#30#4#Wong"),
                new Role("199#14#162#5#Kaecilius"),
                new Role("200#14#240#6#The Ancient One"),
                new Role("201#14#179#7#Dr. Nicodemus West"),
                new Role("202#14#32#8#Jonathan Pangborn"),
                new Role("203#14#222#9#Lucian…"),
                new Role("204#14#271#10#Brunette Zealot"),
                new Role("205#14#7#11#Tall Zealot"),
                new Role("206#14#136#12#Blonde Zealot"),
                new Role("207#14#253#13#Hamir"),
                new Role("208#14#257#14#Sol Rama"),
                new Role("209#14#157#15#Tina Minoru"),
                new Role("210#14#165#16#Daniel Drumm"),
                new Role("211#14#172#17#Dr. Patel"),
                new Role("212#14#13#18#Dr. Bruner"),
                new Role("213#15#47#1#Peter Quill"),
                new Role("214#15#273#2#Gamora"),
                new Role("215#15#62#3#Drax"),
                new Role("216#15#258#4#Baby Groot"),
                new Role("217#15#37#5#Rocket"),
                new Role("218#15#178#6#Yondu"),
                new Role("219#15#132#7#Nebula"),
                new Role("220#15#198#8#Mantis"),
                new Role("221#15#233#9#Stakar Ogord"),
                new Role("222#15#143#10#Ego"),
                new Role("223#15#74#11#Ayesha"),
                new Role("224#15#48#12#Taserface"),
                new Role("225#15#223#13#Kraglin"),
                new Role("226#15#249#14#Tullk"),
                new Role("227#15#145#15#Meredith Quill"),
                new Role("228#15#1#16#Young Ego Facial Reference"),
                new Role("229#15#99#17#Sovereign Chambermaid"),
                new Role("230#16#247#1#Peter Parker"),
                new Role("231#16#176#2#Adrian Toomes"),
                new Role("232#16#212#3#Tony Stark"),
                new Role("233#16#164#4#May Parker"),
                new Role("234#16#126#5#Happy Hogan"),
                new Role("235#16#96#6#Pepper Potts"),
                new Role("236#16#272#7#Michelle"),
                new Role("237#16#72#8#Aaron Davis"),
                new Role("238#16#111#9#Ned"),
                new Role("239#16#146#10#Liz"),
                new Role("240#16#252#11#Flash"),
                new Role("241#16#36#12#Herman Schultz"),
                new Role("242#16#256#13#Anne Marie Hoag"),
                new Role("243#16#4#14#Abe"),
                new Role("244#16#101#15#Coach Wilson"),
                new Role("245#16#137#16#Principal Morita"),
                new Role("246#16#225#17#Ms. Warren"),
                new Role("247#16#19#18#Betty"),
                new Role("248#17#46#1#Thor"),
                new Role("249#17#246#2#Loki"),
                new Role("250#17#41#3#Hela"),
                new Role("251#17#166#4#Bruce Banner"),
                new Role("252#17#107#5#Heimdall"),
                new Role("253#17#119#6#Grandmaster"),
                new Role("254#17#238#7#Valkyrie"),
                new Role("255#17#133#8#Skurge"),
                new Role("256#17#21#9#Odin"),
                new Role("257#17#29#10#Doctor Strange"),
                new Role("258#17#236#11#Korg"),
                new Role("259#17#199#12#Topaz"),
                new Role("260#17#52#13#Surtur"),
                new Role("261#17#235#14#Hogun"),
                new Role("262#17#204#15#Volstagg"),
                new Role("263#17#270#16#Fandral"),
                new Role("264#17#91#17#Asgardian Date #1"),
                new Role("265#17#12#18#Asgardian Date #2"),
                new Role("266#18#42#1#T'Challa"),
                new Role("267#18#174#2#Erik Killmonger"),
                new Role("268#18#160#3#Nakia"),
                new Role("269#18#59#4#Okoye"),
                new Role("270#18#168#5#Everett K. Ross"),
                new Role("271#18#61#6#W'Kabi"),
                new Role("272#18#151#7#Shuri"),
                new Role("273#18#265#8#M'Baku"),
                new Role("274#18#232#9#N'Jobu"),

            });
        }




    }
}

MovieDbApp.Models
Role.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Models
{
    public class Role
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int RoleId { get; set; }

        public int Priority { get; set; }
        public string RoleName { get; set; }

        public int MovieId { get; set; }
        public int ActorId { get; set; }

        public virtual Actor Actor { get; private set; }
        public virtual Movie Movie { get; private set; }

        public Role()
        {

        }

        public Role(string line)
        {
            string[] split = line.Split('#');
            RoleId = int.Parse(split[0]);
            MovieId = int.Parse(split[1]);
            ActorId = int.Parse(split[2]);
            Priority = int.Parse(split[3]);
            RoleName = split[4];
        }
    }
}

MovieDbApp.Models.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>

Movie.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MovieDbApp.Models
{
    public class Movie
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int MovieId { get; set; }

        [StringLength(240)]
        public string Title { get; set; }

        [Range(0, 10000)]
        public double Income { get; set; }

        [Range(0, 10)]
        public double Rating { get; set; }

        public DateTime Release { get; set; }

        public int DirectorId { get; set; }

        public virtual Director Director { get; set; }

        public virtual ICollection<Actor> Actors { get; set; }

        public virtual ICollection<Role> Roles { get; set; }


        public Movie()
        {

        }

        public Movie(string line)
        {
            string[] split = line.Split('#');
            MovieId = int.Parse(split[0]);
            Title = split[1];
            Income = double.Parse(split[2]);
            DirectorId = int.Parse(split[3]);
            Release = DateTime.Parse(split[4].Replace('*', '.'));
            Rating = double.Parse(split[5]);
        }

    }
}

Director.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Models
{
    public class Director
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int DirectorId { get; set; }

        [Required]
        [StringLength(240)]
        public string DirectorName { get; set; }

        public virtual ICollection<Movie> Movies { get; set; }

        public Director()
        {
            Movies = new HashSet<Movie>();
        }

        public Director(string line)
        {
            string[] split = line.Split('#');
            DirectorId = int.Parse(split[0]);
            DirectorName = split[1];
            Movies = new HashSet<Movie>();
        }
    }
}

Actor.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Models
{
    public class Actor
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int ActorId { get; set; }

        [Required]
        [StringLength(240)]
        public string ActorName { get; set; }

        public virtual ICollection<Movie> Movies { get; set; }
        public virtual ICollection<Role> Roles { get; set; }
        public Actor()
        {

        }

        public Actor(string line)
        {
            string[] split = line.Split('#');
            ActorId = int.Parse(split[0]);
            ActorName = split[1];
        }
    }
}

MovieDbApp.Logic
MovieDbApp.Logic.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\MovieDbApp.Models\MovieDbApp.Models.csproj" />
    <ProjectReference Include="..\MovieDbApp.Repository\MovieDbApp.Repository.csproj" />
  </ItemGroup>

</Project>

Interfaces

IRoleLogic.cs
using MovieDbApp.Models;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IRoleLogic
    {
        void Create(Role item);
        void Delete(int id);
        Role Read(int id);
        IQueryable<Role> ReadAll();
        void Update(Role item);
    }
}

IMovieLogic.cs
using MovieDbApp.Models;
using System.Collections.Generic;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IMovieLogic
    {
        void Create(Movie item);
        void Delete(int id);
        double? GetAverageRatePerYear(int year);
        Movie Read(int id);
        IQueryable<Movie> ReadAll();
        void Update(Movie item);
        IEnumerable<MovieLogic.YearInfo> YearStatistics();
    }
}

IDirectorLogic.cs
using MovieDbApp.Models;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IDirectorLogic
    {
        void Create(Director item);
        void Delete(int id);
        Director Read(int id);
        IQueryable<Director> ReadAll();
        void Update(Director item);
    }
}

IActorLogic.cs
using MovieDbApp.Models;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IActorLogic
    {
        void Create(Actor item);
        void Delete(int id);
        Actor Read(int id);
        IQueryable<Actor> ReadAll();
        void Update(Actor item);
    }
}

Classes
RoleLogic.cs
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Logic
{
    public class RoleLogic : IRoleLogic
    {
        IRepository<Role> repo;

        public RoleLogic(IRepository<Role> repo)
        {
            this.repo = repo;
        }

        public void Create(Role item)
        {
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Role Read(int id)
        {
            return this.repo.Read(id);
        }

        public IQueryable<Role> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Role item)
        {
            this.repo.Update(item);
        }
    }
}

MovieLogic.cs
using System;
using System.Collections.Generic;
using System.Linq;
using MovieDbApp.Models;
using MovieDbApp.Repository;

namespace MovieDbApp.Logic
{
    public class MovieLogic : IMovieLogic
    {
        IRepository<Movie> repo;

        public MovieLogic(IRepository<Movie> repo)
        {
            this.repo = repo;
        }

        public void Create(Movie item)
        {
            if (item.Title.Length < 3)
            {
                throw new ArgumentException("title too short...");
            }
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Movie Read(int id)
        {
            var movie = this.repo.Read(id);
            if (movie == null)
            {
                throw new ArgumentException("Movie not exists");
            }
            return movie;

        }

        public IQueryable<Movie> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Movie item)
        {
            this.repo.Update(item);
        }

        //non cruds

        public double? GetAverageRatePerYear(int year)
        {
            return this.repo
               .ReadAll()
               .Where(t => t.Release.Year == year)
               .Average(t => t.Rating);
        }


        public IEnumerable<YearInfo> YearStatistics()
        {
            return from x in this.repo.ReadAll()
                   group x by x.Release.Year into g
                   select new YearInfo()
                   {
                       Year = g.Key,
                       AvgRating = g.Average(t => t.Rating),
                       MovieNumber = g.Count()
                   };
        }

        public class YearInfo
        {
            public int Year { get; set; }
            public double? AvgRating { get; set; }
            public int MovieNumber { get; set; }
        }


    }
}

DirectorLogic.cs
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Logic
{
    public class DirectorLogic : IDirectorLogic
    {
        IRepository<Director> repo;

        public DirectorLogic(IRepository<Director> repo)
        {
            this.repo = repo;
        }

        public void Create(Director item)
        {
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Director Read(int id)
        {
            return this.repo.Read(id);
        }

        public IQueryable<Director> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Director item)
        {
            this.repo.Update(item);
        }
    }
}

ActorLogic.cs
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Logic
{
    public class ActorLogic : IActorLogic
    {
        IRepository<Actor> repo;

        public ActorLogic(IRepository<Actor> repo)
        {
            this.repo = repo;
        }

        public void Create(Actor item)
        {
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Actor Read(int id)
        {
            return this.repo.Read(id);
        }

        public IQueryable<Actor> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Actor item)
        {
            this.repo.Update(item);
        }
    }
}

MovieDbApp.Client
Program.cs
using ConsoleTools;
using MovieDbApp.Logic;
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Linq;

namespace MovieDbApp.Client
{
    internal class Program
    {
        static ActorLogic actorLogic;
        static RoleLogic roleLogic;
        static DirectorLogic directorLogic;
        static MovieLogic movieLogic;

        static void Create(string entity)
        {
            Console.WriteLine(entity + " create");
            Console.ReadLine();
        }
        static void List(string entity)
        {
            if (entity == "Actor")
            {
                var items = actorLogic.ReadAll();
                Console.WriteLine("Id" + "\t" + "Name");
                foreach (var item in items)
                {
                    Console.WriteLine(item.ActorId + "\t" + item.ActorName);
                }
            }
            Console.ReadLine();
        }
        static void Update(string entity)
        {
            Console.WriteLine(entity + " update");
            Console.ReadLine();
        }
        static void Delete(string entity)
        {
            Console.WriteLine(entity + " delete");
            Console.ReadLine();
        }

        static void Main(string[] args)
        {
            var ctx = new MovieDbContext();

            var movieRepo = new MovieRepository(ctx);
            var roleRepo = new RoleRepository(ctx);
            var actorRepo = new ActorRepository(ctx);
            var directorRepo = new DirectorRepository(ctx);

            movieLogic = new MovieLogic(movieRepo);
            roleLogic = new RoleLogic(roleRepo);
            actorLogic = new ActorLogic(actorRepo);
            directorLogic = new DirectorLogic(directorRepo);

            var actorSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Actor"))
                .Add("Create", () => Create("Actor"))
                .Add("Delete", () => Delete("Actor"))
                .Add("Update", () => Update("Actor"))
                .Add("Exit", ConsoleMenu.Close);

            var roleSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Role"))
                .Add("Create", () => Create("Role"))
                .Add("Delete", () => Delete("Role"))
                .Add("Update", () => Update("Role"))
                .Add("Exit", ConsoleMenu.Close);

            var directorSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Director"))
                .Add("Create", () => Create("Director"))
                .Add("Delete", () => Delete("Director"))
                .Add("Update", () => Update("Director"))
                .Add("Exit", ConsoleMenu.Close);

            var movieSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Movie"))
                .Add("Create", () => Create("Movie"))
                .Add("Delete", () => Delete("Movie"))
                .Add("Update", () => Update("Movie"))
                .Add("Exit", ConsoleMenu.Close);


            var menu = new ConsoleMenu(args, level: 0)
                .Add("Movies", () => movieSubMenu.Show())
                .Add("Actors", () => actorSubMenu.Show())
                .Add("Roles", () => roleSubMenu.Show())
                .Add("Directors", () => directorSubMenu.Show())
                .Add("Exit", ConsoleMenu.Close);

            menu.Show();

        }
    }
}

MovieDbApp.Client.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ConsoleMenu-simple" Version="2.4.2" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MovieDbApp.Logic\MovieDbApp.Logic.csproj" />
    <ProjectReference Include="..\MovieDbApp.Models\MovieDbApp.Models.csproj" />
    <ProjectReference Include="..\MovieDbApp.Repository\MovieDbApp.Repository.csproj" />
  </ItemGroup>

</Project>
########################################################################################################################

###HFT07 - Tesztelés###
MovieDbApp.Test
MovieLogicTester.cs
using Moq;
using MovieDbApp.Logic;
using MovieDbApp.Models;
using MovieDbApp.Repository;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using static MovieDbApp.Logic.MovieLogic;

namespace MovieDbApp.Test
{
    [TestFixture]
    public class MovieLogicTester
    {
        MovieLogic logic;
        Mock<IRepository<Movie>> mockMovieRepo;

        [SetUp]
        public void Init()
        {
            mockMovieRepo = new Mock<IRepository<Movie>>();
            mockMovieRepo.Setup(m => m.ReadAll()).Returns(new List<Movie>()
            {
                new Movie("1#MovieA#100#1#2008*05*02#5"),
                new Movie("2#MovieB#200#1#2009*05*02#6"),
                new Movie("3#MovieC#300#1#2009*05*02#7"),
                new Movie("4#MovieD#400#1#2010*05*02#8"),
            }.AsQueryable());
            logic = new MovieLogic(mockMovieRepo.Object);
        }

        [Test]
        public void AvgRatePerYearTest()
        {
            double? avg = logic.GetAverageRatePerYear(2009);
            Assert.That(avg, Is.EqualTo(6.5));
        }

        [Test]
        public void YearStatisticsTest()
        {
            var actual = logic.YearStatistics().ToList();
            var expected = new List<YearInfo>()
            {
                new YearInfo()
                {
                    Year = 2008,
                    AvgRating = 5,
                    MovieNumber = 1
                },
                new YearInfo()
                {
                    Year = 2009,
                    AvgRating = 6.5,
                    MovieNumber = 2
                },
                new YearInfo()
                {
                    Year = 2010,
                    AvgRating = 8,
                    MovieNumber = 1
                }
            };

            Assert.AreEqual(expected, actual);
        }

        [Test]
        public void CreateMovieTestWithCorrectTitle()
        {
            var movie = new Movie() { Title = "Vukk" };
            
            //ACT
            logic.Create(movie);

            //ASSERT
            mockMovieRepo.Verify(r => r.Create(movie), Times.Once);
        }

        [Test]
        public void CreateMovieTestWithInCorrectTitle()
        {
            var movie = new Movie() { Title = "24" };
            try
            {
                //ACT
                logic.Create(movie);
            }
            catch
            {

            }

            //ASSERT
            mockMovieRepo.Verify(r => r.Create(movie), Times.Never);
        }
    }
}

MovieDbApp.Test.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.1.0" />
		<PackageReference Include="Moq" Version="4.17.1" />
		<PackageReference Include="NUnit" Version="3.13.2" />
		<PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />
	</ItemGroup>

	<ItemGroup>
	  <ProjectReference Include="..\MovieDbApp.Logic\MovieDbApp.Logic.csproj" />
	  <ProjectReference Include="..\MovieDbApp.Models\MovieDbApp.Models.csproj" />
	  <ProjectReference Include="..\MovieDbApp.Repository\MovieDbApp.Repository.csproj" />
	</ItemGroup>


</Project>

MovieDbApp.Repository
MovieDbApp.Repository.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\MovieDbApp.Models\MovieDbApp.Models.csproj" />
  </ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Proxies" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="5.0.14" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.14">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

</Project>

ModelRepositories
RoleRepository.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class RoleRepository : Repository<Role>, IRepository<Role>
    {
        public RoleRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Role Read(int id)
        {
            return ctx.Roles.FirstOrDefault(t => t.RoleId == id);
        }

        public override void Update(Role item)
        {
            var old = Read(item.RoleId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

MovieRepository.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class MovieRepository : Repository<Movie>, IRepository<Movie>
    {
        public MovieRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Movie Read(int id)
        {
            return ctx.Movies.FirstOrDefault(t => t.MovieId == id);
        }

        public override void Update(Movie item)
        {
            var old = Read(item.MovieId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

DirectorRepository.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class DirectorRepository : Repository<Director>, IRepository<Director>
    {
        public DirectorRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Director Read(int id)
        {
            return ctx.Directors.FirstOrDefault(t => t.DirectorId == id);
        }

        public override void Update(Director item)
        {
            var old = Read(item.DirectorId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

ActorRepository.cs
using MovieDbApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public class ActorRepository : Repository<Actor>, IRepository<Actor>
    {
        public ActorRepository(MovieDbContext ctx) : base(ctx)
        {
        }

        public override Actor Read(int id)
        {
            return ctx.Actors.FirstOrDefault(t => t.ActorId == id);
        }

        public override void Update(Actor item)
        {
            var old = Read(item.ActorId);
            foreach (var prop in old.GetType().GetProperties())
            {
                prop.SetValue(old, prop.GetValue(item));
            }
            ctx.SaveChanges();
        }
    }
}

Interfaces
IRepository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
	public interface IRepository<T> where T : class
	{
		IQueryable<T> ReadAll();
		T Read(int id);
		void Create(T item);
		void Update(T item);
		void Delete(int id);
	}

}

GenericRepository
Repository.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Repository
{
    public abstract class Repository<T> : IRepository<T> where T : class
    {
        protected MovieDbContext ctx;
        public Repository(MovieDbContext ctx)
        {
            this.ctx = ctx;
        }
        public void Create(T item)
        {
            ctx.Set<T>().Add(item);
            ctx.SaveChanges();
        }

        public IQueryable<T> ReadAll()
        {
            return ctx.Set<T>();
        }

        public void Delete(int id)
        {
            ctx.Set<T>().Remove(Read(id));
            ctx.SaveChanges();
        }

        public abstract T Read(int id);
        public abstract void Update(T item);

    }

}

Database
MovieDbContext.cs
using System;
using Microsoft.EntityFrameworkCore;
using MovieDbApp.Models;

namespace MovieDbApp.Repository
{
    public class MovieDbContext : DbContext
    {
        public DbSet<Movie> Movies { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Actor> Actors { get; set; }
        public DbSet<Director> Directors { get; set; }

        public MovieDbContext()
        {
            this.Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder builder)
        {
            if (!builder.IsConfigured)
            {
                builder
                    .UseLazyLoadingProxies()
                    .UseInMemoryDatabase("movie");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<Movie>(movie => movie
                .HasOne(movie => movie.Director)
                .WithMany(director => director.Movies)
                .HasForeignKey(movie => movie.DirectorId)
                .OnDelete(DeleteBehavior.Cascade));

            modelBuilder.Entity<Actor>()
                .HasMany(x => x.Movies)
                .WithMany(x => x.Actors)
                .UsingEntity<Role>(
                    x => x.HasOne(x => x.Movie)
                        .WithMany().HasForeignKey(x => x.MovieId).OnDelete(DeleteBehavior.Cascade),
                    x => x.HasOne(x => x.Actor)
                        .WithMany().HasForeignKey(x => x.ActorId).OnDelete(DeleteBehavior.Cascade));

            modelBuilder.Entity<Role>()
                .HasOne(r => r.Actor)
                .WithMany(actor => actor.Roles)
                .HasForeignKey(r => r.ActorId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Role>()
                .HasOne(r => r.Movie)
                .WithMany(movie => movie.Roles)
                .HasForeignKey(r => r.MovieId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Movie>().HasData(new Movie[]
            {
                new Movie("1#Iron Man#585,8#1#2008*05*02#7,9"),
                new Movie("2#The Incredible Hulk#264,8#2#2008*06*13#6,6"),
                new Movie("3#Iron Man 2#623,9#1#2010*05*07#6,9"),
                new Movie("4#Thor#449,3#3#2011*05*06#7"),
                new Movie("5#Captain America: The First Avenger#370,6#4#2011*07*22#6,9"),
                new Movie("6#The Avengers#1519#5#2012*05*04#8"),
                new Movie("7#Iron Man 3#1214#6#2013*05*03#7,1"),
                new Movie("8#Thor: The Dark World#644,8#7#2013*11*08#6,8"),
                new Movie("9#Captain America: The Winter Soldier#714,4#8#2014*04*04#6,9"),
                new Movie("10#Guardians of the Galaxy#772,8#9#2014*08*01#8"),
                new Movie("11#Avengers: Age of Ultron#1403#5#2015*05*01#7,3"),
                new Movie("12#Ant-Man#519,3#10#2015*07*17#7,3"),
                new Movie("13#Captain America: Civil War#1153#8#2016*05*06#7,8"),
                new Movie("14#Doctor Strange#677,7#11#2016*11*04#7,5"),
                new Movie("15#Guardians of the Galaxy Vol. 2#863,8#9#2017*05*05#7,6"),
                new Movie("16#Spider-Man: Homecoming#880,2#12#2017*07*07#7,4"),
                new Movie("17#Thor: Ragnarok#854#13#2017*11*03#7,9"),
                new Movie("18#Black Panther#1348#14#2018*02*16#7,3"),
                new Movie("19#Avengers: Infinity War#2048#8#2018*04*27#8,4"),
                new Movie("20#Ant-Man and the Wasp#622,7#10#2018*07*06#7"),
                new Movie("21#Captain Marvel#1128#15#2019*03*08#6,8"),
                new Movie("22#Avengers: Endgame#2798#8#2019*04*26#8,4"),
                new Movie("23#Spider-Man: Far From Home#1132#12#2019*07*02#7,4"),
                new Movie("24#Black Widow#379,6#16#2021*07*09#6,7"),
                new Movie("25#Shang-Chi and the Legend of the Ten Rings#432,2#17#2021*09*03#7,5"),
                new Movie("26#Eternals#402,1#18#2021*11*05#6,4"),
                new Movie("27#Spider-Man: No Way Home#1804#12#2021*12*17#8,7"),
            });

            modelBuilder.Entity<Director>().HasData(new Director[]
            {
                   new Director("1#Jon Favreau"),
                new Director("2#Louis Leterrier"),
                new Director("3#Kenneth Branagh"),
                new Director("4#Joe Johnston"),
                new Director("5#Joss Whedon"),
                new Director("6#Shane Black"),
                new Director("7#Alan Taylor"),
                new Director("8#Anthony and Joe Russo"),
                new Director("9#James Gunn"),
                new Director("10#Peyton Reed"),
                new Director("11#Scott Derrickson"),
                new Director("12#Jon Watts"),
                new Director("13#Taika Waititi"),
                new Director("14#Ryan Coogler"),
                new Director("15#Anna Boden and Ryan Fleck"),
                new Director("16#Cate Shortland"),
                new Director("17#Destin Daniel Cretton"),
                new Director("18#ChloĂŠ Zhao"),
            });

            modelBuilder.Entity<Actor>().HasData(new Actor[]
            {
                new Actor("1#Aaron Schwartz"),
                new Actor("2#Aaron Taylor-Johnson"),
                new Actor("3#Abby Ryder Fortson"),
                new Actor("4#Abraham Attah"),
                new Actor("5#Adewale Akinnuoye-Agbaje"),
                new Actor("6#Adriana Barraza"),
                new Actor("7#Alaa Safi"),
                new Actor("8#Alan Scott"),
                new Actor("9#Alfred Molina"),
                new Actor("10#Algenis Perez Soto"),
                new Actor("11#Alice Krige"),
                new Actor("12#Amali Golden"),
                new Actor("13#Amy Landecker"),
                new Actor("14#Andrew Garfield"),
                new Actor("15#Andy Le"),
                new Actor("16#Andy Serkis"),
                new Actor("17#Angela Bassett"),
                new Actor("18#Angelina Jolie"),
                new Actor("19#Angourie Rice"),
                new Actor("20#Annette Bening"),
                new Actor("21#Anthony Hopkins"),
                new Actor("22#Anthony Mackie"),
                new Actor("23#Arian Moayed"),
                new Actor("24#Arnold Sun"),
                new Actor("25#Awkwafina"),
                new Actor("26#Barry Keoghan"),
                new Actor("27#Ben Kingsley"),
                new Actor("28#Ben Mendelsohn"),
                new Actor("29#Benedict Cumberbatch"),
                new Actor("30#Benedict Wong"),
                new Actor("31#Benicio Del Toro"),
                new Actor("32#Benjamin Bratt"),
                new Actor("33#Bill Skarsgård"),
                new Actor("34#Bill Smitrovich"),
                new Actor("35#Bobby Cannavale"),
                new Actor("36#Bokeem Woodbine"),
                new Actor("37#Bradley Cooper"),
                new Actor("38#Brian Tyree Henry"),
                new Actor("39#Brie Larson"),
                new Actor("40#Bruno Ricci"),
                new Actor("41#Cate Blanchett"),
                new Actor("42#Chadwick Boseman"),
                new Actor("43#Charlie Cox"),
                new Actor("44#Chiwetel Ejiofor"),
                new Actor("45#Chris Evans"),
                new Actor("46#Chris Hemsworth"),
                new Actor("47#Chris Pratt"),
                new Actor("48#Chris Sullivan"),
                new Actor("49#Christina Cabot"),
                new Actor("50#Christopher Eccleston"),
                new Actor("51#Christopher Fairbank"),
                new Actor("52#Clancy Brown"),
                new Actor("53#Clark Gregg"),
                new Actor("54#Clive Russell"),
                new Actor("55#Cobie Smulders"),
                new Actor("56#Colm Feore"),
                new Actor("57#Connie Chiume"),
                new Actor("58#Corey Stoll"),
                new Actor("59#Danai Gurira"),
                new Actor("60#Daniel Brühl"),
                new Actor("61#Daniel Kaluuya"),
                new Actor("62#Dave Bautista"),
                new Actor("63#David Dastmalchian"),
                new Actor("64#David Harbour"),
                new Actor("65#David S. Lee"),
                new Actor("66#Débora Nascimento"),
                new Actor("67#Derek Luke"),
                new Actor("68#Divian Ladwa"),
                new Actor("69#Djimon Hounsou"),
                new Actor("70#Dominic Cooper"),
                new Actor("71#Don Cheadle"),
                new Actor("72#Donald Glover"),
                new Actor("73#Edward Norton"),
                new Actor("74#Elizabeth Debicki"),
                new Actor("75#Elizabeth Olsen"),
                new Actor("76#Elodie Fong"),
                new Actor("77#Emily VanCamp"),
                new Actor("78#Esai Daniel Cross"),
                new Actor("79#Evangeline Lilly"),
                new Actor("80#Ever Anderson"),
                new Actor("81#Fala Chen"),
                new Actor("82#Faran Tahir"),
                new Actor("83#Florence Kasumba"),
                new Actor("84#Florence Pugh"),
                new Actor("85#Florian Munteanu"),
                new Actor("86#Forest Whitaker"),
                new Actor("87#Frank Grillo"),
                new Actor("88#Garrett Morris"),
                new Actor("89#Garry Shandling"),
                new Actor("90#Gemma Chan"),
                new Actor("91#Georgia Blizzard"),
                new Actor("92#Glenn Close"),
                new Actor("93#Goran Kostic"),
                new Actor("94#Gregg Turkington"),
                new Actor("95#Guy Pearce"),
                new Actor("96#Gwyneth Paltrow"),
                new Actor("97#Haaz Sleiman"),
                new Actor("98#Hannah Dodd"),
                new Actor("99#Hannah Harlow"),
                new Actor("100#Hannah John-Kamen"),
                new Actor("101#Hannibal Buress"),
                new Actor("102#Harish Patel"),
                new Actor("103#Haroon Khan"),
                new Actor("104#Harry Styles"),
                new Actor("105#Hayley Atwell"),
                new Actor("106#Hugo Weaving"),
                new Actor("107#Idris Elba"),
                new Actor("108#Isaach De Bankolé"),
                new Actor("109#J.B. Smoove"),
                new Actor("110#J.K. Simmons"),
                new Actor("111#Jacob Batalon"),
                new Actor("112#Jaimie Alexander"),
                new Actor("113#Jake Gyllenhaal"),
                new Actor("114#James Badge Dale"),
                new Actor("115#James Spader"),
                new Actor("116#Jamie Foxx"),
                new Actor("117#Jayden Zhang"),
                new Actor("118#Jeff Bridges"),
                new Actor("119#Jeff Goldblum"),
                new Actor("120#Jeremy Renner"),
                new Actor("121#JJ Feild"),
                new Actor("122#Jodi Long"),
                new Actor("123#John C. Reilly"),
                new Actor("124#John Kani"),
                new Actor("125#John Slattery"),
                new Actor("126#Jon Favreau"),
                new Actor("127#Jonathan Howard"),
                new Actor("128#Jorge Lendeborg Jr."),
                new Actor("129#Josh Dallas"),
                new Actor("130#Jude Law"),
                new Actor("131#Judy Greer"),
                new Actor("132#Karen Gillan"),
                new Actor("133#Karl Urban"),
                new Actor("134#Kat Dennings"),
                new Actor("135#Kathleen Cardoso"),
                new Actor("136#Katrina Durden"),
                new Actor("137#Kenneth Choi"),
                new Actor("138#Khalili Dastan"),
                new Actor("139#Kit Harington"),
                new Actor("140#Krystian Godlewski"),
                new Actor("141#Kumail Nanjiani"),
                new Actor("142#Kunal Dudheker"),
                new Actor("143#Kurt Russell"),
                new Actor("144#Lashana Lynch"),
                new Actor("145#Laura Haddock"),
                new Actor("146#Laura Harrier"),
                new Actor("147#Lauren Ridloff"),
                new Actor("148#Laurence Fishburne"),
                new Actor("149#Lee Pace"),
                new Actor("150#Leslie Bibb"),
                new Actor("151#Letitia Wright"),
                new Actor("152#Lewis Young"),
                new Actor("153#Lex Shrapnel"),
                new Actor("154#Lia McHugh"),
                new Actor("155#Liani Samuel"),
                new Actor("156#Linda Cardellini"),
                new Actor("157#Linda Louise Duan"),
                new Actor("158#Liv Tyler"),
                new Actor("159#Lou Ferrigno"),
                new Actor("160#Lupita Nyong'o"),
                new Actor("161#Ma Dong-seok"),
                new Actor("162#Mads Mikkelsen"),
                new Actor("163#Marco Khan"),
                new Actor("164#Marisa Tomei"),
                new Actor("165#Mark Anthony Brighton"),
                new Actor("166#Mark Ruffalo"),
                new Actor("167#Martin Donovan"),
                new Actor("168#Martin Freeman"),
                new Actor("169#Martin Starr"),
                new Actor("170#Mary Rivera"),
                new Actor("171#Maximiliano Hernández"),
                new Actor("172#Meera Syal"),
                new Actor("173#Meng'er Zhang"),
                new Actor("174#Michael B. Jordan"),
                new Actor("175#Michael Douglas"),
                new Actor("176#Michael Keaton"),
                new Actor("177#Michael Peña"),
                new Actor("178#Michael Rooker"),
                new Actor("179#Michael Stuhlbarg"),
                new Actor("180#Michelle Lee"),
                new Actor("181#Michelle Pfeiffer"),
                new Actor("182#Michelle Yeoh"),
                new Actor("183#Mickey Rourke"),
                new Actor("184#Nabiyah Be"),
                new Actor("185#Natalie Portman"),
                new Actor("186#Neal McDonough"),
                new Actor("187#Numan Acar"),
                new Actor("188#Olga Kurylenko"),
                new Actor("189#O-T Fagbenle"),
                new Actor("190#Paul Bettany"),
                new Actor("191#Paul Rudd"),
                new Actor("192#Paul Soles"),
                new Actor("193#Paul W. He"),
                new Actor("194#Paula Newsome"),
                new Actor("195#Peter Billingsley"),
                new Actor("196#Peter Mensah"),
                new Actor("197#Peter Serafinowicz"),
                new Actor("198#Pom Klementieff"),
                new Actor("199#Rachel House"),
                new Actor("200#Rachel McAdams"),
                new Actor("201#Rachel Weisz"),
                new Actor("202#Ramone Morgan"),
                new Actor("203#Randall Park"),
                new Actor("204#Ray Stevenson"),
                new Actor("205#Ray Winstone"),
                new Actor("206#Rebecca Hall"),
                new Actor("207#Remy Hii"),
                new Actor("208#Rene Russo"),
                new Actor("209#Rhys Ifans"),
                new Actor("210#Richard Armitage"),
                new Actor("211#Richard Madden"),
                new Actor("212#Robert Downey Jr."),
                new Actor("213#Robert Redford"),
                new Actor("214#Rod Hallett"),
                new Actor("215#Rune Temte"),
                new Actor("216#Ryan Kiera Armstrong"),
                new Actor("217#Salma Hayek"),
                new Actor("218#Sam Rockwell"),
                new Actor("219#Samuel L. Jackson"),
                new Actor("220#Sayed Badreya"),
                new Actor("221#Scarlett Johansson"),
                new Actor("222#Scott Adkins"),
                new Actor("223#Sean Gunn"),
                new Actor("224#Sebastian Stan"),
                new Actor("225#Selenis Leyva"),
                new Actor("226#Shaun Toub"),
                new Actor("227#Simu Liu"),
                new Actor("228#Stanley Tucci"),
                new Actor("229#Stellan Skarsgård"),
                new Actor("230#Stephanie Hsu"),
                new Actor("231#Stephanie Szostak"),
                new Actor("232#Sterling K. Brown"),
                new Actor("233#Sylvester Stallone"),
                new Actor("234#T.I."),
                new Actor("235#Tadanobu Asano"),
                new Actor("236#Taika Waititi"),
                new Actor("237#Terrence Howard"),
                new Actor("238#Tessa Thompson"),
                new Actor("239#Thomas Haden Church"),
                new Actor("240#Tilda Swinton"),
                new Actor("241#Tim Blake Nelson"),
                new Actor("242#Tim Guinee"),
                new Actor("243#Tim Roth"),
                new Actor("244#Tobey Maguire"),
                new Actor("245#Toby Jones"),
                new Actor("246#Tom Hiddleston"),
                new Actor("247#Tom Holland"),
                new Actor("248#Tom Morello"),
                new Actor("249#Tommy Flanagan"),
                new Actor("250#Tommy Lee Jones"),
                new Actor("251#Tony Chiu-Wai Leung"),
                new Actor("252#Tony Revolori"),
                new Actor("253#Topo Wresniwiro"),
                new Actor("254#Tsai Chin"),
                new Actor("255#Ty Burrell"),
                new Actor("256#Tyne Daly"),
                new Actor("257#Umit Ulgen"),
                new Actor("258#Vin Diesel"),
                new Actor("259#Violet McGraw"),
                new Actor("260#Wah Yuen"),
                new Actor("261#Walton Goggins"),
                new Actor("262#Will Lyman"),
                new Actor("263#Willem Dafoe"),
                new Actor("264#William Hurt"),
                new Actor("265#Winston Duke"),
                new Actor("266#Wood Harris"),
                new Actor("267#Wyatt Oleff"),
                new Actor("268#Yasmin Mwanza"),
                new Actor("269#Zach Barack"),
                new Actor("270#Zachary Levi"),
                new Actor("271#Zara Phythian"),
                new Actor("272#Zendaya"),
                new Actor("273#Zoe Saldana"),
                new Actor("274#Zoha Rahman"),

            });

            modelBuilder.Entity<Role>().HasData(new Role[]
            {
                new Role("1#1#212#1#Tony Stark"),
                new Role("2#1#96#2#Pepper Potts"),
                new Role("3#1#237#3#Rhodey"),
                new Role("4#1#118#4#Obadiah Stane"),
                new Role("5#1#150#5#Christine Everhart"),
                new Role("6#1#226#6#Yinsen"),
                new Role("7#1#82#7#Raza"),
                new Role("8#1#53#8#Agent Coulson"),
                new Role("9#1#34#9#General Gabriel"),
                new Role("10#1#220#10#Abu Bakaar"),
                new Role("11#1#190#11#JARVIS"),
                new Role("12#1#126#12#Hogan"),
                new Role("13#1#195#13#William Ginter Riva"),
                new Role("14#1#242#14#Major Allen"),
                new Role("15#1#262#15#Award Ceremony Narrator"),
                new Role("16#1#248#16#Guard"),
                new Role("17#1#163#17#Guard"),
                new Role("18#1#138#18#Guard"),
                new Role("19#2#73#1#Bruce Banner"),
                new Role("20#2#158#2#Betty Ross"),
                new Role("21#2#243#3#Emil Blonsky"),
                new Role("22#2#264#4#General 'Thunderbolt' Ross"),
                new Role("23#2#241#5#Samuel Sterns"),
                new Role("24#2#255#6#Leonard"),
                new Role("25#2#49#7#Major Kathleen Sparr"),
                new Role("26#2#196#8#General Joe Greller"),
                new Role("27#2#159#9#Voice of The Incredible Hulk"),
                new Role("28#2#192#10#Stanley"),
                new Role("29#2#66#11#Martina"),
                new Role("30#3#212#1#Tony Stark"),
                new Role("31#3#183#2#Ivan Vanko"),
                new Role("32#3#96#3#Pepper Potts"),
                new Role("33#3#71#4#Lt. Col. James 'Rhodey' Rhodes"),
                new Role("34#3#221#5#Natalie Rushman"),
                new Role("35#3#218#6#Justin Hammer"),
                new Role("36#3#219#7#Nick Fury"),
                new Role("37#3#53#8#Agent Coulson"),
                new Role("38#3#125#9#Howard Stark"),
                new Role("39#3#89#10#Senator Stern"),
                new Role("40#3#190#11#JARVIS"),
                new Role("41#4#46#1#Thor"),
                new Role("42#4#21#2#Odin"),
                new Role("43#4#185#3#Jane Foster"),
                new Role("44#4#246#4#Loki"),
                new Role("45#4#229#5#Erik Selvig"),
                new Role("46#4#134#6#Darcy Lewis"),
                new Role("47#4#53#7#Agent Coulson"),
                new Role("48#4#56#8#King Laufey"),
                new Role("49#4#107#9#Heimdall"),
                new Role("50#4#204#10#Volstagg"),
                new Role("51#4#235#11#Hogun"),
                new Role("52#4#129#12#Fandral"),
                new Role("53#4#112#13#Sif"),
                new Role("54#4#208#14#Frigga"),
                new Role("55#4#6#15#Isabela Alvarez"),
                new Role("56#4#171#16#Agent Sitwell"),
                new Role("57#5#45#1#Captain America"),
                new Role("58#5#106#2#Johann Schmidt"),
                new Role("59#5#219#3#Nick Fury"),
                new Role("60#5#105#4#Peggy Carter"),
                new Role("61#5#224#5#James Buchanan 'Bucky' Barnes"),
                new Role("62#5#250#6#Colonel Chester Phillips"),
                new Role("63#5#70#7#Howard Stark"),
                new Role("64#5#210#8#Heinz Kruger"),
                new Role("65#5#228#9#Dr. Abraham Erskine"),
                new Role("66#5#245#10#Dr. Arnim Zola"),
                new Role("67#5#186#11#Timothy 'Dum Dum' Dugan"),
                new Role("68#5#67#12#Gabe Jones"),
                new Role("69#5#137#13#Jim Morita"),
                new Role("70#5#121#14#James Montgomery Falsworth"),
                new Role("71#5#40#15#Jacques Dernier"),
                new Role("72#5#153#16#Gilmore Hodge"),
                new Role("73#6#212#1#Tony Stark"),
                new Role("74#6#45#2#Steve Rogers"),
                new Role("75#6#221#3#Natasha Romanoff"),
                new Role("76#6#120#4#Clint Barton"),
                new Role("77#6#166#5#Bruce Banner"),
                new Role("78#6#46#6#Thor"),
                new Role("79#6#246#7#Loki"),
                new Role("80#6#53#8#Agent Phil Coulson"),
                new Role("81#6#55#9#Agent Maria Hill"),
                new Role("82#6#229#10#Selvig"),
                new Role("83#6#219#11#Nick Fury"),
                new Role("84#6#96#12#Pepper Potts"),
                new Role("85#6#190#13#Jarvis"),
                new Role("86#7#212#1#Tony Stark"),
                new Role("87#7#95#2#Aldrich Killian"),
                new Role("88#7#96#3#Pepper Potts"),
                new Role("89#7#71#4#Colonel James Rhodes"),
                new Role("90#7#206#5#Maya Hansen"),
                new Role("91#7#126#6#Happy Hogan"),
                new Role("92#7#27#7#Trevor Slattery"),
                new Role("93#7#114#8#Savin"),
                new Role("94#7#231#9#Brandt"),
                new Role("95#7#190#10#JARVIS"),
                new Role("96#8#46#1#Thor"),
                new Role("97#8#185#2#Jane Foster"),
                new Role("98#8#246#3#Loki"),
                new Role("99#8#229#4#Erik Selvig"),
                new Role("100#8#21#5#Odin"),
                new Role("101#8#50#6#Malekith"),
                new Role("102#8#112#7#Sif"),
                new Role("103#8#270#8#Fandral"),
                new Role("104#8#204#9#Volstagg"),
                new Role("105#8#235#10#Hogun"),
                new Role("106#8#107#11#Heimdall"),
                new Role("107#8#208#12#Frigga"),
                new Role("108#8#5#13#Algrim"),
                new Role("109#8#134#14#Darcy Lewis"),
                new Role("110#8#11#15#Eir"),
                new Role("111#8#54#16#Tyr"),
                new Role("112#8#127#17#Ian Boothby"),
                new Role("113#8#202#18#John"),
                new Role("114#9#45#1#Steve Rogers"),
                new Role("115#9#219#2#Nick Fury"),
                new Role("116#9#221#3#Natasha Romanoff"),
                new Role("117#9#213#4#Alexander Pierce"),
                new Role("118#9#224#5#Bucky Barnes"),
                new Role("119#9#22#6#Sam Wilson"),
                new Role("120#9#55#7#Maria Hill"),
                new Role("121#9#87#8#Brock Rumlow"),
                new Role("122#9#171#9#Jasper Sitwell"),
                new Role("123#10#47#1#Peter Quill"),
                new Role("124#10#258#2#Groot"),
                new Role("125#10#37#3#Rocket"),
                new Role("126#10#273#4#Gamora"),
                new Role("127#10#62#5#Drax"),
                new Role("128#10#149#6#Ronan"),
                new Role("129#10#178#7#Yondu Udonta"),
                new Role("130#10#132#8#Nebula"),
                new Role("131#10#69#9#Korath"),
                new Role("132#10#123#10#Corpsman Dey"),
                new Role("133#10#92#11#Nova Prime"),
                new Role("134#10#31#12#The Collector"),
                new Role("135#10#145#13#Meredith Quill"),
                new Role("136#10#223#14#Kraglin…"),
                new Role("137#10#197#15#Denarian Saal"),
                new Role("138#10#51#16#The Broker"),
                new Role("139#10#140#17#On Set Groot"),
                new Role("140#10#267#18#Young Quill"),
                new Role("141#11#212#1#Tony Stark"),
                new Role("142#11#45#2#Steve Rogers"),
                new Role("143#11#166#3#Bruce Banner"),
                new Role("144#11#46#4#Thor"),
                new Role("145#11#221#5#Natasha Romanoff"),
                new Role("146#11#120#6#Clint Barton"),
                new Role("147#11#115#7#Ultron"),
                new Role("148#11#219#8#Nick Fury"),
                new Role("149#11#71#9#James Rhodes"),
                new Role("150#11#2#10#Pietro Maximoff"),
                new Role("151#11#75#11#Wanda Maximoff"),
                new Role("152#11#190#12#Jarvis"),
                new Role("153#11#55#13#Maria Hill"),
                new Role("154#11#22#14#Sam Wilson"),
                new Role("155#11#105#15#Peggy Carter"),
                new Role("156#11#107#16#Heimdall"),
                new Role("157#11#156#17#Laura Barton"),
                new Role("158#11#229#18#Erik Selvig"),
                new Role("159#12#191#1#Scott Lang"),
                new Role("160#12#175#2#Dr. Hank Pym"),
                new Role("161#12#58#3#Darren Cross"),
                new Role("162#12#79#4#Hope Van Dyne"),
                new Role("163#12#35#5#Paxton"),
                new Role("164#12#22#6#Sam Wilson"),
                new Role("165#12#131#7#Maggie Lang"),
                new Role("166#12#3#8#Cassie Lang"),
                new Role("167#12#177#9#Luis"),
                new Role("168#12#63#10#Kurt"),
                new Role("169#12#234#11#Dave"),
                new Role("170#12#266#12#Gale"),
                new Role("171#12#105#13#Peggy Carter"),
                new Role("172#12#125#14#Howard Stark"),
                new Role("173#12#167#15#Mitchell Carson"),
                new Role("174#12#88#16#Cab Driver"),
                new Role("175#12#94#17#Dale"),
                new Role("176#12#214#18#Hydra Buyer"),
                new Role("177#13#45#1#Steve Rogers"),
                new Role("178#13#212#2#Tony Stark"),
                new Role("179#13#221#3#Natasha Romanoff"),
                new Role("180#13#224#4#Bucky Barnes"),
                new Role("181#13#22#5#Sam Wilson"),
                new Role("182#13#71#6#Lieutenant James Rhodes"),
                new Role("183#13#120#7#Clint Barton"),
                new Role("184#13#42#8#T'Challa"),
                new Role("185#13#190#9#Vision"),
                new Role("186#13#75#10#Wanda Maximoff"),
                new Role("187#13#191#11#Scott Lang"),
                new Role("188#13#77#12#Sharon Carter"),
                new Role("189#13#247#13#Peter Parker"),
                new Role("190#13#60#14#Zemo"),
                new Role("191#13#87#15#Brock Rumlow"),
                new Role("192#13#264#16#Secretary of State Thaddeus Ross"),
                new Role("193#13#168#17#Everett K. Ross"),
                new Role("194#13#164#18#May Parker"),
                new Role("195#14#29#1#Dr. Stephen Strange"),
                new Role("196#14#44#2#Mordo"),
                new Role("197#14#200#3#Dr. Christine Palmer"),
                new Role("198#14#30#4#Wong"),
                new Role("199#14#162#5#Kaecilius"),
                new Role("200#14#240#6#The Ancient One"),
                new Role("201#14#179#7#Dr. Nicodemus West"),
                new Role("202#14#32#8#Jonathan Pangborn"),
                new Role("203#14#222#9#Lucian…"),
                new Role("204#14#271#10#Brunette Zealot"),
                new Role("205#14#7#11#Tall Zealot"),
                new Role("206#14#136#12#Blonde Zealot"),
                new Role("207#14#253#13#Hamir"),
                new Role("208#14#257#14#Sol Rama"),
                new Role("209#14#157#15#Tina Minoru"),
                new Role("210#14#165#16#Daniel Drumm"),
                new Role("211#14#172#17#Dr. Patel"),
                new Role("212#14#13#18#Dr. Bruner"),
                new Role("213#15#47#1#Peter Quill"),
                new Role("214#15#273#2#Gamora"),
                new Role("215#15#62#3#Drax"),
                new Role("216#15#258#4#Baby Groot"),
                new Role("217#15#37#5#Rocket"),
                new Role("218#15#178#6#Yondu"),
                new Role("219#15#132#7#Nebula"),
                new Role("220#15#198#8#Mantis"),
                new Role("221#15#233#9#Stakar Ogord"),
                new Role("222#15#143#10#Ego"),
                new Role("223#15#74#11#Ayesha"),
                new Role("224#15#48#12#Taserface"),
                new Role("225#15#223#13#Kraglin"),
                new Role("226#15#249#14#Tullk"),
                new Role("227#15#145#15#Meredith Quill"),
                new Role("228#15#1#16#Young Ego Facial Reference"),
                new Role("229#15#99#17#Sovereign Chambermaid"),
                new Role("230#16#247#1#Peter Parker"),
                new Role("231#16#176#2#Adrian Toomes"),
                new Role("232#16#212#3#Tony Stark"),
                new Role("233#16#164#4#May Parker"),
                new Role("234#16#126#5#Happy Hogan"),
                new Role("235#16#96#6#Pepper Potts"),
                new Role("236#16#272#7#Michelle"),
                new Role("237#16#72#8#Aaron Davis"),
                new Role("238#16#111#9#Ned"),
                new Role("239#16#146#10#Liz"),
                new Role("240#16#252#11#Flash"),
                new Role("241#16#36#12#Herman Schultz"),
                new Role("242#16#256#13#Anne Marie Hoag"),
                new Role("243#16#4#14#Abe"),
                new Role("244#16#101#15#Coach Wilson"),
                new Role("245#16#137#16#Principal Morita"),
                new Role("246#16#225#17#Ms. Warren"),
                new Role("247#16#19#18#Betty"),
                new Role("248#17#46#1#Thor"),
                new Role("249#17#246#2#Loki"),
                new Role("250#17#41#3#Hela"),
                new Role("251#17#166#4#Bruce Banner"),
                new Role("252#17#107#5#Heimdall"),
                new Role("253#17#119#6#Grandmaster"),
                new Role("254#17#238#7#Valkyrie"),
                new Role("255#17#133#8#Skurge"),
                new Role("256#17#21#9#Odin"),
                new Role("257#17#29#10#Doctor Strange"),
                new Role("258#17#236#11#Korg"),
                new Role("259#17#199#12#Topaz"),
                new Role("260#17#52#13#Surtur"),
                new Role("261#17#235#14#Hogun"),
                new Role("262#17#204#15#Volstagg"),
                new Role("263#17#270#16#Fandral"),
                new Role("264#17#91#17#Asgardian Date #1"),
                new Role("265#17#12#18#Asgardian Date #2"),
                new Role("266#18#42#1#T'Challa"),
                new Role("267#18#174#2#Erik Killmonger"),
                new Role("268#18#160#3#Nakia"),
                new Role("269#18#59#4#Okoye"),
                new Role("270#18#168#5#Everett K. Ross"),
                new Role("271#18#61#6#W'Kabi"),
                new Role("272#18#151#7#Shuri"),
                new Role("273#18#265#8#M'Baku"),
                new Role("274#18#232#9#N'Jobu"),

            });
        }




    }
}

MovieDbApp.Models
Role.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Models
{
    public class Role
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int RoleId { get; set; }

        public int Priority { get; set; }
        public string RoleName { get; set; }

        public int MovieId { get; set; }
        public int ActorId { get; set; }

        public virtual Actor Actor { get; private set; }
        public virtual Movie Movie { get; private set; }

        public Role()
        {

        }

        public Role(string line)
        {
            string[] split = line.Split('#');
            RoleId = int.Parse(split[0]);
            MovieId = int.Parse(split[1]);
            ActorId = int.Parse(split[2]);
            Priority = int.Parse(split[3]);
            RoleName = split[4];
        }
    }
}

MovieDbApp.Models.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>
Movie.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace MovieDbApp.Models
{
    public class Movie
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int MovieId { get; set; }

        [StringLength(240)]
        public string Title { get; set; }

        [Range(0, 10000)]
        public double Income { get; set; }

        [Range(0, 10)]
        public double Rating { get; set; }

        public DateTime Release { get; set; }

        public int DirectorId { get; set; }

        public virtual Director Director { get; set; }

        public virtual ICollection<Actor> Actors { get; set; }

        public virtual ICollection<Role> Roles { get; set; }


        public Movie()
        {

        }

        public Movie(string line)
        {
            string[] split = line.Split('#');
            MovieId = int.Parse(split[0]);
            Title = split[1];
            Income = double.Parse(split[2]);
            DirectorId = int.Parse(split[3]);
            Release = DateTime.Parse(split[4].Replace('*', '.'));
            Rating = double.Parse(split[5]);
        }

    }
}
Director.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Models
{
    public class Director
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int DirectorId { get; set; }

        [Required]
        [StringLength(240)]
        public string DirectorName { get; set; }

        public virtual ICollection<Movie> Movies { get; set; }

        public Director()
        {
            Movies = new HashSet<Movie>();
        }

        public Director(string line)
        {
            string[] split = line.Split('#');
            DirectorId = int.Parse(split[0]);
            DirectorName = split[1];
            Movies = new HashSet<Movie>();
        }
    }
}
Actor.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Models
{
    public class Actor
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int ActorId { get; set; }

        [Required]
        [StringLength(240)]
        public string ActorName { get; set; }

        public virtual ICollection<Movie> Movies { get; set; }
        public virtual ICollection<Role> Roles { get; set; }
        public Actor()
        {

        }

        public Actor(string line)
        {
            string[] split = line.Split('#');
            ActorId = int.Parse(split[0]);
            ActorName = split[1];
        }
    }
}

MovieDbApp.Logic
MovieDbApp.Logic.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\MovieDbApp.Models\MovieDbApp.Models.csproj" />
    <ProjectReference Include="..\MovieDbApp.Repository\MovieDbApp.Repository.csproj" />
  </ItemGroup>

</Project>

Interfaces
IRoleLogic.cs
using MovieDbApp.Models;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IRoleLogic
    {
        void Create(Role item);
        void Delete(int id);
        Role Read(int id);
        IQueryable<Role> ReadAll();
        void Update(Role item);
    }
}
IMovieLogic.cs
using MovieDbApp.Models;
using System.Collections.Generic;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IMovieLogic
    {
        void Create(Movie item);
        void Delete(int id);
        double? GetAverageRatePerYear(int year);
        Movie Read(int id);
        IQueryable<Movie> ReadAll();
        void Update(Movie item);
        IEnumerable<MovieLogic.YearInfo> YearStatistics();
    }
}
IDirectorLogic.cs
using MovieDbApp.Models;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IDirectorLogic
    {
        void Create(Director item);
        void Delete(int id);
        Director Read(int id);
        IQueryable<Director> ReadAll();
        void Update(Director item);
    }
}
IActorLogic.cs
using MovieDbApp.Models;
using System.Linq;

namespace MovieDbApp.Logic
{
    public interface IActorLogic
    {
        void Create(Actor item);
        void Delete(int id);
        Actor Read(int id);
        IQueryable<Actor> ReadAll();
        void Update(Actor item);
    }
}
Classes
RoleLogic.cs
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Logic
{
    public class RoleLogic : IRoleLogic
    {
        IRepository<Role> repo;

        public RoleLogic(IRepository<Role> repo)
        {
            this.repo = repo;
        }

        public void Create(Role item)
        {
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Role Read(int id)
        {
            return this.repo.Read(id);
        }

        public IQueryable<Role> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Role item)
        {
            this.repo.Update(item);
        }
    }
}
MovieLogic.cs
using System;
using System.Collections.Generic;
using System.Linq;
using MovieDbApp.Models;
using MovieDbApp.Repository;

namespace MovieDbApp.Logic
{
    public class MovieLogic : IMovieLogic
    {
        IRepository<Movie> repo;

        public MovieLogic(IRepository<Movie> repo)
        {
            this.repo = repo;
        }

        public void Create(Movie item)
        {
            if (item.Title.Length < 3)
            {
                throw new ArgumentException("title too short...");
            }
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Movie Read(int id)
        {
            var movie = this.repo.Read(id);
            if (movie == null)
            {
                throw new ArgumentException("Movie not exists");
            }
            return movie;

        }

        public IQueryable<Movie> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Movie item)
        {
            this.repo.Update(item);
        }

        //non cruds

        public double? GetAverageRatePerYear(int year)
        {
            return this.repo
               .ReadAll()
               .Where(t => t.Release.Year == year)
               .Average(t => t.Rating);
        }


        public IEnumerable<YearInfo> YearStatistics()
        {
            return from x in this.repo.ReadAll()
                   group x by x.Release.Year into g
                   select new YearInfo()
                   {
                       Year = g.Key,
                       AvgRating = g.Average(t => t.Rating),
                       MovieNumber = g.Count()
                   };
        }

        public class YearInfo
        {
            public int Year { get; set; }
            public double? AvgRating { get; set; }
            public int MovieNumber { get; set; }

            public override bool Equals(object obj)
            {
                YearInfo b = obj as YearInfo;
                if (b == null)
                {
                    return false;
                }
                else
                {
                    return this.Year == b.Year
                        && this.AvgRating == b.AvgRating
                        && this.MovieNumber == b.MovieNumber;
                }
            }

            public override int GetHashCode()
            {
                return HashCode.Combine(this.Year, this.AvgRating, this.MovieNumber);
            }
        }


    }
}
DirectorLogic.cs
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Logic
{
    public class DirectorLogic : IDirectorLogic
    {
        IRepository<Director> repo;

        public DirectorLogic(IRepository<Director> repo)
        {
            this.repo = repo;
        }

        public void Create(Director item)
        {
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Director Read(int id)
        {
            return this.repo.Read(id);
        }

        public IQueryable<Director> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Director item)
        {
            this.repo.Update(item);
        }
    }
}
ActorLogic.cs
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MovieDbApp.Logic
{
    public class ActorLogic : IActorLogic
    {
        IRepository<Actor> repo;

        public ActorLogic(IRepository<Actor> repo)
        {
            this.repo = repo;
        }

        public void Create(Actor item)
        {
            this.repo.Create(item);
        }

        public void Delete(int id)
        {
            this.repo.Delete(id);
        }

        public Actor Read(int id)
        {
            return this.repo.Read(id);
        }

        public IQueryable<Actor> ReadAll()
        {
            return this.repo.ReadAll();
        }

        public void Update(Actor item)
        {
            this.repo.Update(item);
        }
    }
}

MovieDbApp.Client
Program.cs
using ConsoleTools;
using MovieDbApp.Logic;
using MovieDbApp.Models;
using MovieDbApp.Repository;
using System;
using System.Linq;

namespace MovieDbApp.Client
{
    internal class Program
    {
        static ActorLogic actorLogic;
        static RoleLogic roleLogic;
        static DirectorLogic directorLogic;
        static MovieLogic movieLogic;

        static void Create(string entity)
        {
            Console.WriteLine(entity + " create");
            Console.ReadLine();
        }
        static void List(string entity)
        {
            if (entity == "Actor")
            {
                var items = actorLogic.ReadAll();
                Console.WriteLine("Id" + "\t" + "Name");
                foreach (var item in items)
                {
                    Console.WriteLine(item.ActorId + "\t" + item.ActorName);
                }
            }
            Console.ReadLine();
        }
        static void Update(string entity)
        {
            Console.WriteLine(entity + " update");
            Console.ReadLine();
        }
        static void Delete(string entity)
        {
            Console.WriteLine(entity + " delete");
            Console.ReadLine();
        }

        static void Main(string[] args)
        {
            var ctx = new MovieDbContext();

            var movieRepo = new MovieRepository(ctx);
            var roleRepo = new RoleRepository(ctx);
            var actorRepo = new ActorRepository(ctx);
            var directorRepo = new DirectorRepository(ctx);

            movieLogic = new MovieLogic(movieRepo);
            roleLogic = new RoleLogic(roleRepo);
            actorLogic = new ActorLogic(actorRepo);
            directorLogic = new DirectorLogic(directorRepo);

            var actorSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Actor"))
                .Add("Create", () => Create("Actor"))
                .Add("Delete", () => Delete("Actor"))
                .Add("Update", () => Update("Actor"))
                .Add("Exit", ConsoleMenu.Close);

            var roleSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Role"))
                .Add("Create", () => Create("Role"))
                .Add("Delete", () => Delete("Role"))
                .Add("Update", () => Update("Role"))
                .Add("Exit", ConsoleMenu.Close);

            var directorSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Director"))
                .Add("Create", () => Create("Director"))
                .Add("Delete", () => Delete("Director"))
                .Add("Update", () => Update("Director"))
                .Add("Exit", ConsoleMenu.Close);

            var movieSubMenu = new ConsoleMenu(args, level: 1)
                .Add("List", () => List("Movie"))
                .Add("Create", () => Create("Movie"))
                .Add("Delete", () => Delete("Movie"))
                .Add("Update", () => Update("Movie"))
                .Add("Exit", ConsoleMenu.Close);


            var menu = new ConsoleMenu(args, level: 0)
                .Add("Movies", () => movieSubMenu.Show())
                .Add("Actors", () => actorSubMenu.Show())
                .Add("Roles", () => roleSubMenu.Show())
                .Add("Directors", () => directorSubMenu.Show())
                .Add("Exit", ConsoleMenu.Close);

            menu.Show();

        }
    }
}
MovieDbApp.Client.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ConsoleMenu-simple" Version="2.4.2" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\MovieDbApp.Logic\MovieDbApp.Logic.csproj" />
    <ProjectReference Include="..\MovieDbApp.Models\MovieDbApp.Models.csproj" />
    <ProjectReference Include="..\MovieDbApp.Repository\MovieDbApp.Repository.csproj" />
  </ItemGroup>

</Project>

HFT07A
Tester
TesterClass.cs
using Functions;
using NUnit.Framework;
using System;

namespace Tester
{
    [TestFixture]
    public class TesterClass
    {
        MathFunctions mf;

        [SetUp]
        public void Init()
        {
            mf = new MathFunctions();
        }

        [Test]
        public void AreaTest()
        {
            //ACT
            double result = mf.Area(6, 7);
            //ASSERT
            Assert.That(result, Is.EqualTo(42));
        }

        [Test]
        public void CircleAreaTest()
        {
            //ACT
            double result = mf.CircleArea(10);
            //ASSERT
            Assert.That(result, Is.EqualTo(10*10*Math.PI));
        }

        [Test]
        public void CircleAreaTestWithNegative()
        {
            //ASSERT
            Assert.That(() => mf.CircleArea(-10), Throws.TypeOf<ArgumentException>());
        }

        [Test]
        public void MaxTest()
        {
            //ACT
            int result = mf.Max(10, 20);
            //ASSERT
            Assert.That(result, Is.EqualTo(20));
        }

        [Test]
        public void MaxTest2()
        {
            //ACT
            int result = mf.Max(20, 10);
            //ASSERT
            Assert.That(result, Is.EqualTo(20));
        }
    }
}
Tester.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Functions\Functions.csproj" />
  </ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.1.0" />
		<PackageReference Include="NUnit" Version="3.13.2" />
		<PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />
	</ItemGroup>


</Project>
PersonTester.cs
using Functions;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tester
{
    [TestFixture]
    public class PersonTester
    {
        [Test]
        public void YoungerTest()
        {
            //ARRANGE
            PersonLogic logic = new PersonLogic();
            var expected = new List<Person>()
            {
                new Person("Béla", 43),
                new Person("Géza", 25),
                new Person("Kati", 20),
            };

            //ACT
            var actual = logic.YoungerThan45().ToList();

            //ASSERT
            Assert.AreEqual(expected, actual);
        }
    }
}
ConverterTest.cs
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tester
{
    [TestFixture]
    public class ConverterTest
    {
        
        public static IEnumerable<TestCaseData> Sources
        {
            get
            {
                List<TestCaseData> data = new List<TestCaseData>();
                for (int i = -10; i <= 10; i++)
                {
                    data.Add(new TestCaseData(new object[] {i.ToString(), Convert.ToInt32(i.ToString()) }));
                }
                return data;
            }
        }


        [TestCaseSource(nameof(Sources))]
        public void ParseTest(string input, int expected)
        {
            int result = int.Parse(input);
            Assert.That(result, Is.EqualTo(expected));
        }
    }
}
Functions
PersonLogic.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Functions
{
    public class PersonLogic
    {
        List<Person> people;
        public PersonLogic()
        {
            people = new List<Person>()
            {
                new Person("Béla", 43),
                new Person("Géza", 25),
                new Person("Kati", 20),
                new Person("Irén", 66),
                new Person("Feri", 55),
            };
        }

        public IEnumerable<Person> YoungerThan45()
        {
            return people.Where(t => t.Age < 45);
        }
    }
}
Person.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Functions
{
    public class Person
    {
        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }

        public string Name { get; set; }

        public int Age { get; set; }

        public override bool Equals(object obj)
        {
            Person b = obj as Person;
            if (b == null)
            {
                return false;
            }
            else
            {
                return this.Name == b.Name && this.Age == b.Age;
            }
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(this.Name, this.Age);
        }
    }


}
MathFunctions.cs
using System;

namespace Functions
{
    public class MathFunctions
    {
        public int Area (int x, int y)
        {
            if (x > 0 && y > 0)
            {
                return x * y;
            }
            else
            {
                return 0;
            }
        }

        public double CircleArea(int radius)
        {
            if (radius > 0)
            {
                return radius * radius * Math.PI;
            }
            else
            {
                throw new ArgumentException("Radius must be positive");
            }
        }

        public T Max<T>(T a, T b) where T : IComparable
        {
            if (a.CompareTo(b) < 0)
            {
                return b;
            }
            else
            {
                return a;
            }
        }

    }
}
Functions.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
  </PropertyGroup>

</Project>
########################################################################################################################
*/